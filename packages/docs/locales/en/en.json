{
  "api": {
    "all": {
      "events": {
        "validation": "Trigger internal validation."
      },
      "props": {
        "tag": "Replaces html with provided value. This is useful for semantics and also to allow for valid markup in some cases (`ul > li` and `tr > td` etc.)."
      }
    },
    "VaForm": {
      "props": {
        "autofocus": "Focus on first form-component <!-- TODO Add link --> on render"
      },
      "events": {
        "validation": "Triggered on validation update"
      },
      "methods": {
        "validate": "Performs validation and updates error state for each form component. Works with nested forms.",
        "focus": "Focus on first focusable form-component in the form.",
        "focusInvalid": "Focus on first focusable invalid form-component in the form. This is useful for longer forms and allows to bring user attention to invalid field.",
        "resetValidation": "Reset validation for all validateable <!-- TODO Add link --> form-components.",
        "reset": "Reset values and validation state for all form-components"
      }
    },
    "VaRating": {
      "props": {
        "value": "The rating value",
        "icon": "The icon displayed when icon is filled",
        "half-icon": "The icon displayed when icon is half-filled (requires **`halves`**)",
        "empty-icon": "The icon displayed when icon is empty (requires **`halves`**)",
        "readonly": "Disables all user interaction effects (pointer, hover)",
        "disabled": "Applies corporate *disabled* style and removes all user interaction effects",
        "numbers": "When true numbers from 1 to `max` are rendered instead of icons",
        "halves": "Allow to select half of the item",
        "max": "The amount of items to display",
        "clearable": "Allows the components value to be set to 0. Triggered by clicking on currently selected icon",
        "hover": "Adds visual feedback when hovering on items",
        "texts": "The array of captions to be used with each value. The array length should be equal to **`max`** prop",
        "text-color": "Color of text captions",
        "unselected-color": "Specifies the color of unselected items (by default **`color`** prop is used)"
      },
      "events": {
        "input": "Emits rating number when its value changes"
      }
    }
  },
  "menu": {
    "auth": "Auth",
    "rating": "Rating",
    "buttons": "Buttons",
    "charts": "Charts",
    "colorPickers": "Color Pickers",
    "collapses": "Collapses",
    "timelines": "Timelines",
    "dashboard": "Dashboard",
    "formElements": "Form Elements",
    "forms": "Forms",
    "mediumEditor": "Medium Editor",
    "grid": "Grid",
    "icons": "Icons",
    "cards": "Cards",
    "spinners": "Spinners",
    "login": "Login",
    "maps": "Maps",
    "pages": "Pages",
    "modals": "Modals",
    "notifications": "Notifications",
    "progressBars": "Progress Bars",
    "signUp": "Sign up",
    "statistics": "Statistics",
    "lists": "Lists",
    "tables": "Tables",
    "markupTables": "Markup Tables",
    "dataTables": "Data Tables",
    "chips": "Chips",
    "tabs": "Tabs",
    "typography": "Typography",
    "uiElements": "UI Elements",
    "treeView": "Tree view",
    "dateTimePickers": "Date time pickers",
    "fileUpload": "File Upload",
    "colors": "Colors",
    "spacing": "Spacing",
    "sliders": "Sliders",
    "popovers": "Popovers",
    "chat": "Chat"
  },
  "language": {
    "brazilian_portuguese": "PortuguÃªs",
    "english": "English",
    "spanish": "Spanish",
    "simplified_chinese": "Simplified Chinese"
  },
  "rating": {
    "title": "Rating",
    "paragraph": "The rating component is a simple yet powerful element when it comes to gathering users feedback. Just in a few lines of code it can provide you with users ratings about your product or application",
    "basic": {
      "subtitle": "Usage example",
      "paragraph": "The rating component has a simple interface to collect user feedback."
    },
    "examples": {
      "subtitle": "Examples",
      "paragraph": "Here you can find some examples with simple or complex API usage",
      "colorsAndSizes": {
        "headline": "Different sizes and colors",
        "paragraph": "Use predefined sizes and colors, or use your own with help of *size* and *color* props."
      },
      "hoverAndHalves": {
        "headline": "Add some visual interaction",
        "paragraph": "Add hover and enable halves for more preciese feedback gathering."
      },
      "numbers": {
        "headline": "Numbers instead of icons",
        "paragraph": "Want to see numbers instead of icons? We got you covered."
      }
    },
    "api": {
      "subtitle": "API",
      "paragraph": "Here are props, events and slots that are used in va-rating component."
    },
    "faq": {
      "subtitle": "FAQ",
      "questions": [
        {
          "question": "Is rating component keyboard accessible?",
          "answer": "Yes, you can use Tab(Shift+Tab) to move between icons and press Enter to submit value. Or you can use arrow keys (Left and Right) to change rating value"
        },
        {
          "question": "Can I use every other prop in combination with `**numbers**` prop?",
          "answer": "Yes, all props are compatible between each other."
        }
      ]
    }
  }
}
