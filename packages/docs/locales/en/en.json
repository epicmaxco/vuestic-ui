{
  "api": {
    "all": {
      "events": {
        "validation": "On internal validation",
        "blur": "On blur",
        "focus": "On focus",
        "input": "On value change",
        "click": "On click"
      },
      "props": {
        "align": "Customizes horizontal position of component (flex based). Available values are strings: 'left', 'center', 'right', 'between', 'around', 'stretch'.",
        "id": "Applies `id` to internal input component. Useful for native forms.",
        "name": "Applies `name` to internal input component. Useful for native forms.",
        "tag": "Replaces html tag. This is useful for semantics and also to allow for valid markup in some cases (`ul > li` and `tr > td` etc.).",
        "size": "Specify size for component. 'small', 'medium', 'large' sizes are available. If you want more control, you can provide number (will be used as `px`) or string value (`rem` and `px` sizes are supported).",
        "disabled": "Applies *disabled* style and removes all user interaction effects.",
        "readonly": "Doesn't look disabled, but acts like one. Mostly useful for wrapper components.",
        "success": "Show component in success state.",
        "error": "Show component in error state.",
        "messages": "Description messages for form component.",
        "errorMessages": "Error messages for form component.",
        "errorCount": "Number of error messages displayed.",
        "stateful": "Add possibility to work with component without setting `v-model`",
        "color": "Color of the component (theme string or *HEX* string)",
        "textColor": "Text color (theme string or *HEX* string)",
        "rules": "Validation rules <!-- TODO Add link -->",
        "to": "The target route of the link. [More info here](https://router.vuejs.org/api/#to \"Vue router docs\").",
        "replace": "When set, calls `router.replace()` instead of `router.push()` when navigated, so it will not leave a history record. [More info here](https://router.vuejs.org/api/#replace \"Vue router docs\").",
        "append": "When set, always appends the relative path to the current path. [More info here](https://router.vuejs.org/api/#append \"Vue router docs\").",
        "exact": "Exactly match the link. Without this, '/' will match every route. [More info here](https://router.vuejs.org/api/#exact \"Vue router docs\").",
        "activeClass": "Applied when the link is active. [More info here](https://router.vuejs.org/api/#active-class \"Vue router docs\").",
        "exactActiveClass": "Applied when the link is active with exact match. [More info here](https://router.vuejs.org/api/#exact-active-class \"Vue router docs\").",
        "href": "Designates the component as anchor and applies the href attribute. [More info here](https://router.vuejs.org/api/#href \"Vue router docs\").",
        "target": "Navigation target, [More info here](https://developer.mozilla.org/docs/Web/HTML/Element/A).",
        "src": "Source URL.",
        "arrayValue": "Same as native `value`. It is used with `v-model` of an array type",
        "label": "Same as native `label`",
        "leftLabel": "Moves the label on the left of a component",
        "loading": "Indicates that something is loading (spinner icon)",
        "trueValue": "Overrides the returned value when it's checked",
        "falseValue": "Overrides the returned value when it's not checked",
        "square": "Removes rounded corners."
      }
    },
    "VaBadge": {
      "props": {
        "text": "Badge text",
        "overlap": "Allows badge to overlap with element.",
        "transparent": "Makes badge semi-transparent.",
        "multiLine": "Badge text will wrap to next line.",
        "visibleEmpty": "Badge will be shown even when there is no text.",
        "dot": "Shows dot instead of full badge. Useful to notify user without grabbing too much attention.",
        "bottom": "Position badge to the bottom.",
        "left": "Position badge to the left"
      }
    },
    "VaButton": {
      "props": {
        "outline": "Applies outline styling",
        "flat": "Applies `flat` styling",
        "icon": "The icon to be displayed to the left of a title",
        "iconRight": "The icon to be displayed to the right of a title",
        "type": "Will be used as value for html `type` attribute",
        "block": "Applies block styling (will take 100% of container width)",
        "round": "Adds rounded corners",
        "href": "Will be used as value for html `href` attribute. (If used, `<button />` will be replaced with `<a>` tag)",
        "target": "Will be used as value for html `target` attribute (If used, `<button />` will be replaced with `<a>` tag)"
      },
      "slots": {
        "default": "Slot for button content"
      },
      "events": {
        "click": "Emitted when user clicks on button"
      },
      "methods": {
        "focus": "Sets focus on button",
        "blur": "Removes focus from button"
      }
    },
    "VaForm": {
      "props": {
        "autofocus": "Focus on first form-component <!-- TODO Add link --> on render"
      },
      "events": {
        "validation": "Triggered on validation update"
      },
      "methods": {
        "validate": "Performs validation and updates error state for each form component. Works with nested forms.",
        "focus": "Focus on first focusable form-component in the form.",
        "focusInvalid": "Focus on first focusable invalid form-component in the form. This is useful for longer forms and allows to bring user attention to invalid field.",
        "resetValidation": "Reset validation for all validateable <!-- TODO Add link --> form-components.",
        "reset": "Reset values and validation state for all form-components"
      }
    },
    "VaSlider": {
      "props": {
        "range": "Transforms single value slider into range slider.",
        "value": "Numeric value(s) of slider.",
        "trackLabel": "Label of slider track.",
        "color": "Color of slider.",
        "trackColor": "Color of slider base track.",
        "labelColor": "Color of slider label.",
        "trackLabelVisible": "Toggles track label visibility.",
        "min": "Minimum value.",
        "max": "Maximum value.",
        "step": "Slider value step.",
        "label": "Slider label",
        "invertLabel": "Moves label to opposite side.",
        "disabled": "Disables slider.",
        "readonly": "Makes slider read only.",
        "pins": "Adds step marks to a slider track.",
        "iconPrepend": "Icon at the start of slider.",
        "iconAppend": "Icon at the end of slider.",
        "vertical": "Makes slider vertical.",
        "showTrack": "Toggles track display."
      },
      "events": {
        "dragStart": "Emitted on drag start.",
        "dragEnd": "Emitted on drag end.",
        "change": "Emitted on value input.",
        "input": "Emitted on value change."
      },
      "slots": {
        "append": "Slot for input after slider.",
        "prepend": "Slot for input before slider.",
        "label": "Replaces the default label."
      }
    },
    "VaAffix": {
      "props": {
        "offsetTop": "Distance from the top of target element to the top of affixed element.",
        "offsetBottom": "Distance from the bottom of target element to the bottom of affixed element.",
        "target": "The element relative to which the component is fixed."
      },
      "events": {
        "change": "Emits affixed state on its' change."
      }
    },
    "VaBreadcrumbs": {
      "props": {
        "activeColor": "Color of active links (theme string or HEX string).",
        "separator": "Element to separate breadcrumbs items.",
        "separatorColor": "Color of the separator icon (theme string or HEX string)."
      },
      "slots": {
        "default": "One or more `va-breadcrumbs-item` elements.",
        "separator": "Separator element. Can be string or vue component."
      }
    },
    "VaBreadcrumbsItem": {
      "props": {
        "label": "Component content (string)."
      },
      "slots": {
        "default": "Component content."
      }
    },
    "VaModal": {
      "props": {
        "value": "The current visibility state of the modal",
        "title": "Text content to place in the title",
        "message": "Content of modal body",
        "size": "Set the size of the modal's width. `small`, `medium` (default) or `large`",
        "okText": "Text string to place in the default footer **Ok** button",
        "cancelText": "Text string to place in the default footer **Cancel** button",
        "hideDefaultActions": "Use `hide-default-actions: true` to hide **Cancel** and **Ok** buttons",
        "fullscreen": "Add the `fullscreen` prop to cover the whole page",
        "mobileFullscreen": "Use `mobile-fullscreen: false` to disable fullscreen mode for mobile viewports",
        "noDismiss": "Disable both close on overlay click and close on **Esc**",
        "noOutsideDismiss": "Disable close on overlay click",
        "noEscDismiss": "Disable close on **Esc**",
        "maxWidth": "Use `max-width` to change the maximum width of the modal.",
        "maxHeight": "Use `max-height` to change the maximum height of the modal. If content is larger, scroll will appear",
        "fixedLayout": "Use `fixed-layout: true` to scroll only content in modal. Title and actions will be fixed",
        "withoutTransitions": "Use `without-transitions: true` to turn off the open and close animations on the modal",
        "overlay": "Use `overlay: false` to hide the overlay",
        "overlayOpacity": "Set the overlay's opacity",
        "zIndex": "Set the modal's `z-index`"
      },
      "events": {
        "clickOutside": "Emits when overlay is clicked",
        "input": "Emits when modal's visibility should change",
        "ok": "Emits when **Ok** button is clicked",
        "beforeOpen": "Emits before modal's open after transition started",
        "open": "Emits when modal's is open and transition is complete",
        "beforeClose": "Emits before modal's start closing after transition started",
        "close": "Emits when modal's is closed and transition is complete"
      },
      "methods": {
        "hide": "Hide modal. On stateless modal only emits `@input`",
        "open": "Show modal. On stateless modal only emits `@input`",
        "toggle": "Toggle a modal's visibility. On stateless modal only emits `@input`"
      },
      "slots": {
        "default": "Content of modal body",
        "header": "Modal header content",
        "footer": "Modal footer content"
      }
    },
    "VaRating": {
      "props": {
        "value": "The rating value",
        "icon": "The icon displayed when icon is filled",
        "halfIcon": "The icon displayed when icon is half-filled (requires **`halves`**)",
        "emptyIcon": "The icon displayed when icon is empty (requires **`halves`**)",
        "readonly": "Disables all user interaction effects (pointer, hover)",
        "numbers": "When `true`, numbers from 1 to **`max`** are rendered instead of icons",
        "halves": "Allow to select half of the item",
        "max": "The amount of items to display",
        "clearable": "Allows the components value to be set to 0. Triggered by clicking on currently selected icon",
        "hover": "Adds visual feedback when hovering on items",
        "texts": "The array of captions to be used with each value. The array length should be equal to **`max`** prop",
        "textColor": "Color of text captions",
        "unselectedColor": "Specifies the color of unselected items (by default **`color`** prop is used)"
      }
    },
    "VaPagination": {
      "props": {
        "value": "Current page (or item if `total` is issued) value",
        "visiblePages": "The amount of displayed pages. (When set to 0 all pages are displayed)",
        "pages": "The amount of pages",
        "boundaryLinks": "Show controls to move to first and last page",
        "boundaryNumbers": "Always show first and last page (will replace `boundary-links` if both used)",
        "directionLinks": "Show buttons to move forward and backward",
        "input": "Use HTML Input instead of buttons to control `va-pagination` state",
        "hideOnSinglePage": "Component won't be displayed if only 1 page is available",
        "flat": "Applies `flat` style",
        "total": "Set the amount of data pagination should iterate through. This prop should not be used with `pages` prop.",
        "pageSize": "Set the amount of data to be displayed at 1 page. Used to calculate the length of pagination. This prop should not be used with `pages` prop.",
        "boundaryIconLeft": "Set the icon name for left boundary icon",
        "boundaryIconRight": "Set the icon name for right boundary icon",
        "directionIconLeft": "Set the icon name for left direction icon",
        "directionIconRight": "Set the icon name for right direction icon",
        "size": "Specify size for component. \"small\", \"medium\", \"large\" sizes are available"
      }
    },
    "VaTabs": {
      "props": {
        "value": "The *name* of selected tab or *index* (if `name` prop is not specified)",
        "left": "Align all items to the left",
        "right": "Align all items to the right",
        "center": "Align all items to the center",
        "grow": "Take all container width",
        "hideSlider": "Remove slider which underlines selected item",
        "vertical": "Align all items vertically",
        "prevIcon": "Icon to be used for scrolling backward in pagination",
        "nextIcon": "Icon to be used for scrolling forward in pagination"
      }
    },
    "VaSwitch": {
      "props": {
        "color": "Color of switch",
        "size": "Specify size for component. \"small\", \"medium\", \"large\" sizes are available",
        "label": "Switch label",
        "leftLabel": "Moves label to the left",
        "readonly": "Makes switch read only",
        "trueLabel": "Label when checked",
        "falseLabel": "Label when unchecked",
        "trueInnerLabel": "Inner label when checked",
        "falseInnerLabel": "Inner label when unchecked",
        "value": "Switch value",
        "trueValue": "Value when checked",
        "falseValue": "Value when unchecked",
        "arrayValue": "Takes the value of a switch in an array of switches"
      },
      "slots": {
        "default": "Slot for label.",
        "innerLabel": "Slot for inner label."
      }
    },
    "VaFileUpload": {
      "props": {
        "type": "Specify the format of component. Supported types are `single`, `list` and `gallery`",
        "fileTypes": "Specify supported file formats",
        "dropzone": "Enables Drag&Drop",
        "value": "The array with uploaded files"
      }
    },
    "VaDivider": {
      "props": {
        "vertical": "Displays divider vertically",
        "dashed": "If set to true, the divider line is dashed",
        "inset": "If set to true, the left and right margins will be added; reduces height for vertical divider",
        "orientation": "Position of the title inside divider (for horizontal only). `left`, `center` (default) or `right`"
      },
      "slots": {
        "default": "Insert content (for horizontal only)"
      }
    },
    "VaCard": {
      "props": {
        "stripe": "Displays a stripe above a card title.",
        "stripeColor": "Customize stripe color (theme string or *HEX* string).",
        "gradient": "Adds color gradient to `va-card` body.",
        "bordered": "Toggles borders of a card component.",
        "outlined": "Toggles shadow of `va-card`"
      }
    },
    "VaImage": {
      "props": {
        "ratio": "Width to height ratio.",
        "contain": "Scales the image while maintaining the proportions so that the whole image fits inside the block."
      },
      "events": {
        "loaded": "Emitted when image loading is finished.",
        "error": "Emitted on loading error."
      },
      "slots": {
        "loading": "Shown when image is loading.",
        "error": "Is shown if loading gives an error.",
        "default": "Image overlay for you to add content. Doesn't show on loading or error."
      }
    },
    "VaOptionList": {
      "props": {
        "value": "The array of currently selected items in a list",
        "disabledBy": "Specify the key in the object to be used as item `disabled` prop. Can be string (path to the key) or function of type: `(option) => option.disabled`",
        "valueBy": "Specify the key in the object to be used as item `value` prop. Can be string (path to the key) or function of type: `(option) => option.value`",
        "trackBy": "Specify the key in the object to be used as item `key` prop. Can be string (path to the key) or function of type: `(option) => option.track`",
        "textBy": "Specify the key in the object to be used as item `text` prop. Can be string (path to the key) or function of type: `(option) => option.text`",
        "options": "The array of items to be displayed",
        "type": "Specify the format of component. Supported types are `\"radio\"`, `\"checkbox\"` and `\"switch\"`",
        "defaultValue": "This value will be pre-selected when component mounts",
        "leftLabel": "Put the labels to the left"
      },
      "events": {
        "input": "Emitted on value change."
      },
      "slots": {
        "default": "Used to render items. Available props are:\n`option: String | Object`\n`isDisabled: Boolean`\n`name: String`\n`color: String`\n`leftLabel: Boolean`\n`getText: (option: String | Object) => String` \n `selectedValue: Array<String | Object>`\n`index: Number`"
      }
    },
    "VaAvatar": {
      "props": {
        "icon": "The icon to be displayed inside a container",
        "src": "URL to the image (will be placed inside `src` attribute of image tag)",
        "fontSize": "The font-size of text inside avatar",
        "email": "Will display `gravatar` for provided email address"
      },
      "slots": {
        "default": "Use this slot to replace default content to be displayed inside the component"
      }
    },
    "VaCheckbox": {
      "props": {
        "value": "The value of the checkbox",
        "indeterminate": "Same as native `indeterminate` - a state in which it's impossible to say whether the item is toggled `on` or `off`",
        "checkedIcon": "Overrides the `checked` icon",
        "indeterminateIcon": "Overrides the `indeterminate` icon"
      },
      "events": {
        "input": "Emitted when the component needs to change the value"
      }
    },
    "VaInfiniteScroll": {
      "props": {
        "offset": "Number of pixels to the end of `va-infinite-scroll` container at which the component should start loading more content in advance.",
        "reverse": "Instead of bottom, top of the container would trigger loading.",
        "disabled": "Won't trigger load even when scroll reached end. Useful to prevent further loading when there is no more items in list.",
        "scrollTarget": "The element to be used as a scroll container instead of default one. Could be CSS selector or Element. When not set - direct wrapper will be used as a scroll container.",
        "debounce": "Debounce to be applied when listening to scroll event. Useful to prevent user from triggering loading multiple times.",
        "load": "Function that loads data. Should return Promise",
        "tag": "Replaces html tag. This is useful for semantics and also to allow for valid markup in some cases (`ul > li` and `tr > td` etc.)."
      },
      "slots": {
        "loading": "Shown when content is fetching.",
        "default": "The content to be scrolled"
      }
    },
    "VaAlert": {
      "props": {
        "value": "The current visibility state of the alert",
        "title": "The text content placed in the title",
        "description": "The text content of the alert",
        "icon": "Show icon in front of alert content",
        "closeIcon": "Replace the default close icon with a custom one",
        "closeText": "Use text instead of the close icon",
        "closeable": "Add a close alert area",
        "center": "Center the title and description of the alert",
        "borderColor": "Border color of the alert",
        "border": "Stripe border for alert. 'top', 'right', 'bottom', 'left' sizes are available."
      },
      "methods": {
        "hide": "Hide alert. On stateless alert only emits `@input`"
      },
      "slots": {
        "default": "Content of alert body",
        "title": "Alert title area content",
        "icon": "Alert icon area content",
        "close": "Alert close area content"
      }
    },
    "VaIcon": {
      "props": {
        "component": "Allows to use the svg component as an icon.",
        "rotation": "Rotates a component by a degree value.",
        "spin": "Starts rotation animation.",
        "iconsConfig": "Allows you to configurate iconset."
      }
    },
    "VaRadio": {
      "props": {
        "value": "Model of the component",
        "option": "Option value that model is updated to when an option is selected",
        "tabindex": "Sets a custom tabindex"
      }
    },
    "VaTag": {
      "props": {
        "closeable": "Provides the ability to close the tag",
        "outline": "Applies outline styling",
        "flat": "Applies flat styling",
        "icon": "The icon to be displayed inside a tag"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaInput": {
      "props": {
        "value": "The input value",
        "type": "Sets input type",
        "label": "Sets input label",
        "placeholder": "Sets input placeholder",
        "mask": "Sets input mask if using as string or options for mask",
        "color": "Sets input color",
        "removable": "Adds an button that clears the value",
        "tabindex": "Sets input tabindex",
        "returnRaw": "Sets possibility to return raw value",
        "autosize": "Sets textarea possibility to grow up automatically",
        "minRows": "Minimal count of lines",
        "maxRows": "Maximum count of lines",
        "rules": "Accepts an array of functions that take an input value as an argument and return either true / false or a string with an error message",
        "disabled": "Disable the input",
        "readonly": "Puts input in readonly state",
        "success": "Sets input state to success",
        "messages": "Displays a list of messages or message if using a string",
        "error": "Sets input state to error",
        "errorMessages": "Displays a list of error messages or message if using a string",
        "errorCount": "Number of error messages displayed"
      },
      "events": {
        "input": "Emitted when the component needs to change the model",
        "change": "Emitted when the input is changed by user interaction",
        "blur": "Emitted when the input is blurred",
        "focus": "Emitted when input is focused",
        "click": "Emitted when user clicked on input",
        "click:prepend": "Emitted when user clicked on `prepend` slot",
        "click:prepend-inner": "Emitted when user clicked on `prependInner` slot",
        "click:append": "Emitted when user clicked on `append` slot",
        "click:append-inner": "Emitted when user clicked on `appendInner` slot",
        "keyup": "Emitted when the user releases a key on the keyboard",
        "keydown": "Emitted when any key is pressed"
      },
      "methods": {
        "focus": "Setting focus on input",
        "reset": "Clearing input value"
      },
      "slots": {
        "prepend": "Adds an item outside the input and before input content",
        "prependInner": "Adds an item inside the input and before input content",
        "append": "Adds an item outside the input and after input content",
        "appendInner": "Adds an item inside the input and after input content"
      }
    },
    "VaSelect": {
      "props": {
        "value": "Model of the component. Must be Array if using 'multiple' prop",
        "clearValue": "Sets value that should be setted after clearing",
        "options": "Available options that the user can select from",
        "disabledBy": "Specify the key in the object to be used as item `disabled` prop. Can be string (path to the key) or function of type: `(option) => option.disabled`",
        "valueBy": "Specify the key in the object to be used as item `value` prop. Can be string (path to the key) or function of type: `(option) => option.value`",
        "trackBy": "Specify the key in the object to be used as item `key` prop. Can be string (path to the key) or function of type: `(option) => option.track`",
        "textBy": "Specify the key in the object to be used as item `text` prop. Can be string (path to the key) or function of type: `(option) => option.text`",
        "placeholder": "Sets the input’s placeholder text",
        "position": "Sets option list position",
        "tagMax": "Sets maximum tag count after whom selection will be cropped",
        "tags": "Sets selection display as tags",
        "deletableTags": "Sets ability to delete tags",
        "searchable": "Sets ability to filter option list by typing",
        "multiple": "Sets select in multiple mode",
        "width": "Sets option list width",
        "maxHeight": "Sets option list maximum height",
        "noOptionsText": "Sets text whom displaying if list have no items",
        "fixed": "Sets dropdown position strategy",
        "clearable": "Sets ability to clear selection",
        "hideSelected": "Sets ability to hide selected options",
        "allowCreate": "Allow creating new options. Can be setted to `unique` if you want to create only unique options",
        "clearIcon": "Sets the clear icon",
        "dropdownIcon": "Sets the dropdown icon. Can be object if you want to sets different open/close icons"
      },
      "events": {
        "clear": "Emitted if select value has been cleared",
        "updateSearch": "Emitted if search value has changed"
      },
      "methods": {
        "reset": "Clearing select value"
      },
      "slots": {
        "prepend": "Adds an item outside the input and before input content",
        "prependInner": "Adds an item inside the input and before input content",
        "append": "Adds an item outside the input and after input content",
        "appendInner": "Adds an item inside the input and after input content"
      }
    }
  },
  "anyPage": {
    "examples": "Examples",
    "api": "API"
  },
  "menu": {
    "affix": "Affix",
    "avatar": "Avatar",
    "breadcrumbs": "Breadcrumbs",
    "badge": "Badge",
    "card": "Card",
    "rating": "Rating",
    "modal": "Modal",
    "tabs": "Tabs",
    "uiElements": "UI Elements",
    "styles": "Styles",
    "treeView": "Tree view",
    "slider": "Slider",
    "switch": "Switch",
    "popovers": "Popovers",
    "chat": "Chat",
    "pagination": "Pagination",
    "fileUpload": "File Upload",
    "form": "Form",
    "image": "Image",
    "optionList": "Option List",
    "divider": "Divider",
    "button": "Button",
    "checkbox": "Checkbox",
    "infiniteScroll": "Infinite Scroll",
    "alert": "Alert",
    "icon": "Icon",
    "radio": "Radio",
    "tag": "Tag",
    "grid": "Grid",
    "input": "Input",
    "select": "Select"
  },
  "language": {
    "brazilian_portuguese": "Português",
    "english": "English",
    "spanish": "Spanish",
    "simplified_chinese": "Simplified Chinese"
  },
  "all": {
    "examples": "Examples",
    "api": "API",
    "faq": "FAQ"
  },
  "docsExample": {
    "showCode": "Show Code"
  },
  "avatar": {
    "title": "Avatar",
    "paragraph": "`va-avatar` component is typically used for user profile pictures. It'll help you display it in different sizes consistently throughout your web application. ",
    "examples": {
      "default": {
        "title": "Default",
        "text": "By default `va-avatar` is displayed as a circle container."
      },
      "size": {
        "title": "Different sizes",
        "text": "With `size` prop you can specify custom size for an avatar. By default, font size will be scaled depending on the value of the `size` prop. But you can use the `font-size` prop to force text size you need."
      },
      "color": {
        "title": "Different colors"
      },
      "withImage": {
        "title": "With images",
        "text": "Providing `src` prop to component allows you to add custom icons to a component."
      },
      "withIcon": {
        "title": "With icons",
        "text": "With `icon` prop you could display icons inside an avatar."
      },
      "withEmail": {
        "title": "With Gravatar",
        "text": "Provide `email` prop and [gravatar](https://en.gravatar.com/support/what-is-gravatar/) will be used to get user profile pic."
      }
    }
  },
  "affix": {
    "title": "Affix",
    "paragraph": "Affix component is created to fix any content in proper position relative to container.",
    "demo": {
      "subtitle": "Demo",
      "top": {
        "headline": "Fixed at the top."
      },
      "bottom": {
        "headline": "Fixed at them bottom."
      },
      "target": {
        "headline": "Fixes element relative to custom container."
      }
    },
    "api": {
      "subtitle": "API",
      "paragraph": "Here are props and events that are used in va-affix component."
    }
  },
  "breadcrumbs": {
    "title": "Breadcrumbs",
    "text": "Breadcrumbs component is used on a page for application navigation. It shows the location of the current page in the navigation hierarchy. Is used with `va-breadcrumb-item` components.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "This is basic usage of `va-breadcrumbs` component."
      },
      "color": {
        "title": "Color",
        "text": "Sets color of breadcrumbs content"
      },
      "align": {
        "title": "Align",
        "text": "Changes component position on the page."
      },
      "separator": {
        "title": "Separator",
        "text": "You can use your own separator and customize its color."
      },
      "activeColor": {
        "title": "Active color",
        "text": "Color of active `va-breadcrumb-item` elements."
      },
      "item": {
        "title": "Item",
        "text": "Some `va-breadcrumbs-item` props examples."
      }
    },
    "api": {
      "component": {
        "title": "API",
        "text": "Here are props and slots of `va-breadcrumbs` component."
      },
      "item": {
        "title": "Item API",
        "text": "API for `va-breadcrumb-item` component."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "Can `separator` prop work with `separator` slot?",
          "answer": "No, slot has higher priority, prop is ignored when slot is used. Same is legit for `label` of `va-breadcrumbs-item`, it is ignored when you use `default` slot."
        }
      ]
    }
  },
  "badge": {
    "title": "Badge",
    "summaryText": "VaBadge is used to highlight information related to other element, such as missed notifications on top of avatar.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Useful for information views and tables."
      },
      "withAvatar": {
        "title": "With Avatar"
      },
      "withCard": {
        "title": "With Card"
      },
      "position": {
        "title": "Position left and bottom"
      },
      "overlap": {
        "title": "Overlap"
      },
      "dot": {
        "title": "Dot"
      },
      "transparent": {
        "title": "Transparent"
      },
      "color": {
        "title": "Color"
      }
    }
  },
  "button": {
    "title": "Button",
    "summaryText": "The `va-button` component intended to be used instead of the standard HTMl button. It offers multiple built-in styles plus gives possibility to change color and size manually.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Just a simple button."
      },
      "withColor": {
        "title": "Colors",
        "text": "With `color` prop you can change the color of the component."
      },
      "withSize": {
        "title": "Sizes",
        "text": "Using `size` prop you can make your button fit in any place on your web page."
      },
      "withStyle": {
        "title": "Different styles",
        "text": "We have 3 styles available: \"outlined\", \"flat\" and \"square\"."
      },
      "withIcon": {
        "title": "Add icons",
        "text": "You can add icons to `va-button` with 2 different props: `icon` and `icon-right`"
      }
    }
  },
  "slider": {
    "title": "Slider",
    "paragraph": "Slider component is a visualization for number input. User can drag slider within a fixed range to get required value.",
    "basic": {
      "subtitle": "Basic Element",
      "paragraph": "This is basic usage of slider component."
    },
    "advanced": {
      "subtitle": "Advanced Element",
      "color": {
        "headline": "Color",
        "paragraph": "You can customize color of slider."
      },
      "minmax": {
        "headline": "Minimum and maximum values",
        "paragraph": "You can set a range between min and max values."
      },
      "state": {
        "headline": "State",
        "paragraph": "Slider can be in disabled or readonly state."
      },
      "range": {
        "headline": "Range slider",
        "paragraph": "You can set a range of values."
      },
      "step": {
        "headline": "Step",
        "paragraph": "Step can be changed."
      },
      "pins": {
        "headline": "Pins",
        "paragraph": "Display markers on slider track."
      },
      "label": {
        "headline": "Label",
        "paragraph": "Label of switch, could have inverted position or custom color."
      },
      "slots": {
        "headline": "Slots",
        "paragraph": "You can add inputs before and after the slider using 'append' or 'prepend' slot name. Also default label can be replaced using 'label' slot."
      },
      "icon": {
        "headline": "Icon",
        "paragraph": "You can insert icon at the start or end of slider."
      },
      "track": {
        "headline": "Track",
        "paragraph": "Track can be hidden or have custom color."
      },
      "trackLabel": {
        "headline": "Track label",
        "paragraph": "You can show track label and overwrite it's view."
      },
      "vertical": {
        "headline": "Vertical",
        "paragraph": "Vertical state of slider."
      }
    },
    "api": {
      "subtitle": "API",
      "paragraph": "Here are props, events and slots that are used in va-slider component."
    }
  },
  "switch": {
    "title": "Switch",
    "paragraph": "Switch component turns on or off the state of your custom option",
    "examples": {
      "subtitle": "Examples",
      "default": {
        "headline": "Default",
        "paragraph": "This is basic usage of switch component."
      },
      "color": {
        "headline": "Color",
        "paragraph": "You can customize color."
      },
      "state": {
        "headline": "State",
        "paragraph": "Switch can be in disabled or readonly state."
      },
      "label": {
        "headline": "Label",
        "paragraph": "Switch can be labeled on the left or on the right."
      },
      "customLabel": {
        "headline": "Custom Label",
        "paragraph": "You can label any state of switch."
      },
      "innerLabel": {
        "headline": "Inner Label",
        "paragraph": "You may put a label inside of a switch."
      },
      "size": {
        "headline": "Size",
        "paragraph": "Switches have 3 different sizes."
      },
      "loading": {
        "headline": "Loading",
        "paragraph": "You can mark a pending state of switch."
      },
      "error": {
        "headline": "Error",
        "paragraph": "Switch has an error style"
      }
    },
    "api": {
      "subtitle": "API",
      "paragraph": "Here are props, events and slots that are used in va-switch component."
    }
  },
  "rating": {
    "title": "Rating",
    "summaryText": "The `va-rating` component is a simple yet powerful element when it comes to gathering users feedback. Just in a few lines of code it can provide you with users ratings about your product or application.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "The `va-rating` component has a simple interface to collect user feedback."
      },
      "color": {
        "title": "Colors",
        "text": "With `color` prop you can change the color of the component."
      },
      "size": {
        "title": "Sizes",
        "text": "Using `size` prop specify custom size for an `va-rating` component."
      },
      "hover": {
        "title": "Hover",
        "text": "By using `hover` prop you can see visual changes of value before click."
      },
      "halves": {
        "title": "Halves",
        "text": "You can divide your `va-rating` component values on halves."
      },
      "texts": {
        "title": "Texts",
        "text": "A component can be covered by different custom labels for each value."
      },
      "clearable": {
        "title": "Clearable",
        "text": "Selecting current value again will clear the component."
      },
      "numbers": {
        "title": "Numbers",
        "text": "Want to see numbers instead of icons? We got you covered."
      },
      "customIcons": {
        "title": "Custom Icons",
        "text": "Providing this prop to component allows you to add custom icons."
      }
    },
    "faq": {
      "subtitle": "FAQ",
      "questions": [
        {
          "question": "Is rating component keyboard accessible?",
          "answer": "Yes, you can use Tab(Shift+Tab) to move between icons and press Enter to submit value. Or you can use arrow keys (Left and Right) to change rating value"
        },
        {
          "question": "Can I use every other prop in combination with **numbers** prop?",
          "answer": "Yes, all props are compatible between each other."
        }
      ]
    }
  },
  "modal": {
    "title": "Modal",
    "description": "Classic modal overlay which represents a dialog box or other interactive component, such as a dismissible alert, sub-window, etc.",
    "overview": {
      "subtitle": "Overview",
      "paragraphs": [
        "`<va-modal>`, by default, has an **OK** and **Cancel** buttons in the footer. You can provide custom message and title with the `message` and `title` props respectively.",
        "`<va-modal>` supports close on **Esc** (enabled by default) and close on overlay click (enabled by default). These features may be disabled by setting the props `no-esc-dismiss` and `no-outside-dismiss` respectively, or `no-dismiss` as a shorthand to disable both of them."
      ]
    },
    "stateful": {
      "subtitle": "Stateful",
      "paragraph": "By default `va-modal` is stateless. You can change it by setting the `stateful` prop"
    },
    "fullscreen": {
      "subtitle": "Full screen",
      "paragraphs": [
        "Add the `fullscreen` prop to cover the whole page.",
        "Note that `va-modal` is full screen on mobile viewports by default. You can change it by setting the `mobile-fullscreen` prop to `false`"
      ]
    },
    "modalSizing": {
      "subtitle": "Modal sizing",
      "paragraph": "Modals have three optional sizes, available via the prop `size`. These sizes kick in at certain breakpoints to avoid horizontal scrollbars on narrower viewports. Valid optional sizes are `small`, `medium` (default), and `large`."
    },
    "toggleVisibility": {
      "subtitle": "Toggle modal visibility",
      "paragraph": "There are several methods that you can employ to toggle the visibility of `<va-modal>`.",
      "sections": [
        {
          "headline": "Using `v-model` property",
          "paragraph": "`v-model` property is always automatically synced with `<va-modal>` visible state and you can show/hide using `v-model`."
        },
        {
          "headline": "Using `show()`, `hide()`, and `toggle()` component methods.",
          "paragraph": "You can access modal using `ref` attribute and then call the `show()`, `hide()` or `toggle()` methods."
        }
      ]
    },
    "disableAnimation": {
      "subtitle": "Disable open and close animation",
      "paragraph": "To disable the transition/animation when modal opens and closes, set the prop `without-transitions`."
    },
    "hidingOverlay": {
      "subtitle": "Hiding the overlay",
      "paragraphs": [
        "Hide the modal's overlay via setting the `overlay` prop to `false`.",
        "Note that clicking outside of the modal will still close the modal even though the overlay is hidden. You can disable this behaviour by setting the `no-outside-dismiss` prop on `<va-modal>`."
      ]
    },
    "scrollingLongContent": {
      "subtitle": "Scrolling long content",
      "paragraphs": [
        "When modals become too long for the user's viewport or device, they allow the scrolling of the modal body. Try the demo below to see what we mean.",
        "You can also allow scrolling only content in modal via setting the `fixed-layout` prop. Title and actions will be fixed."
      ]
    },
    "customization": {
      "subtitle": "Customization",
      "paragraphs": [
        "`<va-modal>` provides several slots (`default`, `header` and `footer`), that you can use to customize the content of various sections of the modal.",
        "You can set custom text for **Cancel** and **Ok** buttons via `ok-text` and `cancel-text` props respectively, or you can hide them via `hide-default-actions` prop.",
        "`va-modal` also supports custom `overlay-opacity` as well as `z-index`, `max-width` and `max-height` for a modal."
      ]
    },
    "nestedModals": {
      "subtitle": "Nested modals",
      "paragraph": "Modals can be nested: you can open one modal from another."
    },
    "api": {
      "subtitle": "API"
    }
  },
  "pagination": {
    "title": "Pagination",
    "paragraph": "The pagination component is used to split big data sets into chunks so that it's simpler for users to use provided information.",
    "basic": {
      "subtitle": "Usage example",
      "paragraph": "By default the component is displayed as a list of pages with length equal to `pages` prop value."
    },
    "examples": {
      "subtitle": "Examples",
      "paragraph": "Here you can find some examples with simple or complex API usage",
      "colors": {
        "headline": "Color",
        "paragraph": "Set different colors using `color` prop. You can either user theme string *HEX* color value"
      },
      "sizes": {
        "headline": "Size",
        "paragraph": "Utilize `size` prop in order to make component fit your needs. Refer to *API* section for more in-depth explanation of how to use `size` prop."
      },
      "icons": {
        "headline": "Custom icons",
        "paragraph": "Feeling the need to change icons for arrows? We have 4 props to enable full customization of `va-pagination` component."
      },
      "limitVisible": {
        "headline": "Limiting the length",
        "paragraph": "By using `visible-pages` prop you can set the amount of pages visible on screen."
      },
      "withInput": {
        "headline": "Using HTML input instead of pages",
        "paragraph": "With `input` prop you can have input with arrow buttons instead of default pagination."
      },
      "totalAndPageSize": {
        "headline": "Using `total` and `page-size`",
        "paragraph": "You can provide `total` and `page-size` props to `va-pagination` component and let it calculate the length of pagination itself. The value of the component in this case would be equal to the number of the first item at the selected page."
      }
    },
    "api": {
      "subtitle": "API",
      "paragraph": "Here are props, events and slots that are used in va-pagination component."
    },
    "faq": {
      "subtitle": "FAQ",
      "questions": [
        {
          "question": "What will happen if both `pages` and `total` props are set?",
          "answer": "The error will be thrown into the console. Component is meant to be used only in one of these modes."
        },
        {
          "question": "Can I use `total` and `input` props together?",
          "answer": "Yep. In v-model you'll get item number instead of page number."
        }
      ]
    }
  },
  "tabs": {
    "title": "Tabs",
    "paragraph": "The `va-tabs` component could be used as an on-page navigation offering rich variety of visual customizations and usage flexibility",
    "basic": {
      "subtitle": "Usage example",
      "paragraph": "By default it's displayed as a horizontal list of `va-tab` items"
    },
    "examples": {
      "subtitle": "Examples",
      "paragraph": "Here you can find some examples with simple or complex API usage",
      "pagination": {
        "headline": "With pagination arrows",
        "paragraph": "When wrapper width is less then tabs width, pagination arrows are shown"
      },
      "vertical": {
        "headline": "Vertical alignment",
        "paragraph": "By using `vertical` prop alignment of `va-tabs` can be customized"
      },
      "stateful": {
        "headline": "Without value",
        "paragraph": "Sometimes `v-model` is too much and in that case using `stateful` prop you can delegate state handling to the component itself"
      }
    },
    "api": {
      "subtitle": "API",
      "paragraph": "Here are props, events and slots that are used in `va-tabs` component."
    },
    "faq": {
      "subtitle": "FAQ",
      "questions": [
        {
          "question": "How can I map content to tabs so that only specific tab content will be displayed?",
          "answer": "We have this functionality in our nearest plans, but for now you could use `v-model` value to map the content yourself"
        }
      ]
    }
  },
  "fileUpload": {
    "title": "File Upload",
    "paragraph": "The `va-file-upload` component is an input for selecting and uploading files with much richer interface than default one",
    "basic": {
      "subtitle": "Usage example",
      "paragraph": "By default it's displayed as simple button to upload files"
    },
    "examples": {
      "subtitle": "Examples",
      "paragraph": "Here you can find some usage examples",
      "dragAndDrop": {
        "headline": "Drag & Drop",
        "paragraph": "With `dropzone` prop add drag and drop possibility to `va-file-upload` component"
      },
      "validation": {
        "headline": "Specify file types",
        "paragraph": "Add `file-types` prop with allowed extensions to add file types validation"
      },
      "gallery": {
        "headline": "As gallery",
        "paragraph": "With `type === gallery` prop you can show user picture preview of uploaded files"
      }
    },
    "api": {
      "subtitle": "API",
      "paragraph": "Here are props, events and slots that are used in `va-file-upload` component."
    }
  },
  "divider": {
    "title": "Divider",
    "summaryText": "The `va-divider` component is used to separate sections of lists or layouts.",
    "examples": {
      "default": {
        "title": "Simple divider",
        "text": "Dividers in their simplest form display a horizontal line."
      },
      "customContent": {
        "title": "Custom content",
        "text": "You can customize the content on the divider line. Also you can set position of the content by setting the `orientation` property to `left`, `center` or `right`."
      },
      "inset": {
        "title": "Inset divider",
        "text": "Add the `inset` attribute in order to set whether or not the divider is an inset divider."
      },
      "vertical": {
        "title": "Vertical divider",
        "text": "Add the `vertical` attribute in order to set whether or not the divider is vertically-oriented."
      },
      "dashed": {
        "title": "Dashed divider",
        "text": "Add the `dashed` attribute in order to set whether or not the divider line is dashed."
      },
      "withList": {
        "title": "Divider with lists",
        "text": "Dividers perfectly work with `va-list`."
      }
    }
  },
  "form": {
    "title": "Form",
    "paragraph": "Need more advanced validation than just `type=\"email\"` over your input elements? **`va-form`** has solution to offer.",
    "basic": {
      "subtitle": "Usage example",
      "paragraph": "All from elements have `rules` prop which offers flexible solutions when it comes to elements validation. By using this prop you'd be able to specify exact cases when the field is *valid* or *invalid*."
    },
    "advanced": {
      "subtitle": "Trigger validation",
      "paragraph": "You can trigger validation from parent component by using `validate()` method of `va-form` component."
    },
    "api": {
      "subtitle": "API",
      "paragraph": "Here are props, events and slots that are used in `va-form` component."
    }
  },
  "card": {
    "title": "Card",
    "text": "The `va-card` is a multipurpose representative component that can be used for anything from links to articles. It has some helper components to make markup easier.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "This is default `va-card` implementation using `va-card-title` and `va-card-content` helper components."
      },
      "tag": {
        "title": "Tag",
        "text": "Changed tag to `<b>`"
      },
      "borderAndShape": {
        "title": "Border, shadow and shape"
      },
      "disabled": {
        "title": "Disabled"
      },
      "link": {
        "title": "Card as link"
      },
      "stripe": {
        "title": "Stripe"
      },
      "colorAndGradient": {
        "title": "Color and gradient"
      }
    },
    "faq": {
      "questions": [
        {
          "question": "Can I use `va-card` without helper components?",
          "answer": "Yes, if you don't like our styling preset, you are free to use your own."
        },
        {
          "question": "Should I manually set tag if i use link attributes?",
          "answer": "No, we will do it for you. If tag is not set, but `href` is, component tag will be `<a>`, if any of router-link prop is set, it will be `<router-link>`."
        }
      ]
    }
  },
  "image": {
    "title": "Image",
    "text": "The `va-image` is used to display responsive images. It has some features to make your work with images easier.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Default usage of image component."
      },
      "contain": {
        "title": "Contain",
        "text": "Used to show full image while ignoring its original ratio and size."
      },
      "ratio": {
        "title": "Ratio",
        "text": "Change image original ratio, show part of image to fit new ratio."
      },
      "slots": {
        "title": "Slots"
      },
      "defaultSlot": {
        "title": "Default slot",
        "text": "Always shown by default."
      },
      "loaderSlot": {
        "title": "Loader slot",
        "text": "Is visible when image is loading."
      },
      "errorSlot": {
        "title": "Error slot",
        "text": "Is visible when `src` path is incorrect."
      }
    }
  },
  "optionList": {
    "title": "Option List",
    "summaryText": "The `va-option-list` component is a component to be used to group form inputs (like checkboxes and radio buttons) into a list for better control over the data.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "By default `va-option-list` will render list of checkboxes provided by `options` prop"
      },
      "withRadio": {
        "title": "Radio",
        "text": "Set `type=\"radio\"` to display list radio buttons"
      },
      "withSwitch": {
        "title": "Switch",
        "text": "Set `type=\"switch\"` to display list switches"
      },
      "withComplexData": {
        "title": "Array of objects",
        "text": "Instead of array of strings you can provide array of objects and specify which key is for each setting."
      }
    }
  },
  "checkbox": {
    "title": "Checkbox",
    "summaryText": "Checkboxes allow the user to select multiple options from a set.",
    "examples": {
      "default": {
        "title": "Standard",
        "text": "Perfectly works with `v-model` by default."
      },
      "label": {
        "title": "Label",
        "text": "You can add a label text by setting the `label` property. You can also set the `left-label` property to move your label on the left side of a checkbox."
      },
      "indeterminate": {
        "title": "Indeterminate"
      },
      "coloring": {
        "title": "Coloring"
      },
      "array": {
        "title": "Grouped (Array)",
        "text": "Just add the same `v-model` to multiple checkboxes, and set the `array-value` prop."
      },
      "error": {
        "title": "Errors",
        "text": "You can show your error messages while using `va-checkbox` with form."
      }
    }
  },
  "infiniteScroll": {
    "title": "Inifinite Scroll",
    "summaryText": "The `va-infinite-scroll` component is a wrapper component which is intended to be used to create lists with dynamically added content. It provides rich interface to customize scrolling behavior and much more.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Just wrap your content in `va-infinite-scroll` component and provide `load` callback, and you'll see it's called each time list is scrolled till the bottom."
      },
      "reverse": {
        "title": "Reverse",
        "text": "With `reverse` prop you can prepend content to your list. Might be useful in messenger windows."
      },
      "disabled": {
        "title": "Disabled",
        "text": "In case you need to prevent a list from loading more content, `disabled` prop is here for you."
      },
      "customTarget": {
        "title": "Custom scroll target container",
        "text": "Provide either DOM element or CSS Selector to be used instead of default scroll container. "
      }
    }
  },
  "input": {
    "title": "Input",
    "paragraph": "The `va-input` component intended to be used instead of the standard HTMl input or textarea.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default `va-input` have no any attributes, but can be combined with placeholder and/or label. It also can be disabled or readonly."
      },
      "hint": {
        "title": "Hint messages",
        "text": "Support single/multi line messages to give some hint for improve UX"
      },
      "validate": {
        "title": "Validation and error/success state",
        "text": "Support a simple validation using the rules prop. The prop accepts an array of callbacks. While validating rules, the current v-model value will be passed to the callback. This callback should return either true or a String, the error message. Also you can manually pass error/success prop to manage input state."
      },
      "slots": {
        "title": "Slots",
        "text": "You can use slots for pass custom elements to input (inner or outer), such as icons or buttons etc."
      },
      "textarea": {
        "title": "Textarea",
        "text": "Support a multi-line `va-input`, useful for larger amounts of text. You can make textarea auto-expandable or manually control min/max number of lines."
      },
      "mask": {
        "title": "Mask",
        "text": "Support possibility to force/help the user to input a specific format with help from mask prop. You can pass some mask presets or custom options based on [cleave.js](https://nosir.github.io/cleave.js/). By default returning a raw value."
      }
    }
  },
  "alert": {
    "title": "Alert",
    "summaryText": "Alert displays an important message to attract user attention.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "The basic usage of the `va-alert` component."
      },
      "color": {
        "title": "Color",
        "text": "Use `color` property to change the color of the component."
      },
      "border": {
        "title": "Border",
        "text": "Use the `border` property to add a strip and the `border-color` property to change the color of the strip."
      },
      "title": {
        "title": "Title",
        "text": "The `title` property allows you to write text over the description area. Use the `title` slot to costomize the title area."
      },
      "icon": {
        "title": "Icon",
        "text": "The `icon` property allows you to add an icon in front of the description area. Use the `icon` slot to costomize the icon area."
      },
      "closeable": {
        "title": "Closeable",
        "text": "The `closeable` property add a close alert area. "
      },
      "center": {
        "title": "Center",
        "text": "The `center` property allows you to center title and description areas."
      }
    }
  },
  "icon": {
    "title": "Icon",
    "summaryText": "The `va-icon` component allows you to use different iconfonts.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Basic usage of component with different iconfonts."
      },
      "color": {
        "title": "Color",
        "text": "Set different colors using `color` prop. You can either user theme string *HEX* color value."
      },
      "size": {
        "title": "Size",
        "text": "Utilize `size` prop in order to make `va-icon` fit your needs."
      },
      "rotation": {
        "title": "Rotation",
        "text": "Used to rotate the `va-icon` component."
      },
      "spin": {
        "title": "Spin",
        "text": "You can add animation of rotation of the icon using the property `spin`."
      },
      "text": {
        "title": "Text as icon",
        "text": "Using `text` prop will allow you to cover the text with an icon style."
      },
      "tag": {
        "title": "Custom tag",
        "text": "With `tag` prop you can attach the icon to another tag."
      }
    }
  },
  "radio": {
    "title": "Radio",
    "summaryText": "The `va-radio` allows the user to select one option from a set.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Default usage  of the `va-radio` component."
      },
      "color": {
        "title": "Colors",
        "text": "With `color` prop you can change the color of the component."
      },
      "customLabels": {
        "title": "Custom Labels",
        "text": "You can add a label text by setting the `label` property. To switch label side use `left-label` property."
      },
      "disabled": {
        "title": "Disabled",
        "text": "With `disabled` prop you can disable a user interaction  with `va-radio` component."
      }
    }
  },
  "tag": {
    "title": "Tag",
    "summaryText": "",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Default usage of the `va-tag` compoment."
      },
      "outline": {
        "title": "Outline",
        "text": "Outline style without background."
      },
      "flat": {
        "title": "Flat",
        "text": "Flat style without borders and background."
      },
      "square": {
        "title": "Square",
        "text": "Makes your `va-tag` square."
      },
      "color": {
        "title": "Color",
        "text": "You can use the `va-tag` component with different colors."
      },
      "size": {
        "title": "Size",
        "text": "Set different tag sizes using size presets."
      },
      "icon": {
        "title": "Icon",
        "text": "You can use icons in tag."
      },
      "closeable": {
        "title": "Closeable",
        "text": "A tag can be closened by using property `closeable`."
      },
      "link": {
        "title": "Link",
        "text": "Make your tag clickable."
      }
    }
  },
  "grid": {
    "title": "Grid System",
    "summaryText": "We give you helper classes for flex grid. For [css grid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout) - we don't. That doesn't mean you *have* to use flex grid, just that CSS grid doesn't benefit from helper classes. But it remains a powerful tool.",
    "examples": {
      "default": {
        "title": "Enabling flexbox"
      },
      "breakpoints": {
        "title": "Breakpoints",
        "text": "You can use our `breakpoints` to set the length of you container.",
        "sizes": {
          "xs": "`.xs` - Phones (<600px)",
          "sm": "`.sm` - Small devices Tablets (≥600px)",
          "md": "`.md` - Medium devices Desktops (≥960)",
          "lg": "`.lg` - Large devices Desktops (≥1280px)",
          "xl": "`.xl` - Extra large devices Desktops (≥1920px)"
        }
      },
      "offsets": {
        "title": "Offsets",
        "text": "You can use our `offset` to set the space between left and current elements of you container.",
        "sizes": {
          "xs": "`.offset--xs` - Phones (<600px)",
          "sm": "`.offset--sm` - Small devices Tablets (≥600px)",
          "md": "`.offset--md` - Medium devices Desktops (≥960)",
          "lg": "`.offset--lg` - Large devices Desktops (≥1280px)",
          "xl": "`.offset--xl` - Extra large devices Desktops (≥1920px)"
        }
      },
      "gutters": {
        "title": "Gutters",
        "text": "A `layout` controls by `gutter`.",
        "sizes": {
          "xs": "`.gutter--xs` - Extra small gutter between cells",
          "sm": "`.gutter--sm` - Small gutter between cells",
          "md": "`.gutter--md` - Default gutter between cells",
          "lg": "`.gutter--lg` - Large gutter between cells",
          "xl": "`.gutter--xl` - Extra large gutter between cells"
        }
      }
    },
    "api": {
      "align": {
        "title": "`align`:",
        "variants": [
          "`.align--start` - cross-start margin edge of the items is placed on the cross-start line",
          "`.align--end` - cross-end margin edge of the items is placed on the cross-end line",
          "`.align--center` - items are centered in the cross-axis",
          "`.align--baseline` - items are aligned such as their baselines align"
        ]
      },
      "alignSelf": {
        "title": "`align-self`:",
        "variants": [
          "`.align-self--start` - cross-start margin edge of the items is placed on the cross-start line",
          "`.align-self--end` - cross-end margin edge of the items is placed on the cross-end line",
          "`.align-self--center` - items are centered in the cross-axis",
          "`.align-self--baseline` - items are aligned such as their baselines align"
        ]
      },
      "alignContent": {
        "title": "`align-content`:",
        "variants": [
          "`.align-content--start` - lines packed to the start of the container",
          "`.align-content--end` - lines packed to the end of the container",
          "`.align-content--center` - lines packed to the center of the container",
          "`.align-content--space-between` - lines evenly distributed; the first line is at the start of the container while the last one is at the end",
          "`.align-content--space-around` - lines evenly distributed with equal space between them"
        ]
      },
      "justify": {
        "title": "`justify`:",
        "variants": [
          "`.justify--start` - items are packed toward the start line",
          "`.justify--end` - items are packed toward to end line",
          "`.justify--center` - items are centered along the line",
          "`.justify--space-around` - items are evenly distributed in the line with equal space around them",
          "`.justify--space-between` - items are evenly distributed in the line; first item is on the start line, last item on the end line"
        ]
      },
      "justifySelf": {
        "title": "`justify-self`:",
        "variants": [
          "`.justify-self--start` - The item is packed flush to each other toward the start edge of the alignment container in the appropriate axis.",
          "`.justify-self--end` - The item is packed flush to each other toward the end edge of the alignment container in the appropriate axis.",
          "`.justify-self--center` - For items that are not children of a flex container, this value is treated like start.",
          "`.justify-self--baseline`"
        ]
      }
    }
  },
  "select": {
    "title": "Select",
    "summaryText": "Select are used for collecting user provided information from a list of options. This component opens up a menu for the selection list and action",
    "examples": {
      "default": "Default select",
      "variations": {
        "title": "Variants",
        "text": "Includes single or multiple selects"
      },
      "decorators": "Decorators",
      "slots": {
        "title": "Slots",
        "text": "Includes prepend, prepend-inner, append and append-inner slots"
      },
      "state": {
        "title": "State",
        "text": "Includes error, success, disabled or loading state"
      },
      "tags": {
        "title": "Tags",
        "text": "Includes selection display as tags and maximum tags count"
      },
      "searchable": {
        "title": "Searchable",
        "text": "Supports ability to filter option list by typing"
      },
      "allowCreate": {
        "title": "Allow create",
        "text": "You can add options that initial options not contain"
      },
      "validation": {
        "title": "Validation rules",
        "text": "Select accepts an array of functions that take an input value as an argument and return either true / false or a string with an error message"
      },
      "keyboardNavigation": {
        "title": "Keyboard navigation",
        "moves": "By using `ARROW DOWN` and `ARROW UP` you can move between options",
        "selects": "By using `ENTER` and `SPACE` you can select current option",
        "hints": "If you start typing on opened option list it will create a search buffer (will be reset when a new key is not typed for 1 second) that will be used to search in the options labels"
      }
    }
  }
}
