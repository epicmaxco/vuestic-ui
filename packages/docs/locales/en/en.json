{
  "api": {
    "all": {
      "events": {
        "validation": "Trigger internal validation.",
        "input": "Emits component value"
      },
      "props": {
        "align": "Customizes horizontal position of component (flex based). Available values are strings: 'left', 'center', 'right', 'between', 'around', 'stretch'.",
        "id": "Applies `id` to internal input component. Useful for native forms.",
        "name": "Applies `name` to internal input component. Useful for native forms.",
        "tag": "Replaces html tag. This is useful for semantics and also to allow for valid markup in some cases (`ul > li` and `tr > td` etc.).",
        "size": "Specify size for component. 'small', 'medium', 'large' sizes are available. If you want more control, you can provide number (will be used as `px`) or string value (`rem` and `px` sizes are supported).",
        "disabled": "Applies *disabled* style and removes all user interaction effects.",
        "readonly": "Doesn't look disabled, but acts like one. Mostly useful for wrapper components.",
        "success": "Show component in success state.",
        "error": "Show component in error state.",
        "messages": "Description messages for form component.",
        "errorMessages": "Error messages for form component.",
        "errorCount": "Number of error messages displayed.",
        "stateful": "Add possibility to work with component without setting `v-model`",
        "color": "Color of the component (theme string or *HEX* string)",
        "textColor": "Text color (theme string or *HEX* string)",
        "rules": "Validation rules <!-- TODO Add link -->",
        "to": "The target route of the link. [More info here](https://router.vuejs.org/api/#to \"Vue router docs\").",
        "replace": "When set, calls `router.replace()` instead of `router.push()` when navigated, so it will not leave a history record. [More info here](https://router.vuejs.org/api/#replace \"Vue router docs\").",
        "append": "When set, always appends the relative path to the current path. [More info here](https://router.vuejs.org/api/#append \"Vue router docs\").",
        "exact": "Exactly match the link. Without this, '/' will match every route. [More info here](https://router.vuejs.org/api/#exact \"Vue router docs\").",
        "activeClass": "Applied when the link is active. [More info here](https://router.vuejs.org/api/#active-class \"Vue router docs\").",
        "exactActiveClass": "Applied when the link is active with exact match. [More info here](https://router.vuejs.org/api/#exact-active-class \"Vue router docs\").",
        "href": "Designates the component as anchor and applies the href attribute. [More info here](https://router.vuejs.org/api/#href \"Vue router docs\")."
      }
    },
    "VaBadge": {
      "props": {
        "text": "Badge text",
        "overlap": "Allows badge to overlap with element.",
        "transparent": "Makes badge semi-transparen.",
        "multiLine": "Badge text will wrap to next line.",
        "visibleEmpty": "Badge will be shown even when there is no text.",
        "dot": "Shows dot instead of full badge. Useful to notify user without grabbing too much attention.",
        "bottom": "Position badge to the bottom.",
        "left": "Position badge to the left"
      }
    },
    "VaForm": {
      "props": {
        "autofocus": "Focus on first form-component <!-- TODO Add link --> on render"
      },
      "events": {
        "validation": "Triggered on validation update"
      },
      "methods": {
        "validate": "Performs validation and updates error state for each form component. Works with nested forms.",
        "focus": "Focus on first focusable form-component in the form.",
        "focusInvalid": "Focus on first focusable invalid form-component in the form. This is useful for longer forms and allows to bring user attention to invalid field.",
        "resetValidation": "Reset validation for all validateable <!-- TODO Add link --> form-components.",
        "reset": "Reset values and validation state for all form-components"
      }
    },
    "VaSlider": {
      "props": {
        "range": "Transforms single value slider into range slider.",
        "value": "Numeric value(s) of slider.",
        "trackLabel": "Label of slider track.",
        "color": "Color of slider.",
        "trackColor": "Color of slider base track.",
        "labelColor": "Color of slider label.",
        "trackLabelVisible": "Toggles track label visibility.",
        "min": "Minimum value.",
        "max": "Maximum value.",
        "step": "Slider value step.",
        "label": "Slider label",
        "invertLabel": "Moves label to opposite side.",
        "disabled": "Disables slider.",
        "readonly": "Makes slider read only.",
        "pins": "Adds step marks to a slider track.",
        "iconPrepend": "Icon at the start of slider.",
        "iconAppend": "Icon at the end of slider.",
        "vertical": "Makes slider vertical.",
        "showTrack": "Toggles track display."
      },
      "events": {
        "dragStart": "Emited on drag start.",
        "dragEnd": "Emited on drag end.",
        "change": "Emited on value input.",
        "input": "Emited on value change."
      },
      "slots": {
        "append": "Slot for input after slider.",
        "prepend": "Slot for input before slider.",
        "label": "Replaces the default label."
      }
    },
    "VaAffix": {
      "props": {
        "offsetTop": "Distance from the top of target element to the top of affixed element.",
        "offsetBottom": "Distance from the bottom of target element to the bottom of affixed element.",
        "target": "The element relative to which the component is fixed."
      },
      "events": {
        "change": "Emits affixed state on its' change."
      }
    },
    "VaBreadcrumbs": {
      "props": {
        "activeColor": "Color of active links (theme string or HEX string).",
        "separator": "Element to separate breadcrumbs items.",
        "separatorColor": "Color of the separator icon (theme string or HEX string)."
      },
      "slots": {
        "default": "One or more `va-breadcrumbs-item` elements.",
        "separator": "Separator element. Can be string or vue component."
      }
    },
    "VaBreadcrumbsItem": {
      "props": {
        "label": "Component content (string)."
      },
      "slots": {
        "default": "Component content."
      }
    },
    "VaModal": {
      "props": {
        "value": "The current visibility state of the modal",
        "title": "Text content to place in the title",
        "message": "Content of modal body",
        "size": "Set the size of the modal's width. `small`, `medium` (default) or `large`",
        "okText": "Text string to place in the default footer **Ok** button",
        "cancelText": "Text string to place in the default footer **Cancel** button",
        "hideDefaultActions": "Use `hide-default-actions: true` to hide **Cancel** and **Ok** buttons",
        "fullscreen": "Add the `fullscreen` prop to cover the whole page",
        "mobileFullscreen": "Use `mobile-fullscreen: false` to disable fullscreen mode for mobile viewports",
        "noDismiss": "Disable both close on overlay click and close on **Esc**",
        "noOutsideDismiss": "Disable close on overlay click",
        "noEscDismiss": "Disable close on **Esc**",
        "maxWidth": "Use `max-width` to change the maximum width of the modal.",
        "maxHeight": "Use `max-height` to change the maximum height of the modal. If content is larger, scroll will appear",
        "fixedLayout": "Use `fixed-layout: true` to scroll only content in modal. Title and actions will be fixed",
        "withoutTransitions": "Use `without-transitions: true` to turn off the open and close animations on the modal",
        "overlay": "Use `overlay: false` to hide the overlay",
        "overlayOpacity": "Set the overlay's opacity",
        "zIndex": "Set the modal's `z-index`"
      },
      "events": {
        "clickOutside": "Emits when overlay is clicked",
        "input": "Emits when modal's visibility should change",
        "ok": "Emits when **Ok** button is clicked",
        "cancel": "Emits when **Cancel** button is clicked"
      },
      "methods": {
        "hide": "Hide modal. On stateless modal only emits `@input`",
        "open": "Show modal. On stateless modal only emits `@input`",
        "toggle": "Toggle a modal's visibility. On stateless modal only emits `@input`"
      },
      "slots": {
        "default": "Content of modal body",
        "header": "Modal header content",
        "footer": "Modal footer content"
      }
    },
    "VaRating": {
      "props": {
        "value": "The rating value",
        "icon": "The icon displayed when icon is filled",
        "halfIcon": "The icon displayed when icon is half-filled (requires **`halves`**)",
        "emptyIcon": "The icon displayed when icon is empty (requires **`halves`**)",
        "readonly": "Disables all user interaction effects (pointer, hover)",
        "numbers": "When true numbers from 1 to `max` are rendered instead of icons",
        "halves": "Allow to select half of the item",
        "max": "The amount of items to display",
        "clearable": "Allows the components value to be set to 0. Triggered by clicking on currently selected icon",
        "hover": "Adds visual feedback when hovering on items",
        "texts": "The array of captions to be used with each value. The array length should be equal to **`max`** prop",
        "textColor": "Color of text captions",
        "unselectedColor": "Specifies the color of unselected items (by default **`color`** prop is used)"
      }
    },
    "VaPagination": {
      "props": {
        "value": "Current page (or item if `total` is isued) value",
        "visiblePages": "The amount of displayed pages. (When set to 0 all pages are displayed)",
        "pages": "The amount of pages",
        "boundaryLinks": "Show controls to move to first and last page",
        "boundaryNumbers": "Always show first and last page (will replace `boundary-links` if both used)",
        "directionLinks": "Show buttons to move forward and backward",
        "input": "Use HTML Input instead of buttons to control `va-pagination` state",
        "hideOnSinglePage": "Component won't be displayed if only 1 page is available",
        "flat": "Applies `flat` style",
        "total": "Set the amount of data pagination should iterate through. This prop should not be used with `pages` prop.",
        "pageSize": "Set the amount of data to be displayed at 1 page. Used to calculate the length of pagination. This prop should not be used with `pages` prop.",
        "boundaryIconLeft": "Set the icon name for left boundary icon",
        "boundaryIconRight": "Set the icon name for right boundary icon",
        "directionIconLeft": "Set the icon name for left direction icon",
        "directionIconRight": "Set the icon name for right direction icon",
        "size": "Specify size for component. \"small\", \"medium\", \"large\" sizes are available"
      }
    },
    "VaTabs": {
      "props": {
        "value": "The *name* of selected tab or *index* (if `name` prop is not specified)",
        "left": "Align all items to the left",
        "right": "Align all items to the right",
        "center": "Align all items to the center",
        "grow": "Take all container width",
        "hideSlider": "Remove slider which underlines selected item",
        "vertical": "Align all items vertically",
        "prevIcon": "Icon to be used for scrolling backward in pagination",
        "nextIcon": "Icon to be used for scrolling forward in pagination"
      }
    },
    "VaSwitch": {
      "props": {
        "color": "Color of switch",
        "size": "Specify size for component. \"small\", \"medium\", \"large\" sizes are available",
        "label": "Switch label",
        "leftLabel": "Moves label to the left",
        "readonly": "Makes switch read only",
        "trueLabel": "Label when checked",
        "falseLabel": "Label when unchecked",
        "trueInnerLabel": "Inner label when checked",
        "falseInnerLabel": "Inner label when unchecked",
        "loading": "Pending state mark",
        "value": "Switch value",
        "trueValue": "Value when checked",
        "falseValue": "Value when unchecked",
        "arrayValue": "Takes the value of a switch in an array of switches"
      },
      "events": {
        "blur": "Emited on focus.",
        "focus": "Emited on blur.",
        "input": "Emited on value change."
      },
      "slots": {
        "default": "Slot for label.",
        "innerLabel": "Slot for inner label."
      }
    },
    "VaFileUpload": {
      "props": {
        "type": "Specify the format of component. Supported types are `single`, `list` and `gallery`",
        "fileTypes": "Specify supported file formats",
        "dropzone": "Enables Drag&Drop",
        "value": "The array with uploaded files"
      }
    }
  },
  "anyPage": {
    "examples": "Examples"
  },
  "menu": {
    "affix": "Affix",
    "breadcrumbs": "Breadcrumbs",
    "badge": "Badge",
    "rating": "Rating",
    "modal": "Modal",
    "tabs": "Tabs",
    "uiElements": "UI Elements",
    "treeView": "Tree view",
    "slider": "Slider",
    "switch": "Switch",
    "popovers": "Popovers",
    "chat": "Chat",
    "pagination": "Pagination",
    "fileUpload": "File Upload"
  },
  "language": {
    "brazilian_portuguese": "Português",
    "english": "English",
    "spanish": "Spanish",
    "simplified_chinese": "Simplified Chinese"
  },
  "all": {
    "examples": "Examples",
    "api": "API",
    "faq": "FAQ"
  },
  "docsExample": {
    "showCode": "Show Code"
  },
  "affix": {
    "title": "Affix",
    "paragraph": "Affix component is created to fix any content in proper position relative to container.",
    "demo": {
      "subtitle": "Demo",
      "top": {
        "headline": "Fixed at the top."
      },
      "bottom": {
        "headline": "Fixed at them bottom."
      },
      "target": {
        "headline": "Fixes element relative to custom container."
      }
    },
    "api": {
      "subtitle": "API",
      "paragraph": "Here are props and events that are used in va-affix component."
    }
  },
  "breadcrumbs": {
    "title": "Breadcrumbs",
    "text": "Breadcrumbs component is used on a page for application navigation. It shows the location of the current page in the navigation hierarchy. Is used with `va-breadcrumb-item` components.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "This is basic usage of `va-breadcrumbs` component."
      },
      "color": {
        "title": "Color",
        "text": "Sets color of breadcrumbs content"
      },
      "align": {
        "title": "Align",
        "text": "Changes component position on the page."
      },
      "separator": {
        "title": "Separator",
        "text": "You can use your own separator and customize its color."
      },
      "activeColor": {
        "title": "Active color",
        "text": "Color of active `va-breadcrumb-item` elements."
      },
      "item": {
        "title": "Item",
        "text": "Some `va-breadcrumbs-item` props examples."
      }
    },
    "api": {
      "component": {
        "title": "API",
        "text": "Here are props and slots of `va-breadcrumbs` component."
      },
      "item": {
        "title": "Item API",
        "text": "API for `va-breadcrumb-item` component."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "Can `separator` prop work with `separator` slot?",
          "answer": "No, slot has higher priority, prop is ignored when slot is used. Same is legit for `label` of `va-breadcrumbs-item`, it is igored when you use `default` slot."
        }
      ]
    }
  },
  "badge": {
    "title": "Badge",
    "summaryText": "VaBadge is used to highlight information related to other element, such as missed notifications on top of avatar.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Useful for information views and tables."
      },
      "withAvatar": {
        "title": "With Avatar"
      },
      "withCard": {
        "title": "With Card"
      },
      "position": {
        "title": "Position left and bottom"
      },
      "overlap": {
        "title": "Overlap"
      },
      "dot": {
        "title": "Dot"
      },
      "transparent": {
        "title": "Transparent"
      },
      "color": {
        "title": "Color"
      }
    }
  },
  "slider": {
    "title": "Slider",
    "paragraph": "Slider component is a visualization for number input. User can drag slider within a fixed range to get required value.",
    "basic": {
      "subtitle": "Basic Element",
      "paragraph": "This is basic usage of slider component."
    },
    "advanced": {
      "subtitle": "Advanced Element",
      "color": {
        "headline": "Color",
        "paragraph": "You can customize color of slider."
      },
      "minmax": {
        "headline": "Minimum and maximum values",
        "paragraph": "You can set a range between min and max values."
      },
      "state": {
        "headline": "State",
        "paragraph": "Slider can be in disabled or readonly state."
      },
      "range": {
        "headline": "Range slider",
        "paragraph": "You can set a range of values."
      },
      "step": {
        "headline": "Step",
        "paragraph": "Step can be changed."
      },
      "pins": {
        "headline": "Pins",
        "paragraph": "Display markers on slider track."
      },
      "label": {
        "headline": "Label",
        "paragraph": "Label of switch, could have inverted position or custom color."
      },
      "slots": {
        "headline": "Slots",
        "paragraph": "You can add inputs before and after the slider using 'append' or 'prepend' slot name. Also default label can be replaced using 'label' slot."
      },
      "icon": {
        "headline": "Icon",
        "paragraph": "You can inser icon at the start or end of slider."
      },
      "track": {
        "headline": "Track",
        "paragraph": "Track can be hidden or have custom color."
      },
      "trackLabel": {
        "headline": "Track label",
        "paragraph": "You can show track label and overwrite it's view."
      },
      "vertical": {
        "headline": "Vertical",
        "paragraph": "Vertical state of slider."
      }
    },
    "api": {
      "subtitle": "API",
      "paragraph": "Here are props, events and slots that are used in va-slider component."
    }
  },
  "switch": {
    "title": "Switch",
    "paragraph": "Switch component turns on or off the state of your custom option",
    "examples": {
      "subtitle": "Examples",
      "default": {
        "headline": "Default",
        "paragraph": "This is basic usage of switch component."
      },
      "color": {
        "headline": "Color",
        "paragraph": "You can customize color."
      },
      "state": {
        "headline": "State",
        "paragraph": "Switch can be in disabled or readonly state."
      },
      "label": {
        "headline": "Label",
        "paragraph": "Switch can be labeled on the left or on the right."
      },
      "customLabel": {
        "headline": "Custom Label",
        "paragraph": "You can label any state of switch."
      },
      "innerLabel": {
        "headline": "Inner Label",
        "paragraph": "You may put a label inside of a switch."
      },
      "size": {
        "headline": "Size",
        "paragraph": "Switches have 3 different sizes."
      },
      "loading": {
        "headline": "Loading",
        "paragraph": "You can mark a pending state of switch."
      },
      "error": {
        "headline": "Error",
        "paragraph": "Switch has an error style"
      }
    },
    "api": {
      "subtitle": "API",
      "paragraph": "Here are props, events and slots that are used in va-switch component."
    }
  },
  "rating": {
    "title": "Rating",
    "paragraph": "The rating component is a simple yet powerful element when it comes to gathering users feedback. Just in a few lines of code it can provide you with users ratings about your product or application",
    "basic": {
      "subtitle": "Usage example",
      "paragraph": "The rating component has a simple interface to collect user feedback."
    },
    "examples": {
      "subtitle": "Examples",
      "paragraph": "Here you can find some examples with simple or complex API usage",
      "colorsAndSizes": {
        "headline": "Different sizes and colors",
        "paragraph": "Use predefined sizes and colors, or use your own with help of *size* and *color* props."
      },
      "hoverAndHalves": {
        "headline": "Add some visual interaction",
        "paragraph": "Add hover and enable halves for more preciese feedback gathering."
      },
      "numbers": {
        "headline": "Numbers instead of icons",
        "paragraph": "Want to see numbers instead of icons? We got you covered."
      }
    },
    "api": {
      "subtitle": "API",
      "paragraph": "Here are props, events and slots that are used in va-rating component."
    },
    "faq": {
      "subtitle": "FAQ",
      "questions": [
        {
          "question": "Is rating component keyboard accessible?",
          "answer": "Yes, you can use Tab(Shift+Tab) to move between icons and press Enter to submit value. Or you can use arrow keys (Left and Right) to change rating value"
        },
        {
          "question": "Can I use every other prop in combination with **numbers** prop?",
          "answer": "Yes, all props are compatible between each other."
        }
      ]
    }
  },
  "modal": {
    "title": "Modal",
    "description": "Classic modal overlay which represents a dialog box or other interactive component, such as a dismissible alert, subwindow, etc.",
    "overview": {
      "subtitle": "Overview",
      "paragraphs": [
        "`<va-modal>`, by default, has an **OK** and **Cancel** buttons in the footer. You can provide custom message and title with the `message` and `title` props respectively.",
        "`<va-modal>` supports close on **Esc** (enabled by default) and close on overlay click (enabled by default). These features may be disabled by setting the props `no-esc-dismiss` and `no-outside-dismiss` respectively, or `no-dismiss` as a shorthand to disable both of them."
      ]
    },
    "stateful": {
      "subtitle": "Stateful",
      "paragraph": "By default `va-modal` is stateless. You can change it by setting the `stateful` prop"
    },
    "fullscreen": {
      "subtitle": "Full screen",
      "paragraphs": [
        "Add the `fullscreen` prop to cover the whole page.",
        "Note that `va-modal` is full screen on mobile viewports by default. You can change it by setting the `mobile-fullscreen` prop to `false`"
      ]
    },
    "modalSizing": {
      "subtitle": "Modal sizing",
      "paragraph": "Modals have three optional sizes, available via the prop `size`. These sizes kick in at certain breakpoints to avoid horizontal scrollbars on narrower viewports. Valid optional sizes are `small`, `medium` (default), and `large`."
    },
    "toggleVisibility": {
      "subtitle": "Toggle modal visibility",
      "paragraph": "There are several methods that you can employ to toggle the visibility of `<va-modal>`.",
      "sections": [
        {
          "headline": "Using `v-model` property",
          "paragraph": "`v-model` property is always automatically synced with `<va-modal>` visible state and you can show/hide using `v-model`."
        },
        {
          "headline": "Using `show()`, `hide()`, and `toggle()` component methods.",
          "paragraph": "You can access modal using `ref` attribute and then call the `show()`, `hide()` or `toggle()` methods."
        }
      ]
    },
    "disableAnimation": {
      "subtitle": "Disable open and close animation",
      "paragraph": "To disable the transition/animation when modal opens and closes, set the prop `without-transitions`."
    },
    "hidingOverlay": {
      "subtitle": "Hiding the overlay",
      "paragraphs": [
        "Hide the modal's overlay via setting the `overlay` prop to `false`.",
        "Note that clicking outside of the modal will still close the modal even though the overlay is hidden. You can disable this behaviour by setting the `no-outside-dismiss` prop on `<va-modal>`."
      ]
    },
    "scrollingLongContent": {
      "subtitle": "Scrolling long content",
      "paragraphs": [
        "When modals become too long for the user's viewport or device, they allow the scrolling of the modal body. Try the demo below to see what we mean.",
        "You can also allow scrolling only content in modal via setting the `fixed-layout` prop. Title and actions will be fixed."
      ]
    },
    "customization": {
      "subtitle": "Customization",
      "paragraphs": [
        "`<va-modal>` provides several slots (`default`, `header` and `footer`), that you can use to customize the content of various sections of the modal.",
        "You can set custom text for **Cancel** and **Ok** buttons via `ok-text` and `cancel-text` props respectively, or you can hide them via `hide-default-actions` prop.",
        "`va-modal` also supports custom `overlay-opacity` as well as `z-index`, `max-width` and `max-height` for a modal."
      ]
    },
    "nestedModals": {
      "subtitle": "Nested modals",
      "paragraph": "Modals can be nested: you can open one modal from another."
    },
    "api": {
      "subtitle": "API"
    }
  },
  "pagination": {
    "title": "Pagination",
    "paragraph": "The pagination component is used to split big data sets into chunks so that it's simpler for users to use provided information.",
    "basic": {
      "subtitle": "Usage example",
      "paragraph": "By default the component is displayed as a list of pages with length equal to `pages` prop value."
    },
    "examples": {
      "subtitle": "Examples",
      "paragraph": "Here you can find some examples with simple or complex API usage",
      "colors": {
        "headline": "Color",
        "paragraph": "Set different colors using `color` prop. You can either user theme string *HEX* color value"
      },
      "sizes": {
        "headline": "Size",
        "paragraph": "Utilize `size` prop in order to make component fit your needs. Refer to *API* section for more in-depth explanation of how to use `size` prop."
      },
      "icons": {
        "headline": "Custom icons",
        "paragraph": "Feeling the need to change icons for arrows? We have 4 props to enable full customization of `va-pagination` component."
      },
      "limitVisible": {
        "headline": "Limiting the length",
        "paragraph": "By using `visible-pages` prop you can set the amount of pages visible on screen."
      },
      "withInput": {
        "headline": "Using HTML input instead of pages",
        "paragraph": "With `input` prop you can have input with arrow buttons instead of default pagination."
      },
      "totalAndPageSize": {
        "headline": "Using `total` and `page-size`",
        "paragraph": "You can provide `total` and `page-size` props to `va-pagination` component and let it calculate the length of pagination istelf. The value of the component in this case would be equal to the number of the first item at the selected page."
      }
    },
    "api": {
      "subtitle": "API",
      "paragraph": "Here are props, events and slots that are used in va-pagination component."
    },
    "faq": {
      "subtitle": "FAQ",
      "questions": [
        {
          "question": "What will happen if both `pages` and `total` props are set?",
          "answer": "The error will be thrown into the console. Component is meant to be used only in one of these modes."
        },
        {
          "question": "Can I use `total` and `input` props together?",
          "answer": "Yep. In v-model you'll get item number instead of page number."
        }
      ]
    }
  },
  "tabs": {
    "title": "Tabs",
    "paragraph": "The `va-tabs` component could be used as an on-page navigation offering rich variaty of visual customizations and usage flexibility",
    "basic": {
      "subtitle": "Usage example",
      "paragraph": "By default it's displayed as a horizontal list of `va-tab` items"
    },
    "examples": {
      "subtitle": "Examples",
      "paragraph": "Here you can find some examples with simple or complex API usage",
      "pagination": {
        "headline": "With pagination arrows",
        "paragraph": "When wrapper width is less then tabs width, pagination arrows are shown"
      },
      "vertical": {
        "headline": "Vettical alignment",
        "paragraph": "By using `vertical` prop alignment of `va-tabs` can be customized"
      },
      "stateful": {
        "headline": "Without value",
        "paragraph": "Sometimes `v-model` is too much and in that case using `stateful` prop you can delegate state handling to the component itself"
      }
    },
    "api": {
      "subtitle": "API",
      "paragraph": "Here are props, events and slots that are used in `va-tabs` component."
    },
    "faq": {
      "subtitle": "FAQ",
      "questions": [
        {
          "question": "How can I map content to tabs so that only specific tab content will be displayed?",
          "answer": "We have this functionality in our nearest plans, but for now you could use `v-model` value to map the content yourself"
        }
      ]
    }
  },
  "fileUpload": {
    "title": "File Upload",
    "paragraph": "The `va-file-upload` component is an input for selecting and uploading files with much richer interface than default one",
    "basic": {
      "subtitle": "Usage example",
      "paragraph": "By default it's displayed as simple button to upload files"
    },
    "examples": {
      "subtitle": "Examples",
      "paragraph": "Here you can find some usage examples",
      "dragAndDrop": {
        "headline": "Drag & Drop",
        "paragraph": "With `dropzone` prop add drag and drop possibility to `va-file-upload` component"
      },
      "validation": {
        "headline": "Specify file types",
        "paragraph": "Add `file-types` prop with alowed extensions to add file types validation"
      },
      "gallery": {
        "headline": "As gallery",
        "paragraph": "With `type === gallery` prop you can show user picture preview of uploaded files"
      }
    },
    "api": {
      "subtitle": "API",
      "paragraph": "Here are props, events and slots that are used in `va-file-upload` component."
    }
  }
}
