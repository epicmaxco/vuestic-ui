{
  "api": {
    "all": {
      "events": {
        "validation": "Trigger internal validation."
      },
      "props": {
        "tag": "Replaces html with provided value. This is useful for semantics and also to allow for valid markup in some cases (`ul > li` and `tr > td` etc.)."
      }
    },
    "VaForm": {
      "props": {
        "autofocus": "Focus on first form-component <!-- TODO Add link --> on render"
      },
      "events": {
        "validation": "Triggered on validation update"
      },
      "methods": {
        "validate": "Performs validation and updates error state for each form component. Works with nested forms.",
        "focus": "Focus on first focusable form-component in the form.",
        "focusInvalid": "Focus on first focusable invalid form-component in the form. This is useful for longer forms and allows to bring user attention to invalid field.",
        "resetValidation": "Reset validation for all validateable <!-- TODO Add link --> form-components.",
        "reset": "Reset values and validation state for all form-components"
      }
    }
  },
  "menu": {
    "auth": "Auth",
    "rating": "Rating",
    "buttons": "Buttons",
    "charts": "Charts",
    "colorPickers": "Color Pickers",
    "collapses": "Collapses",
    "timelines": "Timelines",
    "dashboard": "Dashboard",
    "formElements": "Form Elements",
    "forms": "Forms",
    "mediumEditor": "Medium Editor",
    "grid": "Grid",
    "icons": "Icons",
    "cards": "Cards",
    "spinners": "Spinners",
    "login": "Login",
    "maps": "Maps",
    "pages": "Pages",
    "modals": "Modals",
    "notifications": "Notifications",
    "progressBars": "Progress Bars",
    "signUp": "Sign up",
    "statistics": "Statistics",
    "lists": "Lists",
    "tables": "Tables",
    "markupTables": "Markup Tables",
    "dataTables": "Data Tables",
    "chips": "Chips",
    "tabs": "Tabs",
    "typography": "Typography",
    "uiElements": "UI Elements",
    "treeView": "Tree view",
    "dateTimePickers": "Date time pickers",
    "fileUpload": "File Upload",
    "colors": "Colors",
    "spacing": "Spacing",
    "sliders": "Sliders",
    "popovers": "Popovers",
    "chat": "Chat"
  },
  "language": {
    "brazilian_portuguese": "PortuguÃªs",
    "english": "English",
    "spanish": "Spanish",
    "simplified_chinese": "Simplified Chinese"
  },
  "rating": {
    "title": "Rating",
    "paragraph": "Rating component can show rating bla bla bla bla lorem ipsum many text Rating component can show rating bla bla bla bla lorem ipsum many textRating component can show rating bla bla bla bla lorem ipsum many textRating component can show rating bla bla bla bla lorem ipsum many textRating component can show rating bla bla bla bla lorem ipsum many textRating component can show rating bla bla bla bla lorem ipsum many textRating component can show rating bla bla bla bla lorem ipsum many text",
    "basic": {
      "subtitle": "Basic element",
      "paragraph": "This is basic rating component implementation"
    },
    "advanced": {
      "subtitle": "Advanced Element",
      "headline": "Color prop demo",
      "paragraph": "Here you can see different colors of component depends on color prop and more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text for more text"
    },
    "api": {
      "subtitle": "API",
      "paragraph": "Here are props that are used in va-rating component more loren ipsum color text more loren ipsum color text more loren ipsum color text more loren ipsum color text more loren ipsum color text more loren ipsum color text more loren ipsum color text more loren ipsum color text more loren ipsum color text more loren ipsum color text more loren ipsum color text more loren ipsum color text more loren ipsum color text more loren ipsum color text more loren ipsum color text more loren ipsum color text more loren ipsum color text more loren ipsum color text"
    },
    "faq": {
      "subtitle": "FAQ",
      "questions": [
        {
          "question": "Frequently asked question one",
          "answer": "Answer one and more text and more text and more text and more text and more text and more text and more text and more text and more text and more text and more text and more text and more text"
        }
      ]
    }
  },
  "modal": {
    "title": "Modal",
    "description": "Classic modal overlay which represents a dialog box or other interactive component, such as a dismissible alert, subwindow, etc.",
    "overview": {
      "subtitle": "Overview",
      "paragraphs": [
        "`<va-modal>`, by default, has an **OK** and **Cancel** buttons in the footer. You can provide custom message and title with the `message` and `title` props respectively.",
        "`<va-modal>` supports close on ESC (enabled by default) and close on overlay click (enabled by default). These features may be disabled by setting the props `no-esc-dismiss` and `no-outside-dismiss` respectively, or `no-dismiss` as a shorthand to disable both of them."
      ]
    },
    "stateful": {
      "subtitle": "Stateful",
      "paragraph": "By default `va-modal` is stateless. You can change it by setting the `stateful` prop"
    },
    "fullscreen": {
      "subtitle": "Full screen",
      "paragraphs": [
        "Add the `fullscreen` prop to cover the whole page.",
        "Note that `va-modal` is full screen on mobile viewports by default. You can change it by setting the `mobile-fullscreen` prop to `false`"
      ]
    },
    "modalSizing": {
      "subtitle": "Modal sizing",
      "paragraph": "Modals have three optional sizes, available via the prop `size`. These sizes kick in at certain breakpoints to avoid horizontal scrollbars on narrower viewports. Valid optional sizes are `small`, `medium` (default), and `large`."
    },
    "toggleVisibility": {
      "subtitle": "Toggle modal visibility",
      "paragraph": "There are several methods that you can employ to toggle the visibility of `<va-modal>`.",
      "sections": [
        { "headline": "Using `v-model` property", "paragraph": "`v-model` property is always automatically synced with `<va-modal>` visible state and you can show/hide using `v-model`."},
        { "headline": "Using `show()`, `hide()`, and `toggle()` component methods.", "paragraph": "You can access modal using `ref` attribute and then call the `show()`, `hide()` or `toggle()` methods."}
      ]
    },
    "disableAnimation": {
      "subtitle": "Disable open and close animation",
      "paragraph": "To disable the transition/animation when modal opens and closes, set the prop `without-transitions`."
    },
    "hidingOverlay": {
      "subtitle": "Hiding the overlay",
      "paragraphs": [
        "Hide the modal's overlay via setting the `overlay` prop to `false`.",
        "Note that clicking outside of the modal will still close the modal even though the overlay is hidden. You can disable this behaviour by setting the `no-outside-dismiss` prop on `<va-modal>`."
      ]
    },
    "scrollingLongContent": {
      "subtitle": "Scrolling long content",
      "paragraphs": [
        "When modals become too long for the user's viewport or device, they allow the scrolling of the modal body. Try the demo below to see what we mean.",
        "You can also allow scrolling only content in modal via setting the `fixed-layout` prop. Title and actions will be fixed."
      ]
    },
    "customization": {
      "subtitle": "Customization",
      "paragraphs": [
        "`<va-modal>` provides several slots (`default`, `header` and `footer`), that you can use to customize the content of various sections of the modal.",
        "You can set custom text for **Cancel** and **Ok** buttons via `okText` and `cancelText` props respectively, or you can hide them via `hideDefaultActions` prop.",
        "`va-modal` also supports custom `overlay-opacity` as well as `z-index`, `max-width` and `max-height` for a modal."
      ]
    },
    "nestedModals": {
      "subtitle": "Nested modals",
      "paragraph": "Modals can be nested: you can open one modal from another."
    }
  }
}
