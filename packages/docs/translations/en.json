{
  "landing": {
    "socials": {
      "github": "go to the vuestic ui github page",
      "discord": "go to the vuestic ui discord channel",
      "facebook": "go to the vuestic ui facebook page",
      "twitter": "go to the vuestic ui twitter page"
    },
    "header": {
      "buttons": {
        "overview": "Overview",
        "docs": "Docs",
        "contribute": "Contribute",
        "contactUs": "Contact Us",
        "github": "GitHub",
        "discord": "Discord",
        "translation": "Add translation...",
        "language": "Language",
        "team": "Team",
        "blog": "Blog"
      },
      "banner": {
        "partner": "Official Partner of",
        "and": "and",
        "hire": "\uD83D\uDD25\uD83D\uDD25\uD83D\uDD25 Hire us",
        "close": "close banner"
      }
    },
    "preview": {
      "title": "Vue 3 UI Framework",
      "buttons": {
        "start": "Get Started",
        "github": "View on GitHub",
        "askForStars": "Star on Github will help people to discover Vuestic"
      },
      "image": "Component examples"
    },
    "partners": {
      "title": "Our beloved Partners & Sponsors that support us ❤️"
    },
    "features": {
      "title": "Features",
      "description": [
        "Vuestic UI is an OpenSource Vue 3 based UI framework. It is a MIT-licensed UI framework that provides ready-to-use frontend components that are easily configurable and speed up development of responsive and fast-loading web interfaces. It was initially released in May 2021 by",
        "and that is what Vuestic UI today."
      ],
      "items": [
        "Vue 3 compatible: Seamless Vue.js integration\u00A0\uD83E\uDD18",
        "Accessible: designed for all users\u00A0❗",
        "Responsive: Adapts to various screens and devices",
        "Global config: Customize components effortlessly",
        "Dark Theme: Stylish built-in dark mode\u00A0\uD83D\uDDA4",
        "i18n integration: Simplifies app localization",
        "Customizable: Adapt components to your design\u00A0\uD83D\uDC85",
        "Professional support: Fast and reliable assistance from",
        "the core team"
      ]
    },
    "seamless": {
      "title": "Seamless Integration",
      "text": "Use Vuestic UI with other component libraries without any conflicts.",
      "compare": {
        "vuestic": "Vuestic UI components",
        "other": "Other components"
      }
    },
    "customize": {
      "title": "Customize Everything",
      "text": "Make Vuestic UI components match your designs with powerful dynamic configs.",
      "image": "Vuestic UI components"
    },
    "opensource": {
      "title": "Open Source",
      "text": [
        "Vuestic UI is forever free and open to contributions. See our",
        "issues",
        "contributing guide",
        "and",
        "discord server",
        "to help us improve Vuestic UI experience."
      ]
    },
    "admin": {
      "title": "Vuestic Admin",
      "text": "Check out Vuestic UI Framework in action.",
      "buttons": {
        "github": "View on GitHub",
        "demo": "Live Demo"
      },
      "features": {
        "opensource": "Open source MIT license",
        "themes": "Two built-in color schemes",
        "responsive": "Cross-browser & responsive",
        "i18n": "i18n-ready"
      }
    },
    "footer": {
      "text": "Vuestic UI. Open source, free to use. Development inquiries: ",
      "buttons": {
        "epicmax": "About Epicmax",
        "admin": "Vuestic Admin",
        "spinners": "Epic Spinners"
      },
      "sitemap": {
        "resources": [
          "Resources",
          "Getting Started",
          "Roadmap",
          "Accessibility"
        ],
        "support": [
          "Support",
          "Give us a star\u00A0\u2B50",
          "Report an issue",
          "Contribute"
        ],
        "community": [
          "Community",
          "GitHub",
          "Discord",
          "Twitter"
        ],
        "about": [
          "About",
          "Meet the Team",
          "Contact us",
          "Become a Partner"
        ]
      },
      "contactUs": "Contact us",
      "epicmaxLink": "Visit Epicmax web-site",
      "newsBannerText": " \uD83D\uDD25\uD83D\uDD25\uD83D\uDD25 Hi there, we're celebrating our launch on Product Hunt this week! \uD83D\uDE80 We'd love to get your feedback and support! \uD83D\uDE4F",
      "newsBannerLink": "Visit the launch page",
      "bannerText": ["expert", "s", "available in", "to build and launch your product"]
    }
  },
  "api": {
    "all": {
      "events": {
        "validation": "On internal validation.",
        "blur": "On blur.",
        "focus": "On focus.",
        "input": "On value change.",
        "click": "On click.",
        "clickPrepend": "The event is triggered by clicking on the `prepend` slot",
        "clickPrependInner": "The event is triggered by clicking on the `prependInner` slot",
        "clickAppend": "The event is triggered by clicking on the `append` slot",
        "clickAppendInner": "The event is triggered by clicking on the `appendInner` slot",
        "updateModelValue": "The event is triggered when the component needs to change the model. Is also used by `v-model`",
        "updateFocused": "The event is triggered when the component needs to toggle the focus"
      },
      "props": {
        "align": "Customizes horizontal position of component (flex based). Available values are strings: 'left', 'center', 'right', 'between', 'around', 'stretch'.",
        "id": "Applies `id` to internal input component. Useful for native forms.",
        "name": "Applies `name` to internal input component. Useful for native forms.",
        "tag": "Replaces html tag. This is useful for semantics and also to allow for valid markup in some cases (`ul > li` and `tr > td` etc.).",
        "size": "Specify size for component. `\"small\"`, `\"medium\"`, `\"large\"` sizes are available. If you want more control, you can provide number (will be used as `px`) or string value (`rem` and `px` sizes are supported).",
        "disabled": "Applies `disabled` style and removes all user interaction effects.",
        "readonly": "Doesn't look disabled, but acts like one. Mostly useful for wrapper components.",
        "success": "Show component in success state.",
        "error": "Show component in error state.",
        "messages": "Description messages for the component.",
        "errorMessages": "Error messages for the component.",
        "errorCount": "Number of error messages displayed.",
        "stateful": "Add possibility to work with component without setting `v-model`.",
        "color": "Color of the component (theme string or `HEX` string).",
        "textColor": "Text color (theme string or HEX string).",
        "rules": "Validation rules <!-- TODO Add link -->.",
        "to": "The target route of the link. [More info here](https://router.vuejs.org/api/#to \"Vue router docs\")[[target=_blank]].",
        "replace": "When set, calls `router.replace()` instead of `router.push()` when navigated, so it will not leave a history record. [More info here](https://router.vuejs.org/api/#replace \"Vue router docs\")[[target=_blank]].",
        "append": "When set, always appends the relative path to the current path. [More info here](https://router.vuejs.org/api/#append \"Vue router docs\")[[target=_blank]].",
        "exact": "Exactly match the link. Without this, '/' will match every route. [More info here](https://router.vuejs.org/api/#exact \"Vue router docs\")[[target=_blank]].",
        "activeClass": "Applied when the link is active. [More info here](https://router.vuejs.org/api/#active-class \"Vue router docs\")[[target=_blank]].",
        "exactActiveClass": "Applied when the link is active with exact match. [More info here](https://router.vuejs.org/api/#exact-active-class \"Vue router docs\")[[target=_blank]].",
        "href": "Designates the component as anchor and applies the href attribute. [More info here](https://router.vuejs.org/api/#href \"Vue router docs\")[[target=_blank]].",
        "target": "Navigation target, [More info here](https://developer.mozilla.org/docs/Web/HTML/Element/A)[[target=_blank]].",
        "src": "Source URL.",
        "arrayValue": "Same as native `value`. It is used with `v-model` of an array type.",
        "label": "Same as native `label`.",
        "leftLabel": "Moves the label on the left of a component.",
        "loading": "Indicates that something is loading (spinner icon).",
        "trueValue": "Overrides the returned value when it's checked.",
        "falseValue": "Overrides the returned value when it's not checked.",
        "square": "Removes rounded corners.",
        "indicator": "Sets the indicator style.",
        "icon": "Sets an icon.",
        "rounded": "Adds rounded corners.",
        "flat": "Removes borders and background.",
        "outline": "Removes background.",
        "gradient": "Adds a background gradient.",
        "modelValue": "The value of the `v-model` bindings.",
        "activeButtonTextColor": "The color of the text of the active button (options supported by the theme or `HEX`).",
        "indeterminate": "Same as native `indeterminate` - a state in which it's impossible to say whether the item is toggled `on` or `off`",
        "indeterminateValue": "Overrides a state value that is not set.",
        "borderColor": "Color CSS style `border` (theme supported options or `HEX`).",
        "clearableIcon": "Sets the cleaning button icon.",
        "tabindex": "Sets the custom `tabindex`.",
        "preset": "Named preset combination of component props.",
        "hideOnScroll": "Hides component when scrolling.",
        "bottom": "Sets the component position to the bottom (`fixed` state).",
        "backgroundOpacity": "Sets up button background opacity.",
        "hoverBehavior": "Behavior of the button, when it's being hovered. Can be `mask` (superimposes color mask on the background or text color for plain state) or `opacity` (adds opacity to the background or text color for plain state).",
        "hoverMaskColor": "Mask color for `mask` behavior.",
        "hoverOpacity": "Opacity value for `opacity` behavior and mask opacity for `mask` behavior.",
        "pressedBehavior": "Behavior of the button, when it's being pressed. Can be `mask` (superimposes color mask on the background or text color for plain state) or `opacity` (adds opacity to the background or text color for plain state).",
        "pressedMaskColor": "Mask color for `mask` behavior.",
        "pressedOpacity": "Opacity value for `opacity` behavior and mask opacity for `mask` behavior.",
        "textOpacity": "Sets button text opacity.",
        "iconColor": "Sets an icon color.",
        "type": "Will be used as value for html `type` attribute.",
        "plain": "Applies `plain` styling.",
        "round": "Adds rounded corners (or make a button fully rounded if only icon is passed).",
        "iconRight": "The icon to be displayed to the right of a title.",
        "keyboardNavigation": "Enables keyboard navigation for the component.",
        "fallbackSrc": "Shows an alternative image if original image failed to load or src doesn't specified.",
        "fallbackText": "Shows an alternative text if image failed to load or src doesn't specified.",
        "fallbackIcon": "Shows an icon if image failed to load or src doesn't specified.",
        "fallbackRender": "Allows to use render function to render custom contents if image failed to load or src doesn't specified",
        "delay": "Sets throttling delay (ms) for the components any data change (useful for huge data).",
        "ratio": "Aspect ratio of the component's wrapper."
      }
    },
    "VaBadge": {
      "props": {
        "text": "Badge text.",
        "overlap": "Allows badge to overlap with element.",
        "transparent": "Makes badge semi-transparent.",
        "multiLine": "Badge text will wrap to next line.",
        "visibleEmpty": "Badge will be shown even when there is no text.",
        "dot": "Shows dot instead of full badge. Useful to notify user without grabbing too much attention.",
        "placement": "Badge will be placed on `placement` side of the base element.",
        "offset": "Moves badge relatively to main axis."
      }
    },
    "VaButton": {
      "props": {
        "icon": "The icon to be displayed to the left of the title.",
        "gradient": "Makes the button background color a gradient (only if `backgroundColor` prop is equal to `1`).",
        "href": "Will be used as value for html `href` attribute (if used, `<button />` will be replaced with `<a>` tag).",
        "target": "Will be used as value for html `target` attribute.",
        "block": "Applies block styling (will take 100% of container width)."
      },
      "slots": {
        "default": "Default slot for button's content.",
        "append": "Slot to input before button's content. Slot scope properties available: `{ '{ icon, iconAttributes }' }`.",
        "prepend": "Slot to input after button's content. Slot scope properties available: `{ '{ icon, iconAttributes }' }`.",
        "loading": "Slot for loading state. Slot scope properties available: `{ '{ icon, iconAttributes }' }`."
      },
      "events": {
        "click": "Emitted when user clicks on button"
      },
      "methods": {
        "focus": "Sets focus on button",
        "blur": "Removes focus from button"
      }
    },
    "VaForm": {
      "props": {
        "autofocus": "Focus on first form-component on render",
        "hideErrorMessages": "Hide error messages for all form-components. Can be used if you want to display messages separately",
        "hideErrors": "Do not highlight invalid form-components",
        "hideLoading": "Do not show loading state for all form-components",
        "immediate": "Validate form-components on mount. By default validation is performed on first user interaction with form-components",
        "modelValue": "Used to indicate if form is valid or not. Can be used to disable submit button for example",
        "stateful": "Makes all form-components stateful. By default form-components are stateless and you need to pass `v-model` to them to make them stateful"
      },
      "events": {
        "validation": "Triggered on validation update"
      },
      "methods": {
        "validate": "Performs validation and updates error state for each form component. Works with nested forms.",
        "focus": "Focus on first focusable form-component in the form.",
        "focusInvalid": "Focus on first focusable invalid form-component in the form. This is useful for longer forms and allows to bring user attention to invalid field.",
        "resetValidation": "Reset validation for all validateable <!-- TODO Add link --> form-components.",
        "reset": "Reset values and validation state for all form-components"
      }
    },
    "VaSlider": {
      "props": {
        "range": "Transforms single value slider into range slider.",
        "value": "Numeric value(s) of slider.",
        "trackLabel": "Label of slider track.",
        "color": "Color of slider.",
        "trackColor": "Color of slider base track.",
        "labelColor": "Color of slider label.",
        "trackLabelVisible": "Toggles track label visibility.",
        "min": "Minimum value.",
        "max": "Maximum value.",
        "step": "Slider value step.",
        "label": "Slider label",
        "invertLabel": "Moves label to opposite side.",
        "disabled": "Disables slider.",
        "readonly": "Makes slider read only.",
        "pins": "Adds step marks to a slider track.",
        "iconPrepend": "Icon at the start of slider.",
        "iconAppend": "Icon at the end of slider.",
        "vertical": "Makes slider vertical.",
        "showTrack": "Toggles track display."
      },
      "events": {
        "dragStart": "Emitted on drag start.",
        "dragEnd": "Emitted on drag end.",
        "change": "Emitted on value input.",
        "input": "Emitted on value change."
      },
      "slots": {
        "append": "Slot for input after slider.",
        "prepend": "Slot for input before slider.",
        "label": "Replaces the default label.",
        "trackLabel": "The content of the `track-label`. Slot scope has access to `value` and `order` (for `range` type) variables."
      }
    },
    "VaAspectRatio": {
      "props": {
        "contentWidth": "Wrapper width, it's used with `content-height` to replace the `ratio` property.",
        "contentHeight": "Wrapper height, it's used with `content-width` to replace the `ratio` property.",
        "maxWidth": "Maximal component's width."
      }
    },
    "VaAffix": {
      "props": {
        "offsetTop": "Distance from the top of target element to the top of affixed element.",
        "offsetBottom": "Distance from the bottom of target element to the bottom of affixed element.",
        "target": "The element relative to which the component is fixed."
      },
      "events": {
        "change": "Emits affixed state on its' change."
      }
    },
    "VaBreadcrumbs": {
      "props": {
        "activeColor": "Color of active links (theme string or HEX string).",
        "separator": "Element to separate breadcrumbs items.",
        "separatorColor": "Color of the separator icon (theme string or HEX string)."
      },
      "slots": {
        "default": "One or more `va-breadcrumbs-item` elements.",
        "separator": "Separator element. Can be string or vue component."
      }
    },
    "VaBreadcrumbsItem": {
      "props": {
        "label": "Component content (string)."
      },
      "slots": {
        "default": "Component content."
      }
    },
    "VaModal": {
      "props": {
        "title": "Text content to place in the title",
        "message": "Content of modal body",
        "attachElement": "A valid selector of element, where modal will be rendered",
        "disableAttachment": "Ignore `attach-element` prop and render component as it's parent child",
        "size": "Set the size of the modal's width. `\"small\"`, `\"medium\"` (default) or `\"large\"`",
        "okText": "Text string to place in the default footer **Ok** button",
        "cancelText": "Text string to place in the default footer **Cancel** button",
        "hideDefaultActions": "Use `hide-default-actions: true` to hide **Cancel** and **Ok** buttons",
        "fullscreen": "Add the `fullscreen` prop to cover the whole page",
        "mobileFullscreen": "Use `mobile-fullscreen: false` to disable fullscreen mode for mobile viewports",
        "noDismiss": "Disable both close on overlay click and close on **Esc**",
        "noOutsideDismiss": "Disable close on overlay click",
        "noEscDismiss": "Disable close on **Esc**",
        "maxWidth": "Use `max-width` to change the maximum width of the modal.",
        "maxHeight": "Use `max-height` to change the maximum height of the modal. If content is larger, scroll will appear",
        "fixedLayout": "Use `fixed-layout: true` to scroll only content in modal. Title and actions will be fixed",
        "withoutTransitions": "Use `without-transitions: true` to turn off the open and close animations on the modal",
        "overlay": "Use `overlay: false` to hide the overlay",
        "overlayOpacity": "Set the overlay's opacity",
        "anchorClass": "Set class name to the `anchor` slot container",
        "zIndex": "Set the modal's `z-index`",
        "allowBodyScroll": "Allows the document scroll while modal is open.",
        "blur": "Use `blur` filter to overlay. Root `css` variable `--va-modal-overlay-background-blur-radius` sets the blur radius"
      },
      "events": {
        "updateModelValue": "The event is triggered when the component needs to change visibility",
        "clickOutside": "Emits when overlay is clicked",
        "ok": "Emits when **Ok** button is clicked",
        "beforeOpen": "Emits before modal's open after transition started",
        "open": "Emits when modal's is open and transition is complete",
        "beforeClose": "Emits before modal's start closing after transition started",
        "close": "Emits when modal's is closed and transition is complete",
        "cancel": "Emits when the user closes the modal window without side effects"
      },
      "methods": {
        "hide": "Hide modal (change `modelValue`)",
        "show": "Show modal (change `modelValue`)",
        "toggle": "Toggle a modal's visibility (change `modelValue`)"
      },
      "slots": {
        "default": "Content of modal body",
        "anchor": "Modal anchor content. There is access to the `show`, `hide` and `toggle` methods in the slots scope",
        "header": "Modal header content",
        "footer": "Modal footer content"
      }
    },
    "VaRating": {
      "props": {
        "value": "The rating value",
        "icon": "The icon displayed when icon is filled",
        "halfIcon": "The icon displayed when icon is half-filled (requires **`halves`**)",
        "emptyIcon": "The icon displayed when icon is empty (requires **`halves`**)",
        "readonly": "Disables all user interaction effects (pointer, hover)",
        "numbers": "When `true`, numbers from 1 to **`max`** are rendered instead of icons",
        "halves": "Allow to select half of the item",
        "max": "The amount of items to display",
        "clearable": "Allows the components value to be set to 0. Triggered by clicking on currently selected icon",
        "hover": "Adds visual feedback when hovering on items",
        "texts": "The array of captions to be used with each value. The array length should be equal to **`max`** prop",
        "textColor": "Color of text captions",
        "unselectedColor": "Specifies the color of unselected items (by default **`color`** prop is used)"
      }
    },
    "VaPagination": {
      "props": {
        "value": "Current page (or item if `total` is issued) value.",
        "visiblePages": "The amount of displayed pages (when set to 0 all pages are displayed).",
        "pages": "The amount of pages.",
        "boundaryLinks": "Show controls to move to first and last page.",
        "boundaryNumbers": "Always show first and last page (will replace `boundary-links` if both used).",
        "directionLinks": "Show buttons to move forward and backward.",
        "input": "Use HTML Input instead of buttons to control `va-pagination` state.",
        "hideOnSinglePage": "Component won't be displayed if only 1 page is available.",
        "total": "Set the amount of data pagination should iterate through. This prop should not be used with `pages` prop.",
        "pageSize": "Set the amount of data to be displayed at 1 page. Used to calculate the length of pagination. This prop should not be used with `pages` prop.",
        "boundaryIconLeft": "Set the icon name for left boundary icon.",
        "boundaryIconRight": "Set the icon name for right boundary icon.",
        "directionIconLeft": "Set the icon name for left direction icon.",
        "directionIconRight": "Set the icon name for right direction icon.",
        "size": "Specify size for component. `small`, `medium`, `large` sizes are available.",
        "activePageColor": "Specifies color of the currently active page button.",
        "gapped": "Enables gaps between page buttons.",
        "buttonsPreset": "Value of the `preset` prop for passing it to the `VaButton` component ([read more](/ui-elements/button))."
      },
      "slots": {
        "firstPageLink": "For the first page link content",
        "prevPageLink": "For the prev page link content",
        "nextPageLink": "For the next page link content",
        "lastPageLink": "For the last page link content"
      }
    },
    "VaTabs": {
      "props": {
        "value": "The *name* of selected tab or *index* (if `name` prop is not specified)",
        "left": "Align all items to the left",
        "right": "Align all items to the right",
        "center": "Align all items to the center",
        "grow": "Take all container width",
        "hideSlider": "Remove slider which underlines selected item",
        "vertical": "Align all items vertically",
        "prevIcon": "Icon to be used for scrolling backward in pagination",
        "nextIcon": "Icon to be used for scrolling forward in pagination",
        "hidePagination": "Hide or show pagination arrows"
      },
      "events": {
        "clickNext": "Emits when pagination **next** is clicked",
        "clickPrev": "Emits when pagination **prev** is clicked"
      },
      "slots": {
        "default": "For a content",
        "tabs": "For a list of tabs"
      }
    },
    "VaSwitch": {
      "props": {
        "color": "Color of switch",
        "size": "Specify size for component. `\"small\"`, `\"medium\"`, `\"large\"` sizes are available",
        "label": "Switch label",
        "leftLabel": "Moves label to the left",
        "readonly": "Makes switch read only",
        "trueLabel": "Label when checked",
        "falseLabel": "Label when unchecked",
        "trueInnerLabel": "Inner label when checked",
        "falseInnerLabel": "Inner label when unchecked",
        "value": "Switch value",
        "trueValue": "Value when checked",
        "falseValue": "Value when unchecked",
        "arrayValue": "Takes the value of a switch in an array of switches"
      },
      "slots": {
        "default": "Slot for label.",
        "innerLabel": "Slot for inner label."
      }
    },
    "VaFileUpload": {
      "props": {
        "type": "Specify the format of component. Supported types are `single`, `list` and `gallery`",
        "fileTypes": "Specify supported file formats",
        "dropzone": "Enables Drag&Drop",
        "hideFileList": "Hide file list if you want to show files somewhere else.",
        "value": "The array with uploaded files",
        "dropZoneText": "Custom drop zone label text",
        "uploadButtonText": "Custom upload button text",
        "undo": "Enables the canceling of the removing action for the added files",
        "undoDuration": "Undoing action duration",
        "undoButtonText": "Cancel button text",
        "deletedFileMessage": "Deleted file message"
      },
      "events": {
        "fileAdded": "Emits after files are added",
        "fileRemoved": "Emits after file is removed"
      },
      "slots": {
        "default": "Default slot allows to create custom file upload area."
      }
    },
    "VaHover": {
      "props": {
        "value": "Hover state."
      },
      "events": {
        "input": "Emits hover state when it changes."
      },
      "slots": {
        "default": "Vue default slot."
      }
    },
    "VaDivider": {
      "props": {
        "vertical": "Displays divider vertically",
        "dashed": "If set to true, the divider line is dashed",
        "inset": "If set to true, the left and right margins will be added; reduces height for vertical divider",
        "orientation": "Position of the title inside divider (for horizontal only). `left`, `center` (default) or `right`"
      },
      "slots": {
        "default": "Insert content (for horizontal only)"
      }
    },
    "VaToast": {
      "props": {
        "title": "Sets the title for the notification",
        "offsetY": "Sets the Y offset",
        "offsetX": "Sets the X offset",
        "message": "Notification message",
        "icon": "Sets the close icon",
        "customClass": "Applies custom class to the component",
        "duration": "Sets the duration of the notification display",
        "closeable": "Provides the ability to close the component",
        "onClose": "Applies a function to use when pressed a close button",
        "onClick": "Applies a function to use when clicked",
        "position": "Sets the position of the notification",
        "render": "Render function to use a custom content",
        "multiLine": "Sets more space for the Toast component",
        "dangerouslyUseHtmlString": "Sets the ability to use `message` as innerHtml. **Please note that this can lead to XSS attacks**, so make sure that you sanitize the `message` by yourself"
      },
      "events": {
        "onClick": "Emits when toast is clicked",
        "onClose": "Emits when close button is clicked"
      },
      "methods": {},
      "slots": {}
    },
    "VaCard": {
      "props": {
        "stripe": "Displays a stripe above a card title.",
        "stripeColor": "Customize stripe color (theme string or *HEX* string).",
        "gradient": "Adds color gradient to `va-card` body.",
        "bordered": "Toggles borders of a card component.",
        "outlined": "Toggles shadow of `va-card`",
        "dark": "Applies dark color and background to card"
      }
    },
    "VaSidebar": {
      "props": {
        "minimized": "Minimized state of sidebar.",
        "hoverable": "Expand sidebar on hover.",
        "position": "Position of `va-sidebar`, can be `right` or `left`.",
        "width": "Width of component in maximized state.",
        "minimizedWidth": "Width of component in minimized state.",
        "value": "The current visibility state of `va-sidebar`.",
        "animated": "Sets css `transition` to component"
      }
    },
    "VaImage": {
      "props": {
        "src": "Initial image URL.",
        "alt": "Image alternative text.",
        "ratio": "Image width to height ratio.",
        "fit": "Proxies the `object-fit` attribute to the image [MDN](https://developer.mozilla.org/docs/Web/CSS/object-fit)[[target=_blank]].",
        "crossorigin": "Proxies the `crossorigin` attribute to the image [MDN](https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-crossorigin)[[target=_blank]].",
        "decoding": "Proxies the `decoding` attribute to the image [MDN](https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-decoding)[[target=_blank]].",
        "fetchpriority": "Proxies the `fetchpriority` attribute to the image [MDN](https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-fetchpriority)[[target=_blank]].",
        "loading": "Proxies the `loading` attribute to the image [MDN](https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-loading)[[target=_blank]].",
        "referrerpolicy": "Proxies the `referrerpolicy` attribute to the image [MDN](https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-referrerpolicy)[[target=_blank]].",
        "sizes": "Proxies the `sizes` attribute to the image [MDN](https://developer.mozilla.org/docs/Web/HTML/Element/img#using_the_srcset_and_sizes_attributes)[[target=_blank]].",
        "srcset": "Proxies the `srcset` attribute to the image [MDN](https://developer.mozilla.org/docs/Web/HTML/Element/img#using_the_srcset_and_sizes_attributes)[[target=_blank]].",
        "title": "Proxies the `title` attribute to the image [MDN](https://developer.mozilla.org/docs/Web/HTML/Element/img#the_title_attribute)[[target=_blank]].",
        "lazy": "Enables lazy load for the image.",
        "draggable": "Proxies the `draggable` attribute to the image [MDN](https://developer.mozilla.org/docs/Web/HTML/Global_attributes/draggable)[[target=_blank]].",
        "placeholderSrc": "`src` value for the placeholder image (can be replaced with `placeholder` slot)."
      },
      "events": {
        "loaded": "Emitted when image loading is finished.",
        "error": "Emitted on loading error."
      },
      "slots": {
        "sources": "Slot for passing one or more `source` tags [MDN](https://developer.mozilla.org/docs/Web/HTML/Element/picture)[[target=_blank]].",
        "loading": "Shown when image is loading.",
        "error": "Shown if loading returns an error.",
        "default": "Image overlay content. Won't be shown on loading or error.",
        "placeholder": "Shown in case of loading/error and if no specific for these states slots were passed."
      }
    },
    "VaOptionList": {
      "props": {
        "disabledBy": "Specify the key in the object to be used as item `disabled` prop. Can be string (path to the key) or function of type: `(option) => option.disabled`",
        "valueBy": "When `options` prop is an object, this key will be used as `modelValue`. Can be string (path to the key) or function of type: `(option) => option.value`",
        "trackBy": "When `options` prop is an object, this key will be used to track selected `options`. Can be string (path to the key) or function of type: `(option) => option.track`",
        "textBy": "When `options` prop is an object, this key will be used as displayed text. Can be string (path to the key) or function of type: `(option) => option.text`",
        "options": "The array of items to be displayed",
        "type": "Specify the format of component. Supported types are `\"radio\"`, `\"checkbox\"` and `\"switch\"`",
        "defaultValue": "This value will be pre-selected for the stateful component",
        "leftLabel": "Put the labels to the left"
      },
      "events": {
        "input": "Emitted on value change."
      },
      "slots": {
        "default": "Used to render items. Available props are:\n`option: String `&#124;` Object`,\n`isDisabled: Boolean`,\n`name: String`,\n`color: String`,\n`leftLabel: Boolean`,\n`getText: (option: String `&#124;` Object) => String`,\n`selectedValue: Array<String `&#124;` Object>`,\n`index: Number`"
      }
    },
    "VaAvatar": {
      "props": {
        "icon": "The icon to be displayed inside a container",
        "src": "URL to the image (will be placed inside `src` attribute of image tag)",
        "alt": "Specifies an alternate text for an avatar image (not icon)",
        "fontSize": "The font-size of text inside avatar",
        "email": "Будет отображать `gravatar` для предоставленного email"
      },
      "slots": {
        "default": "Use this slot to replace default content to be displayed inside the component"
      },
      "events": {
        "error": "Triggers when failed to load an image"
      }
    },
    "VaCheckbox": {
      "props": {
        "value": "The value of the checkbox",
        "checkedIcon": "Overrides the `checked` icon",
        "indeterminateIcon": "Overrides the `indeterminate` icon"
      },
      "events": {
        "input": "Emitted when the component needs to change the value"
      }
    },
    "VaProgressBar": {
      "props": {
        "value": "The progress value",
        "indeterminate": "Create a indeterminate loading bar",
        "buffer": "Create a loading bar with a buffer. Commonly used in videos",
        "reverse": "Reverse the progress bar direction",
        "rounded": "Add a border radius to the `va-progress-bar` component (default: true)",
        "contentInside": "Sets the content of the slot inside the progress bar",
        "showPercent": "Shows the indicator value with a percent sign",
        "max": "Maximum value"
      },
      "slots": {
        "default": "Display any additional info about the progress"
      }
    },
    "VaProgressCircle": {
      "props": {
        "value": "The progress value",
        "indeterminate": "Using the `indeterminate` prop, the `va-progress-circle` continues to  animate indefinitely.",
        "thickness": "Circle border size between 0 and 1"
      },
      "slots": {
        "default": "Display any additional info about the progress"
      }
    },
    "VaInfiniteScroll": {
      "props": {
        "offset": "Number of pixels to the end of `va-infinite-scroll` container at which the component should start loading more content in advance.",
        "reverse": "Instead of bottom, top of the container would trigger loading.",
        "disabled": "Won't trigger load even when scroll reached end. Useful to prevent further loading when there is no more items in list.",
        "scrollTarget": "The element to be used as a scroll container instead of default one. Could be CSS selector or Element. When not set - direct wrapper will be used as a scroll container.",
        "debounce": "Debounce to be applied when listening to scroll event. Useful to prevent user from triggering loading multiple times.",
        "load": "Function that loads data. Should return Promise",
        "tag": "Replaces html tag. This is useful for semantics and also to allow for valid markup in some cases (`ul > li` and `tr > td` etc.)."
      },
      "events": {
        "onload": "Emits when `load` function finished with success",
        "onerror": "Emits when `load` function thrown error"
      },
      "slots": {
        "loading": "Shown when content is fetching.",
        "default": "The content to be scrolled"
      }
    },
    "VaAlert": {
      "props": {
        "value": "The current visibility state of the alert",
        "title": "The text content placed in the title",
        "description": "The text content of the alert",
        "icon": "Show icon in front of alert content",
        "closeIcon": "Replace the default close icon with a custom one",
        "closeText": "Use text instead of the close icon",
        "closeable": "Add a close alert area",
        "center": "Center the title and description of the alert",
        "borderColor": "Border color of the alert",
        "border": "Stripe border for alert. `top`, `right`, `bottom`, `left` sizes are available",
        "dense": "Reduces alert paddings"
      },
      "methods": {
        "hide": "Hides alert (on stateless alert only emits `input`)"
      },
      "slots": {
        "default": "Content of alert body",
        "title": "Alert title area content",
        "icon": "Alert icon area content",
        "close": "Alert close area content"
      }
    },
    "VaIcon": {
      "props": {
        "component": "Allows to use the `svg` component as an icon",
        "rotation": "Rotates a component by a degree value",
        "spin": "Starts rotation animation",
        "flip": "Specifies mirror image relative to horizontal and vertical planes. `\"off\"`, `\"horizontal\"`, `\"vertical\"` and `\"both\"` values are available"
      }
    },
    "VaRadio": {
      "props": {
        "value": "Model of the component",
        "option": "Option value that model is updated to when an option is selected",
        "tabindex": "Sets a custom tabindex"
      }
    },
    "VaCollapse": {
      "props": {
        "value": "Current collapse state",
        "header": "Text content to place in the header",
        "icon": "The icon to be displayed inside a header",
        "solid": "Adds borders to the collapse",
        "colorAll": "Applies color to collapse contents background",
        "flat": "Disables shadows and borders"
      },
      "events": {
        "input": "Emits when collapse is clicked"
      },
      "methods": {},
      "slots": {
        "default": "Collapsable content of the component",
        "header": "Replaces the whole component's header block",
        "headerContent": "Replaces component's header block inner content"
      }
    },
    "VaAccordion": {
      "props": {
        "value": "The array of currently opened collapses",
        "multiple": "Allows to expand multiple components",
        "inset": "Collapse becomes smaller when activated",
        "popout": "Collapse becomes bigger when activated"
      },
      "events": {
        "input": "Emits when any of collapses is clicked"
      },
      "methods": {},
      "slots": {
        "default": "Contains collapses"
      }
    },
    "VaChip": {
      "props": {
        "closeable": "Provides the ability to close the tag",
        "outline": "Applies outline styling",
        "flat": "Applies flat styling",
        "icon": "The icon to be displayed inside a tag",
        "shadow": "Applies box-shadow to the component"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaInput": {
      "props": {
        "value": "The input value",
        "type": "Sets input type",
        "label": "Sets input label",
        "placeholder": "Sets input placeholder",
        "mask": "Sets input mask if using as string or options for mask",
        "color": "Sets input color",
        "removable": "Adds an button that clears the value",
        "tabindex": "Sets input tabindex",
        "returnRaw": "Sets possibility to return raw value",
        "autosize": "Sets textarea possibility to grow up automatically and disables the ability to this to the user (set css `resize: none`)",
        "minRows": "Minimal count of lines",
        "maxRows": "Maximum count of lines",
        "rules": "Accepts an array of functions that take an input value as an argument and return either true / false or a string with an error message",
        "disabled": "Disable the input",
        "readonly": "Puts input in readonly state",
        "success": "Sets input state to success",
        "messages": "Displays a list of messages or message if using a string",
        "error": "Sets input state to error",
        "errorMessages": "Displays a list of error messages or message if using a string",
        "errorCount": "Number of error messages displayed",
        "clearable": "Adds a button to reset the input field value",
        "clearValue": "Sets value that should be set after clearing",
        "bordered": "Applies underscore",
        "focused": "Applies focus style",
        "canBeFocused": "If false, then input can not be focused using mouse or keyboard",
        "requiredMark": "Adds required mark to the label",
        "immediateValidation": "Sets the validation to be performed when the component is mounted",
        "inputClass": "Classes for `input` (not its wrapper)",
        "pattern": "The pattern prop specifies a regular expression the input value should match",
        "inputmode": "The inputmode prop is an enumerated prop that hints at the type of data that might be entered by the user while editing the element or its contents. This allows a browser to display an apropriate virtual keyboard",
        "counter": "Show a counter of value length",
        "maxLength": "Specify a max length of value"
      },
      "events": {
        "change": "Emitted when the input loose focus or on `enter`",
        "blur": "Emitted when the input is blurred",
        "focus": "Emitted when input is focused",
        "click": "Emitted when user clicked on input",
        "keyup": "Emitted when the user releases a key on the keyboard",
        "keydown": "Emitted when any key is pressed",
        "keypress": "Emitted when any key is pressed. The event is deprecated, will be removed in future versions",
        "clear": "Emitted when `clear` key is pressed",
        "clickIcon": "Emitted when user clicked on icon",
        "updateError": "Emitted when was changed error status after validation",
        "updateErrorMessages": "Emitted when was changed error messages after validation"
      },
      "methods": {
        "blur": "Setting blurred on input",
        "focus": "Setting focus on input",
        "reset": "Clearing input value"
      },
      "slots": {
        "prepend": "Adds an item outside the input and before input content",
        "prependInner": "Adds an item inside the input and before input content",
        "append": "Adds an item outside the input and after input content",
        "appendInner": "Adds an item inside the input and after input content",
        "messages": "Replaces messages under input field with slot content"
      }
    },
    "VaList": {
      "props": {
        "fit": "Stretches list by its content width"
      },
      "slots": {
        "default": "Contains list items"
      }
    },
    "VaListLabel": {
      "slots": {
        "default": "Contains the label text"
      }
    },
    "VaListSeparator": {
      "props": {
        "fit": "Adds space on the left side",
        "spaced": "Adds spaces over and under the separator"
      }
    },
    "VaListItem": {
      "events": {
        "focus": "Emitted when item is focused",
        "click": "Emitted when user clicked on item"
      },
      "slots": {
        "default": "For a list item content"
      }
    },
    "VaListItemLabel": {
      "props": {
        "caption": "Applies another style to text",
        "lines": "Divides item label content on a custom count of lines"
      },
      "slots": {
        "default": "Contains the label text"
      }
    },
    "VaListItemSection": {
      "props": {
        "icon": "Makes section for icon",
        "avatar": "Makes section for avatar"
      },
      "slots": {
        "default": "For a section content"
      }
    },
    "VaSelect": {
      "props": {
        "value": "Model of the component. Must be Array if using 'multiple' prop",
        "clearValue": "Sets value that should be set after clearing",
        "options": "Available options that the user can select from",
        "disabledBy": "Specify the key in the object to be used as item `disabled` prop. Can be string (path to the key) or function of type: `(option) => option.disabled`",
        "valueBy": "When `options` prop is an object, this key will be used as `modelValue`. Can be string (path to the key) or function of type: `(option) => option.value`",
        "trackBy": "When `options` prop is an object, this key will be used to track selected `options`. Can be string (path to the key) or function of type: `(option) => option.track`",
        "textBy": "When `options` prop is an object, this key will be used as displayed text. Can be string (path to the key) or function of type: `(option) => option.text`",
        "groupBy": "When `options` prop is an object, this key will be used to group up options. Can be string (path to the key) or function of type: `(option) => option.group`",
        "placeholder": "Sets the placeholder text to input",
        "placement": "Sets option list placement. [More about placements](/ui-elements/dropdown#placement-and-offset)",
        "tagMax": "Sets maximum tag count after whom selection will be cropped",
        "tags": "Sets selection display as tags",
        "deletableTags": "Sets ability to delete tags",
        "searchable": "Sets ability to filter option list by typing",
        "multiple": "Sets select in multiple mode",
        "maxSelections": "Sets the maximum amount of selected options",
        "width": "Sets option list width",
        "maxHeight": "Sets option list maximum height",
        "noOptionsText": "Sets text whom displaying if list have no items",
        "fixed": "Sets dropdown placement strategy",
        "clearable": "Sets ability to clear selection",
        "hideSelected": "Sets ability to hide selected options",
        "allowCreate": "Allow creating new options. Can be set to `unique` if you want to create only unique options",
        "clearIcon": "Sets the clear icon",
        "dropdownIcon": "Sets the dropdown icon. Can be object if you want to sets different open/close icons",
        "bordered": "Applies style with bottom border",
        "requiredMark": "Adds required mark to the label",
        "separator": "Text to separate selected values",
        "maxVisibleOptions": "Max selected options amount, that will be shown inside of input wrapper.",
        "preventOverflow": "If true, dropdown will be teleported to target ignoring `overflow: hidden` on relative position elements.",
        "selectedTopShown": "Selected options will be shown at the top of the options list.",
        "stickToEdges": "Dropdown will not be rendered outside of viewport. It will be moved in opposite direction.",
        "autocomplete": "Enables the autocomplete behaviour.",
        "highlightMatchedText": "Highlight chars in options that are match the input value (search or autocomplete).",
        "minSearchChars": "Minimal amount of chars in input value to initiate search or autocomplete.",
        "ariaLabel": "Set aria label. By default it `$t:selectOption` is value is selected and `$t:noSelectedOption` if value is empty.",
        "ariaClearLabel": "Set aria label for clear button",
        "ariaSearchLabel": "Set aria label for search input"
      },
      "events": {
        "clear": "Emitted if select value has been cleared",
        "updateSearch": "Emitted if search value has changed",
        "createNew": "Emitted if search input has created new option",
        "scrollBottom": "Emitted once the scroll position of options has reached the bottom"
      },
      "methods": {
        "reset": "Clearing select value"
      },
      "slots": {
        "prepend": "Adds an item outside the input and before input content",
        "prependInner": "Adds an item inside the input and before input content",
        "append": "Adds an item outside the input and after input content",
        "appendInner": "Adds an item inside the input and after input content",
        "content": "Adds an item instead the input",
        "option": "Allows to specify option template",
        "hiddenOptionsBadge": "Replaces default badge with hidden options counter (see `maxVisibleOptions` prop).",
        "hideOptionsButton": "Replaces default button for hiding selected options that are over the limit (see `maxVisibleOptions` prop)."
      }
    },
    "VaParallax": {
      "props": {
        "target": "The element relative to which the component is fixed",
        "src": "URL to the image",
        "alt": "Specifies an alternate text for an image",
        "height": "Sets a height of the parallax",
        "reversed": "Flips the parallax scrolling",
        "speed": "Sets a speed of the parallax scrolling"
      },
      "slots": {
        "default": "For a content over the parallax"
      }
    },
    "VaBacktop": {
      "props": {
        "target": "Applies the selector to which the backtop is bound",
        "visibilityHeight": "The minimum height after which the backtop is displayed",
        "speed": "Sets the scrolling speed",
        "horizontalPosition": "Sets the horizontal position of the component",
        "verticalPosition": "Sets the vertical position of the component",
        "horizontalOffset": "Sets the horizontal offset of the component from the border of the monitor",
        "verticalOffset": "Sets the vertical offset of the component from the border of the monitor"
      },
      "events": {
        "click": "Emitted when user clicked on backtop"
      },
      "methods": {},
      "slots": {
        "default": "Slot for backtop content"
      }
    },
    "VaButtonDropdown": {
      "props": {
        "disableDropdown": "Disables the dropdown menu.",
        "disableButton": "Disables the button.",
        "split": "Divides the button into two parts. This is useful when you have main action (button) and a number of secondary actions (icon + dropdown).",
        "splitTo": "Sets a vue navigation link in a split component.",
        "splitHref": "Sets a native navigation link in a split component.",
        "icon": "Applies a custom icon in the dropdown section.",
        "leftIcon": "Sets the icon position to the left.",
        "hideIcon": "Hide icon (when `split` is disabled).",
        "openedIcon": "Applies a custom icon in the dropdown section when the dropdown is opened.",
        "placement": "Sets the placement of the dropdown content. [More about placements](/ui-elements/dropdown#placement-and-offset)",
        "keepAnchorWidth": "Keeps anchor position the same.",
        "offset": "Sets the distance between dropdown and anchor.",
        "modelValue": "Sets a dropdown state.",
        "closeOnContentClick": "Sets dropdown content on click behavior.",
        "gradient": "Makes the button background color a gradient (only if `backgroundColor` prop is equal to `1`).",
        "trigger": "Action that will open and close dropdown.",
        "preventOverflow": "If true, dropdown will be teleported to target ignoring `overflow: hidden` on relative position elements.",
        "stickToEdges": "Dropdown will not be rendered outside of viewport. It will be moved in opposite direction.",
        "isContentHoverable": "If true, dropdown content will be hoverable",
        "innerAnchorSelector": "Anchor CSS selector inside passed slot.",
        "hoverOutTimeout": "Time in `ms` after mouse leave dropdown before it will be closed",
        "hoverOverTimeout": "Time in `ms` after mouse enter dropdown before it will be opened",
        "cursor": "Dropdown will be rendered relative to cursor position",
        "closeOnAnchorClick": "Dropdown will be closed when anchor is clicked",
        "closeOnClickOutside": "Dropdown will be closed when clicked outside dropdown content and anchor",
        "anchorSelector": "Anchor CSS selector instead of passing slot",
        "autoPlacement": "If dropdown doesn't fit viewport, it will be placed automatically to fit viewport"
      },
      "events": {
        "click": "Emitted when user clicks on button.",
        "mainButtonClick": "Emitted when user clicks on main button in split component."
      },
      "methods": {},
      "slots": {
        "default": "Dropdown content slot.",
        "label": "Content for dropdown button."
      }
    },
    "VaColorInput": {
      "props": {
        "value": "Current color.",
        "selected": "Select the indicator."
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaColorPalette": {
      "props": {
        "value": "Current color",
        "palette": "An array of colors"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaDataTable": {
      "props": {
        "columns": "The property `columns` must be an array, that configures the columns of the table",
        "items": "Array of objects with table data (`DataTableItem` type). The `va-data-table` automatically calculates the amount and the titles of columns (if not specified otherwise with the `columns` prop) based on these object's keys. When calculating the columns' names based on the item's objects' keys `va-data-table` uses [Lodash's startCase](https://lodash.com/docs/4.17.15#startCase)[[target=_blank]] internally. Faulty values are replaced with an empty string",
        "itemsTrackBy": "The `item` key that is used to keep track of the selected `item`. Can be string (path to the key) or a function of type: `(item) => item.track`",
        "filter": "If a `filter` is provided, only rows in which at least one cell contains the specified value will be displayed. To disable filtering at runtime (clear `filter`), specify an empty string",
        "filterMethod": "A custom filtering function. The function takes the initial value of the currently checked cell (the `source` is a formal parameter) and should return a `boolean` value, indicating whether to include the row containing this cell or not",
        "sortBy": "Sets the column to sort by. Works through the `v-model`",
        "sortingOrder": "Sets the sorting order. Works through the `v-model`",
        "sortingOptions": "An array from a set of values (`'asc'`, `'desc'`, `null`) that specifies the order and allowed sort directions.",
        "selectable": "Sets whether the `va-data-table` should have selectable rows or not",
        "grid": "Enables grid view for the component",
        "gridColumns": "Sets the amount of columns for grid view. By default is ruled by adaptive CSS variables.",
        "clickable": "Sets whether the `va-data-table` should have clickable (the click events will be emitted) rows or not",
        "selectMode": "Sets the select mode. `'single'` selection allows for only a single row to be selected at a time, while `'multiple'` mode allows to select multiple rows by clicking on checkboxes or using the **ctrl**/**shift** keys when clicking rows",
        "selectedColor": "Sets the highlighting color of the selected row",
        "perPage": "Sets the maximum number of rows displayed in the table's `tbody`",
        "currentPage": "Sets the number of the current table page",
        "loading": "Sets the loading state for the table (by displaying the spinning loading-indicator)",
        "loadingColor": "Sets the color of the spinning loading-indicator",
        "noDataHtml": "Sets html-content for cases where there are no items passed in the `items` option at all",
        "noDataFilteredHtml": "Sets html-content for cases where there are no items found when filtering the table using the `filter` prop",
        "hideDefaultHeader": "Sets whether to show the default headers for columns",
        "footerClone": "Sets whether to clone the `thead` columns into the `tfoot`. Has no effect if the default `thead` is hidden with the `hide-default-header` prop",
        "allowFooterSorting": "Allows clicks on `tfoot` column headers to sort (and to display the sorting status) the rows",
        "striped": "Sets the striped style to the `tbody` rows (highlights each 2nd row)",
        "hoverable": "Allows the hover state on table rows within a `tbody`. The highlighting color of the hover state takes from `selected-color` prop",
        "animated": "Sets css `transition` to table rows",
        "stickyHeader": "Enables sticky header (sticky header is achieved through CSS with `position: sticky` for `thead`)",
        "stickyFooter": "Enables sticky footer (sticky footer is achieved through CSS with `position: sticky` for `tfoot`)",
        "height": "Sets the height to the table and enables scrolling",
        "rowBind": "Adds attributes to a table row using `v-bind`. This can be an object type (with attributes that vue supports) or a function that returns such an object. The function receives a table row element (`DataTableItem` type) and an index as arguments",
        "bench": "Amount of rows will be rendered before and after visible part of the table (for smooth scrolling). Suitable only for the state with the virtual scrolling enabled.",
        "itemSize": "Average size (width or height) of the row (can be number or string with \"px\"/\"rem\" value). Suitable only for the state with the virtual scrolling enabled.",
        "virtualScroller": "Enables virtual scrolling for `tbody` rows.",
        "virtualTrackBy": "Property name for row identifying. Suitable only for the state with the virtual scrolling enabled.",
        "wrapperSize": "Size (width or height) of the component's viewport (can be number or string with \"px\"/\"rem\" value). Suitable only for the state with the virtual scrolling enabled.",
        "cellBind": "Adds attributes to a table cell using `v-bind`. This can be an object type (with attributes that vue supports) or a function that returns such an object. As arguments, the function receives a table cell element (`any` type), a row (`DataTableItem` type), a column (`TableColumn` type), and a row index",
        "scrollTopMargin": "Sets the threshold (`px`) for scrolling up when the `scroll:top` event is enabled.",
        "scrollBottomMargin": "Sets the threshold (`px`) for scrolling down when the `scroll:bottom` event is enabled."
      },
      "events": {
        "updateSortBy": "Emits when `sort-by` changed",
        "updateSortingOrder": "Emits when `sorting-order` changed",
        "filtered": "`va-data-table` emits the `filtered` event each time filtering is applied (and when the filter is cleared), with the following param: `FilteredEmit` = \n &#123;\n &nbsp; `items: DataTableItem[]`,\n &nbsp; `itemsIndexes: number[]`\n &#125;",
        "sorted": "Each time the table's sorting changes, the `sorted` event is thrown, with the following param: `SortedEmit` = \n &#123;\n &nbsp; `sortBy: string`,\n &nbsp; `sortingOrder: DataTableSortingOrder`,\n &nbsp; `items: DataTableItem[]`,\n &nbsp; `itemsIndexes: number[]`\n &#125;",
        "rowClick": "When row clicked the event is thrown with the following param: `RowClickEmit` = \n &#123;\n &nbsp; `event: Event`,\n &nbsp; `item: DataTableItem`,\n &nbsp; `itemIndex: number`\n &#125;",
        "rowDblclick": "Double-clicking a row raises an event with the `RowClickEmit` param",
        "rowContextmenu": "When the context menu is clicked on a row, an event is raised with the `RowClickEmit` param",
        "selectionChange": "The `selectionChange` event is thrown each time the selection changes. It provides the following object: `SelectionChangeEmit` = \n&#123;\n &nbsp; `currentSelectedItems: (DataTableItem | DataTableItemKey)[]`,\n &nbsp; `previousSelectedItems: (DataTableItem | DataTableItemKey)[]`\n &#125;",
        "scrollBottom": "Emits when table scroll down reaches `scrollBottomMargin`.",
        "scrollTop": "Emits when table scroll top reaches `scrollTopMargin`."
      },
      "methods": {},
      "slots": {
        "colgroup": "The contents of this slot is wrapped (if provided) inside the `colgroup` tag, allowing to specify certain column options. Bound to columns (not the prop, but their internal representation)",
        "headerPrepend": "Prepends custom rows in table header (`thead`). Isn't bound to anything",
        "header": "Targets all the table headings. Is bound to columns (to their internal representation)",
        "headerKey": "Targets a specific table header by the column's `key`. Is bound to column",
        "headerAppend": "Appends custom rows inside table header (`thead`)",
        "bodyPrepend": "Prepends `tbody` with custom rows",
        "cell": "Targets all the cells. Is bound to the current cell (to it internal representation)",
        "expandableRow": "Targets all the row. Adds an expandable row underneath. To trigger expansion use `row.toggleExpandableRow`",
        "cellKey": "Allows to target only cells of a specified by the given `key` column. Is bound to the current cell",
        "bodyAppend": "Appends rows to the table's `tbody`",
        "footerPrepend": "Prepends rows to the table's `tfoot`",
        "footer": "Targets all the headers inside `tfoot`. Works if there's a `footer-clone` prop set to `true`",
        "footerKey": "A specific header in `tfoot`. Is bound to the column (to it internal representation) with the given `key`. Works if there's a `footer-clone` prop set to `true`",
        "footerAppend": "Appends rows to the `tfoot`"
      }
    },
    "VaDatePicker": {
      "props": {
        "modelValue": "Date, date array or date period",
        "monthNames": "Array of 12 month names",
        "weekdayNames": "Array of 7 weekday names",
        "firstWeekday": "Name of first weekday. Can be `Monday` or `Sunday`",
        "hideWeekDays": "Hide weekday names on top of day picker",
        "view": "This prop specify which year and month will be shown to user. Also, you can specify type and show year, month or day picker",
        "type": "This prop will specify which value user should choose",
        "showOtherMonths": "If `true`, other month days will be shown in day picker",
        "highlightWeekend": "If `true` weekend will be colored",
        "highlightToday": "If `true` today date will be colored",
        "allowedDays": "Function that accepts date and return `false` if day is not allowed",
        "allowedMonths": "Function that accepts date and return `false` if month is not allowed",
        "allowedYears": "Function that accepts date and return `false` if year is not allowed",
        "weekends": "Function that accepts date and return `true` if date is weekend",
        "startYear": "First year that user can choose. By default is 1970",
        "endYear": "Last year that user can choose. By default is current year plus 50 years",
        "weekendsColor": "Color of the weekend cells (theme string or HEX string).",
        "mode": "Specify if picker value is single date, multiple dates or date range."
      },
      "events": {
        "updateView": "Emit when DatePicker \"view type\" is changed. DatePicker view types are `\"day\"`, `\"month\"`, `\"year\"`.",
        "hoverYear": "The event is triggered when the mouse hover the year cell.",
        "clickYear": "The event is triggered when clicked the year cell.",
        "hoverDay": "The event is triggered when the mouse hover the day cell.",
        "clickDay": "The event is triggered when clicked the day cell.",
        "hoverMonth": "The event is triggered when the mouse hover the month cell.",
        "clickMonth": "The event is triggered when clicked the month cell."
      },
      "methods": {},
      "slots": {
        "buttonPrev": "Button show previous month or year.",
        "buttonNext": "Button show next month or year.",
        "header": "This slot is showing year and month between header buttons.",
        "year": "Used to change how year will be displayed in header and picker cell.",
        "month": "Used to change how month will be displayed in header and picker cell.",
        "weekday": "Used to change how weekday will be displayed in picker cell.",
        "day": "Used to change how day will be displayed in picker cell."
      }
    },
    "VaDateInput": {
      "props": {
        "modelValue": "Date, date array or date period",
        "weekDays": "Adds days to the table",
        "placeholder": "Sets input placeholder",
        "config": "Object with settings for date picker",
        "monthNames": "Array of 12 month names",
        "weekdayNames": "Array of 7 weekday names",
        "firstWeekday": "Name of first weekday. Can be `Monday` or `Sunday`",
        "hideWeekDays": "Hide weekday names on top of day picker",
        "view": "This prop specify which year and month will be shown to user. Also, you can specify type and show year, month or day picker",
        "type": "This prop will specify which value user should choose",
        "showOtherMonths": "If `true`, other month days will be shown in day picker",
        "highlightWeekend": "If `true` weekend will be colored",
        "highlightToday": "If `true` today date will be colored",
        "allowedDays": "Function that accepts date and return `false` if day is not allowed",
        "allowedMonths": "Function that accepts date and return `false` if month is not allowed",
        "allowedYears": "Function that accepts date and return `false` if year is not allowed",
        "weekends": "Function that accepts date and return `true` if date is weekend",
        "startYear": "First year that user can choose. By default is 1970",
        "endYear": "Last year that user can choose. By default is current year plus 50 years",
        "weekendsColor": "Color of the weekend cells (theme string or HEX string).",
        "mode": "Specify if picker value is single date, multiple dates or date range.",
        "clearable": "Adds a button to reset the input field value",
        "clearValue": "Default input field value",
        "formatDate": "Function that accepts picker value and transforms it to the string",
        "format": "Function that accepts picker value and should transform it to text for input",
        "isOpen": "Value for dropdown. If `true`, then dropdown is shown",
        "resetOnClose": "If true, range value will be reset to previous valid value",
        "bordered": "Applies underscore",
        "label": "Sets input label",
        "mask": "Sets input mask if using as string or options for mask",
        "color": "Sets input color",
        "removable": "Adds an button that clears the value",
        "tabindex": "Sets input tabindex",
        "returnRaw": "Sets possibility to return raw value",
        "autosize": "Sets textarea possibility to grow up automatically",
        "minRows": "Minimal count of lines",
        "maxRows": "Maximum count of lines",
        "rules": "Accepts an array of functions that take an input value as an argument and return either true / false or a string with an error message",
        "disabled": "Disable the input",
        "readonly": "Puts input in readonly state",
        "success": "Sets input state to success",
        "messages": "Displays a list of messages or message if using a string",
        "error": "Sets input state to error",
        "errorMessages": "Displays a list of error messages or message if using a string",
        "errorCount": "Number of error messages displayed",
        "manualInput": "Allows user to manually input date in VaInput",
        "parse": "Function that transforms input field text to date, date array or date period",
        "parseDate": "Function that transforms input field text to date",
        "parseValue": "Function that transforms string value to date, date array or date period"
      },
      "events": {
        "clear": "Emitted if select value has been cleared",
        "updateView": "The event is triggered when the component needs to change the view",
        "updateMonth": "The event is triggered when the component needs to change the month",
        "updateYear": "The event is triggered when the component needs to change the year",
        "updateIsOpen": "The event is triggered when the component needs to toggle the 'is-open'",
        "updateText": "The event is triggered when the component needs to change the input text",
        "hoverDay": "The event is triggered when the mouse hover the day cell",
        "hoverMonth": "The event is triggered when the mouse hover the month cell",
        "hoverYear": "The event is triggered when the mouse hover the year cell",
        "clickDay": "The event is triggered when clicked the day cell",
        "clickMonth": "The event is triggered when clicked the month cell",
        "clickYear": "The event is triggered when clicked the year cell"
      },
      "methods": {},
      "slots": {}
    },
    "VaButtonGroup": {
      "slots": {
        "default": "Slot for buttons"
      }
    },
    "VaButtonToggle": {
      "props": {
        "options": "The array of objects with `label` and `value` properties",
        "value": "Current toggle state",
        "size": "Specify size for component. \"small\", \"medium\", \"large\" sizes are available",
        "toggleColor": "Color of the toggle button",
        "activeButtonTextColor": "The color of the button text with the selected value"
      },
      "events": {
        "input": "Emits when toggling to the different button"
      },
      "methods": {},
      "slots": {}
    },
    "VaAppBar": {
      "props": {
        "gradient": "Applies gradient style to background.",
        "shadowOnScroll": "Applies box-shadow to the component when scrolling target.",
        "shadowColor": "Sets color to the box-shadow.",
        "target": "Target for scrolling.",
        "fixed": "Switches component position to `fixed`."
      },
      "events": {},
      "methods": {},
      "slots": {
        "default": "Slot for app-bar content"
      }
    },
    "VaInnerLoading": {
      "props": {},
      "events": {},
      "methods": {},
      "slots": {
        "default": "Slot for the component to which you want to apply loading styles"
      }
    },
    "VaNuxtIntegration": {
      "props": {},
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaTable": {
      "props": {},
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaSidebarItem": {
      "props": {
        "activeColor": "Used to set accent color for active `VaSidebarItem`",
        "hoverColor": "Used to set accent color for hovered `VaSidebarItem`",
        "hoverOpacity": "Used to set opacity of the color for hovered `VaSidebarItem`",
        "active": "If `true` this sidebar item will be highlighted"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaNavbar": {
      "props": {
        "shape": "If true, shape will be drawn at navbar background.",
        "fixed": "Switches component position to `fixed`."
      },
      "events": {},
      "methods": {},
      "slots": {
        "left": "Place VaNavbar items on the left",
        "default": "Place VaNavbar items on the center (default)",
        "right": "Place VaNavbar items on the right"
      }
    },
    "VaPopover": {
      "props": {
        "title": "Sets the title of the popover",
        "message": "Message which showed in a popover",
        "trigger": "Event on which popover is triggered",
        "open": "Shows popover",
        "placement": "Sets a popover position. [More about placements](/ui-elements/dropdown#placement-and-offset)",
        "autoHide": "Adds the ability to hide popover when clicked outside",
        "hoverOverTimeout": "Delay before opening",
        "hoverOutTimeout": "Delay before closing"
      },
      "events": {},
      "methods": {},
      "slots": {
        "icon": "By default replaces with a `va-icon` and icon name from `icon` property",
        "title": "Custom title slot",
        "body": "Custom body slot"
      }
    },
    "VaTimePicker": {
      "props": {
        "ampm": "Use 12-hours time format",
        "hoursFilter": "Function that allows you to hide some specific hours",
        "minutesFilter": "Function that allows you to hide some specific minutes",
        "secondsFilter": "Function that allows you to hide some specific seconds",
        "view": "View specifying which columns will be shown",
        "periodUpdatesModelValue": "If user will change period it will automatically update model value. You can turn off it and am/pm switch will only change view.",
        "framed": "Adds borders to center of the picker",
        "cellHeight": "Height of the time cell",
        "visibleCellsCount": "Count of time cells to display"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaTimeInput": {
      "props": {
        "ampm": "Use 12-hours time format.",
        "hoursFilter": "Function that allows you to hide some specific hours",
        "minutesFilter": "Function that allows you to hide some specific minutes",
        "secondsFilter": "Function that allows you to hide some specific seconds",
        "view": "View specifying which columns will be shown",
        "periodUpdatesModelValue": "If user will change period it will automatically update model value. You can turn off it and am/pm switch will only change view.",
        "format": "Custom function that format model value as input text",
        "parse": "Custom function that parses text from VaInput",
        "manualInput": "Allows user to manually input date in VaInput",
        "isOpen": "Value for dropdown. If `true`, then dropdown is shown",
        "value": "The input value",
        "type": "Sets input type",
        "label": "Sets input label",
        "placeholder": "Sets input placeholder",
        "mask": "Sets input mask if using as string or options for mask",
        "color": "Sets input color",
        "removable": "Adds an button that clears the value",
        "tabindex": "Sets input tabindex",
        "returnRaw": "Sets possibility to return raw value",
        "clearValue": "Sets value that should be set after clearing",
        "autosize": "Sets textarea possibility to grow up automatically",
        "minRows": "Minimal count of lines",
        "maxRows": "Maximum count of lines",
        "rules": "Accepts an array of functions that take an input value as an argument and return either true / false or a string with an error message",
        "disabled": "Disable the input",
        "readonly": "Puts input in readonly state",
        "success": "Sets input state to success",
        "messages": "Displays a list of messages or message if using a string",
        "error": "Sets input state to error",
        "errorMessages": "Displays a list of error messages or message if using a string",
        "errorCount": "Number of error messages displayed",
        "clearable": "Adds a button to reset the input field value",
        "bordered": "Applies underscore",
        "focused": "Applies focus style",
        "canBeFocused": "If false, then input can not be focused using mouse or keyboard",
        "icon": "Sets an icon. The default icon position is on the right",
        "requiredMark": "Adds required mark to the label",
        "leftIcon": "Sets the icon position to the left"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaCounter": {
      "props": {
        "manualInput": "Allows user to manually input value",
        "label": "Sets component label",
        "color": "Sets component color",
        "min": "The minimum value to accept for this input",
        "max": "The maximum value to accept for this input",
        "step": "Step of changing input field values",
        "disabled": "Disable the component",
        "readonly": "Puts component in **readonly** state",
        "messages": "Displays a list of hint messages (or message if using a string)",
        "bordered": "Applies component `underscore` styling",
        "outline": "Applies component `outline` styling",
        "flat": "Applies `flat` styling of outside buttons",
        "rounded": "Adds rounded corners to outside buttons",
        "buttons": "Enables display of the component with external buttons",
        "width": "Sets a component width",
        "margins": "Sets the margin of the outside buttons",
        "increaseIcon": "Sets an increase icon",
        "decreaseIcon": "Sets a decrease icon"
      },
      "events": {
        "clickDecreaseButton": "The event is triggered when clicked decrease outside button",
        "clickIncreaseButton": "The event is triggered when clicked increase outside button",
        "clickDecreaseIcon": "The event is triggered when clicked decrease inner icon",
        "clickIncreaseIcon": "The event is triggered when clicked increase inner icon",
        "change": "The **change** input event is fired when input is submitted (when `manual-input` prop enabled)"
      },
      "slots": {
        "decreaseAction": "Adds an item instead of decrease icon or button",
        "increaseAction": "Adds an item instead of increase icon or button",
        "content": "Adds an item instead the input"
      }
    },
    "VaCarousel": {
      "props": {
        "arrows": "Show or hide next and previous button.",
        "autoscroll": "Enable autoscroll animation.",
        "autoscrollInterval": "Time in `ms`. Each `autoscroll-interval` next slide will be shown.",
        "autoscrollPauseDuration": "Pause animation duration in `ms` after user changed slide.",
        "effect": "Slide change effect",
        "height": "Slider height. Can be any valid CSS height.",
        "indicatorTrigger": "Event which will trigger indicator to change slide",
        "indicators": "Show or hide indicators at the bottom of slider",
        "infinite": "If true, after last slide first will be shown.",
        "items": "List of slide items. Can be any array. Default item should be an image src or object containing `src` and `alt`. You can use item later in `default` slot.",
        "loop": "If true, after last slide slider will scroll to first one through all items before.",
        "modelValue": "Slide index to be shown.",
        "vertical": "Change slider scroll orientation.",
        "fadeKeyframe": "Custom keyframe name for fade animation",
        "swipable": "Enables swiping behavior.",
        "swipeDirection": "Allowed directions for swiping: `all, horizontal, vertical, left, right, up, down`.",
        "swipeDistance": "Distance in `px` considered sufficient for the swipe event."
      },
      "events": {},
      "methods": {},
      "slots": {
        "default": "Custom style for slide item content",
        "indicator": "Custom style for indicator button",
        "nextArrow": "Custom style for next button",
        "prevArrow": "Custom style for previous button"
      }
    },
    "VaSpacer": {
      "props": {},
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaDropdown": {
      "props": {
        "anchorSelector": "Anchor CSS selector instead of passing slot",
        "innerAnchorSelector": "Anchor CSS selector inside passed slot",
        "autoPlacement": "If dropdown doesn't fit viewport, it will be placed automatically to fit viewport",
        "closeOnAnchorClick": "Dropdown will be closed when anchor is clicked",
        "closeOnClickOutside": "Dropdown will be closed when clicked outside dropdown content and anchor",
        "closeOnContentClick": "Dropdown will be closed when clicked inside dropdown content",
        "cursor": "Dropdown will be rendered relative to cursor position",
        "hoverOutTimeout": "Time in `ms` after mouse leave dropdown before it will be closed",
        "hoverOverTimeout": "Time in `ms` after mouse enter dropdown before it will be opened",
        "isContentHoverable": "If true, dropdown content will be hoverable",
        "keepAnchorWidth": "If true, dropdown content will have exact same width as anchor",
        "offset": "Dropdown content will be moved by main and cross axis according to current `placement`",
        "placement": "Dropdown content will be placed on `placement` side of anchor",
        "stickToEdges": "Dropdown will not be rendered outside of viewport. It will be moved in opposite direction",
        "trigger": "Action which will open and close dropdown",
        "target": "Dropdown content parent. Dropdown content will be attached to `target` to prevent overflow",
        "preventOverflow": "If true, dropdown will be teleported to `target` ignoring `overflow: hidden` on relative position elements"
      },
      "events": {
        "anchorClick": "The event is triggered when anchor is clicked",
        "clickOutside": "The event is triggered when clicked outside dropdown content and anchor",
        "contentClick": "The event is triggered when clicked inside dropdown content"
      },
      "methods": {},
      "slots": {}
    },
    "VaScrollContainer": {
      "props": {
        "horizontal": "Enables horizontal scrolling.",
        "vertical": "Enables vertical scrolling.",
        "rtl": "Moves scrollbar to the left side of the container (depends on `vertical` prop)."
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaSplit": {
      "props": {
        "vertical": "Changes `va-split` orientation to vertical.",
        "limits": "Min-max size limits of the each panel.",
        "maximization": "End panel size maximization via separator double click.",
        "maximizeStart": "Maximize size of the start panel instead of end one.",
        "snapping": "Marks array the splitter will be 'jumping' to.",
        "snapping-range": "Distance (% of components container size, px or rem) between splitter and snapping mark, which will call 'jumping' to it."
      },
      "events": {},
      "methods": {},
      "slots": {
        "dragger": "Changes default separator-dragger (`va-divider` component) to custom.",
        "start": "Start panel content.",
        "end": "End panel content."
      }
    },
    "VaVirtualScroller": {
      "props": {
        "bench": "Amount of items will be rendered before and after visible part of the list (for smooth scrolling).",
        "horizontal": "Sets component state to horizontal orientation.",
        "itemSize": "Average size (width or height) of the list items (can be number or string with \"px\"/\"rem\" value).",
        "wrapperSize": "Size (width or height) of the component's viewport (can be number or string with \"px\"/\"rem\" value).",
        "items": "Array of list items.",
        "table": "Switches component to work with table rows.",
        "trackBy": "Property name for identifying item.",
        "disable": "Disables virtual scrolling, all items are rendered."
      },
      "events": {},
      "methods": {},
      "slots": {
        "default": "Slot for repeating content template.",
        "content": "Slot to overwrite entire component's template (in case of complicated integrations)."
      }
    },
    "VaTreeView": {
      "props": {
        "nodes": "Tree nodes array.",
        "selectable": "Selectable.",
        "selectionType": "Selection type where is a `leaf` current and all children nodes, `independent` - single selectable nodes.",
        "valueBy": "The key to track the value.",
        "textBy": "The key to show the value of node item.",
        "trackBy": "The key to index nodes.",
        "iconBy": "The key where is node placed.",
        "disabledBy": "The key which describes the disabled property.",
        "childrenBy": "Child nodes key.",
        "expandedBy": "The where is placed the expanded property.",
        "expandAll": "Expand or hide all nodes by default.",
        "filter": "Tree view filter.",
        "filterMethod": "Custom tree view filter method.",
        "checked": "Array of pre-selected tree nodes.",
        "checkedBy": "The key to set the checked field in the tree view model.",
        "color": "The checkboxes color.",
        "expanded": "Array of pre-expanded tree nodes.",
        "expandNodeBy": "Click target to expand node, can be `node` or `leaf` icon."
      },
      "slots": {
        "notFound": "No matching nodes to the filter message.",
        "content": "Configurable node content.",
        "checkbox": "Checkbox icon placeholder.",
        "icon": "Additional icon placeholder.",
        "iconToggle": "Node leaf icon."
      },
      "events": {
        "updateChecked": "The array of checked tree nodes.",
        "updateExpanded": "The array of expanded tree nodes."
      }
    },
    "VaStepper": {
      "props": {
        "modelValue": "Value of current step starting from `0`.",
        "steps": "Array of step configs. `Label` is text displayed under each step in timeline, `Icon` if set, replaces step icon with specified icon, `disabled` makes step inaccessible without removing it from the timeline.",
        "navigationDisabled": "Disables navigation via pressing on steps.",
        "nextDisabled": "Disables navigation to steps further than `model-value`.",
        "controlsHidden": "Removes 'Back' and 'Next' buttons.",
        "vertical": "Changes stepper orientation to vertical.",
        "finishButtonHidden": "Hides 'Finish' button"
      },
      "events": {
        "finish": "Emits when 'Finish' button is getting pressed"
      },
      "slots": {
        "stepButton": "Replaces the step in timeline with provided template. Step slots are enumerable and should be used with step number postfix (i.e. step-button-0, step-button-1, etc). Slot scope properties and methods available: `{'{ setStep, nextStep, prevStep, step, isActive, isCompleted }'}`.",
        "stepContent": "Replaces step content with provided template. Content slots are enumerable and should be used with step number postfix (i.e. step-content-0, step-content-1, etc). Slot scope properties and methods available: `{'{ setStep, nextStep, prevStep }'}`.",
        "controls": "Inserts provided template after default controls. If you want to replace default controls set `controls-hidden` prop to `true`. Slot scope properties and methods available: `{'{ setStep, nextStep, prevStep }'}`.",
        "divider": "Replaces step divider in the timeline with provided template."
      },
      "methods": {
        "setStep": "Activates step at specified index.",
        "nextStep": "By default activates next step. If target step is disabled activates the step after it.",
        "prevStep": "By default activates previous step. If target step is disabled activates the step before it."
      }
    },
    "VaSkeleton": {
      "props": {
        "width": "Skeleton width.",
        "height": "Skeleton height.",
        "animation": "Skeleton animation. Can be `pulse`, `wave` or `none`.",
        "variant": "Skeleton variant. Can be `squared`, `rounded`, `circle` or `text`.",
        "lines": "Lines count if `variant` is `text`",
        "lineGap": "Gap between lines in `px`, `rem`, `em` if `variant` is `text`",
        "lastLineWidth": "Width of last line in `px`, `rem`, `em`, `%` if `variant` is `text`",
        "tag": "Skeleton tag."
      }
    },
    "VaConfig": {
      "props": {
        "components": "Components configuration object."
      }
    }
  },
  "menu": {
    "badges": {
      "wip": {
        "text": "wip",
        "title": "Work In Progress"
      },
      "new": {
        "text": "new",
        "title": "Recently added"
      },
      "updated": {
        "text": "updated",
        "title": "Recently updated"
      },
      "beta": {
        "text": "beta",
        "title": "Not production ready"
      }
    },
    "categories": {
      "view": "View",
      "form": "Form",
      "layout": "Layout",
      "navigation": "Navigation",
      "color": "Color",
      "utils": "Utility",
      "other": "Other"
    },
    "home": "Home",
    "introduction": "Introduction",
    "gettingStarted": "Getting Started",
    "styles": "Styles",
    "reset": "CSS Reset",
    "uiElements": "UI Elements",
    "contribution": "Contribution",
    "extensions": "Extensions",
    "documentationPage": "Documentation Guide",
    "affix": "Affix",
    "avatar": "Avatar",
    "breadcrumbs": "Breadcrumbs",
    "badge": "Badge",
    "card": "Card",
    "sidebar": "Sidebar",
    "rating": "Rating",
    "modal": "Modal",
    "tabs": "Tabs",
    "slider": "Slider",
    "switch": "Switch",
    "pagination": "Pagination",
    "fileUpload": "File Upload",
    "form": "Form",
    "hover": "Hover",
    "image": "Image",
    "aspectRatio": "Aspect Ratio",
    "optionList": "Option List",
    "divider": "Divider",
    "checkbox": "Checkbox",
    "button": "Button",
    "progressBar": "Progress Bar",
    "progressCircle": "Progress Circle",
    "infiniteScroll": "Infinite Scroll",
    "alert": "Alert",
    "icon": "Icon",
    "radio": "Radio",
    "collapse": "Collapse",
    "accordion": "Accordion",
    "chip": "Chip",
    "grid": "Grid",
    "input": "Input",
    "list": "List",
    "select": "Select",
    "parallax": "Parallax",
    "tailwind": "Tailwind Integration",
    "popover": "Popover",
    "backtop": "Backtop",
    "colorPicker": "Color Picker",
    "colorInput": "Color Input",
    "colorSlider": "Color Slider",
    "colorPalette": "Color Palette",
    "datePicker": "Date Picker",
    "dateInput": "Date Input",
    "buttonGroup": "Button Group",
    "buttonToggle": "Button Toggle",
    "buttonDropdown": "Button Dropdown",
    "appBar": "App Bar",
    "innerLoading": "Inner Loading",
    "installation": "Installation",
    "roadmap": "Roadmap",
    "accessibilityGuide": "Accessibility Guide",
    "configurationGuide": "Configuration Guide",
    "overview": "Overview",
    "github": "GitHub",
    "translation": "Translation",
    "browserSupport": "Browser Support",
    "table": "Table",
    "guide": "Guide",
    "iconsConfig": "Icons Config",
    "services": "Services",
    "globalConfig": "Global Config",
    "advancedIconsConfig": "Advanced Icons Config",
    "componentsConfig": "Components Config",
    "colorsConfig": "Colors Config",
    "breakpoints": "Breakpoint Service",
    "cssVariables": "CSS Variables",
    "smartHelpers": "Smart Helpers",
    "sidebarItem": "Sidebar Item",
    "navbar": "Navbar",
    "toast": "Toast",
    "typography": "Typography",
    "agGrid": "AG Grid Theme",
    "dataTable": "Data Table",
    "uiElementGuide": "UI Element Guide",
    "treeShakingRequirements": "Tree Shaking Requirements",
    "colors": "Colors",
    "timePicker": "Time Picker",
    "timeInput": "Time Input",
    "stepper": "Stepper",
    "carousel": "Carousel",
    "treeShaking": "Tree Shaking",
    "counter": "Counter",
    "nuxt": "Nuxt",
    "ssrGuide": "SSR",
    "kitchensink": "Kitchen Sink",
    "spacer": "Spacer",
    "dropdown": "Dropdown",
    "scrollContainer": "Scroll Container",
    "split": "Split",
    "virtualScroller": "Virtual Scroller",
    "treeView": "Tree view",
    "team": "Meet The Team",
    "i18n": "I18n",
    "webComponents": "Web Components",
    "colorsClasses": "Colors Classes",
    "skeleton": "Skeleton",
    "unocss": "UnoCSS Integration",
    "testing": "Testing",
    "value": "Value",
    "config": "Config",
    "confirm": "Confirm",
    "openOptionsMenu": "Open options menu",
    "closeOptionsMenu": "Close options menu"
  },
  "all": {
    "examples": "Examples",
    "accessibility": "Accessibility",
    "api": "API",
    "methods": "Methods",
    "options": "Options",
    "cssVariables": "CSS Variables",
    "faq": "FAQ",
    "code": {
      "or": "or",
      "folderStructure": {
        "componentDirectory": "component directory",
        "componentItself": "component itself",
        "componentDemo": "component demo",
        "componentTests": "component tests"
      },
      "npmScripts": {
        "runVueBookDevServer": "Run vue-book dev server",
        "generateFilesForComponent": "Generate all needed files for component (component itself, docs, tests)",
        "buildVueBook": "Build vue-book bundle",
        "lint": "Lint everything",
        "runTests": "Run tests",
        "runVuepressDevServer": "Run vuepress dev server",
        "buildVuepress": "Build vuepress bundle"
      },
      "aliasAndFontExample": {
        "twitterColor": "Twitter blue brand color",
        "vuesticColor": "Vuestic green brand color",
        "from": "from",
        "alias": "alias",
        "font": "font",
        "to": "to"
      }
    },
    "examplesTexts": {
      "button": "Your button"
    },
    "alerts": {
      "beta": "This feature is currently in test mode. You can use it, but there can be unexpected bugs or we can change API in future. Help use improve it!"
    }
  },
  "docsNavigation": {
    "copyCode": "Copy code",
    "copyCopied": "Copied",
    "copyFailure": "Permission failure!",
    "openGithub": "Open in GitHub",
    "openCodeSandbox": "Open in CodeSandbox"
  },
  "docsExample": {
    "showCode": "Show Code",
    "hideCode": "Hide Code"
  },
  "kitchensink": {
    "title": "Kitchensink",
    "description": "At this page you can see examples for all components, this is a great place to get started with `Vuestic`. For even more examples you can check `UI Elements` tab in menu.",
    "seeMore": "See more"
  },
  "documentationPage": {
    "compilesTo": "Compiles to:",
    "title": "Working with documentation",
    "description": "This page is intended for Vuestic-UI contributors. It explains the ways to create and modify the documentation.",
    "introduction": {
      "title": "Introduction",
      "description": "Instead of using the established documentation system, such as [vue-press](https://vuepress.vuejs.org/)[[target=_blank]] or [docsify](https://docsify.js.org/#/)[[target=_blank]], we decided to build a system specifically tailored for Vuestic. It’s meant to provide an excellent flexibility for the future growth."
    },
    "pageConfig": {
      "title": "Page Config",
      "descriptionStructure": "The page configuration must be located in a specific path, which is similar to the page URL. The folder with the page configuration must include the `components` folders for blocks with components and` examples` for blocks with examples. These folders should contain the `* .vue` files. An example of the structure and directory of the configuration folder for the current page:",
      "descriptionFile": "The configuration file contains `config`, which is an array of page blocks that perform specific functions."
    },
    "generators": {
      "title": "Generators",
      "description": "We have created custom generators to facilitate and automate the creation of new pages..",
      "generateDocsPage": "* The `yarn generate:docspage` command will generate a page with the specified name in the category selected from the list..",
      "generateComponent": "* The `yarn generate:component` command will generate a complete structure for a new component: create a component, connect it to a library, make a configuration file for it, and add a clean example to the examples folder."
    },
    "blocktypes": {
      "title": "Block Types",
      "descriptionHelper": "The documentation has a flat structure - a list of blocks. To use blocks, you need to create an object of the `PageGenerationHelper` class, passing the path to the current folder to the constructor. After creating the object, call the methods that will return the required block.",
      "description": "Translation strings are structured in a flat manner — just a list of blocks. Markdown is supported for all the text blocks. Here is the list of blocks you can use:",
      "titleBlock": {
        "title": "Title",
        "text": "Page title is **mandatory** for documentation pages.",
        "example": "Title (example)"
      },
      "subtitle": {
        "title": "Subtitle",
        "text": "Used for examples, API, FAQ. Think `h2`.",
        "example": "Subtitle (example)"
      },
      "headline": {
        "title": "Headline",
        "text": "The `headline` block is used to mark the titles of examples and the FAQs. Think `h3`.",
        "example": "Headline (example)"
      },
      "paragraph": {
        "title": "Paragraph",
        "text": "Should be used for all the regular text blocks. For links to external resources you can specify the **target** attribute in markdown markup as follows: `[name](href)[[target=_blank]]`.",
        "example": "Paragraph (example). Link in the text leading to an external resource: [markdown-it-attrs](https://github.com/arve0/markdown-it-attrs)[[target=_blank]]."
      },
      "list": {
        "title": "List",
        "text": "Should be used for lists.",
        "inCode": "Here's the resulting markup for the code above:",
        "listExample1": "Value of list item 1",
        "listExample2": "Value of list item 2"
      },
      "code": {
        "title": "Code",
        "text": "For the code previews we use [highlight.js](https://highlightjs.org/)[[target=_blank]]."
      },
      "example": {
        "title": "Example",
        "text": "Shows a component with code preview. Component can use all global services: css classes, colors etc. Mostly used in the ui-elements section to show examples of use."
      },
      "component": {
        "title": "Component",
        "text": "Shows a component that has some logic and is not an example of use."
      },
      "api": {
        "title": "API",
        "text": "The API-documentation for a component. Combines component options with manual declarations."
      },
      "table": {
        "title": "Table",
        "text": "Used to display tabular data. Requires a flat column-definitions array and yet another two-dimensional-array with the actual cells' data."
      },
      "link": {
        "title": "Link",
        "text": "Used for relative (local) links processed by the router (with *options* or without them).",
        "exampleWithOptions": "Link with options (example)",
        "example": "Link (example)"
      },
      "alert": {
        "title": "Alert",
        "text": "Used to display an important message.",
        "example": "Alert (example)"
      }
    },
    "apiOptionsTitle": "API Options",
    "apiOptions": {
      "text": "We can't go too far with the help of automated code analysis. Most of the API documentation has to be declared explicitly. API options allow you to configure things such as: version, props, events, methods and slots.",
      "version": "`version` - specifies the version of Vuestic UI that this component or feature has been introduced at.",
      "types": "`types` - the documentation engine can automatically infer simple prop types (such as `String`, `Number`, etc.) right from the component options. Almost any other type should be defined explicitly.",
      "hidden": "`hidden` - allows you to hide the prop from the API section of the documentation page. Might become quite useful for some props which are intended for internal use solely."
    }
  },
  "avatar": {
    "title": "Avatar",
    "summaryText": "`va-avatar` component is typically used for user profile pictures. The component  helps you display it in different sizes consistently throughout your web application.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "By default `va-avatar` is displayed as a circle container."
      },
      "size": {
        "title": "Different sizes",
        "text": "The `size` prop allows you to specify custom size for an avatar. By default, font size will be scaled depending on the value of the `size` prop. But you can use the `font-size` prop to force text size you need."
      },
      "color": {
        "title": "Different colors",
        "text": "The `color` prop is used to set the color of the component and `text-color` for its textual content."
      },
      "loading": {
        "title": "Loading",
        "text": "The `loading` prop sets a loading state for the component via spinner icon."
      },
      "withImage": {
        "title": "With image",
        "text": "The `src` prop is used to add custom image to a component."
      },
      "withBadge": {
        "title": "With badge",
        "text": "You may combine `va-avatar` with `va-badge`, for example, to output amount of the new notifications."
      },
      "square": {
        "title": "Square",
        "text": "The `square` prop is used to change components form from round to square."
      },
      "withIcon": {
        "title": "With icon",
        "text": "The `icon` prop is used to display icon inside an avatar."
      },
      "group": {
        "title": "Grouped",
        "text": "You can use `va-avatar-group` component to group avatars."
      },
      "fallback": {
        "title": "Fallback",
        "text": "You can set fallback image."
      },
      "gravatarIntegration": {
        "title": "Integrate with Gravatar",
        "text": "You can easily use Gravatar with `VaAvatar` component."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/tree/develop/packages/ui/src/components/va-avatar/_variables.scss)[[target=_blank]]"
  },
  "affix": {
    "title": "Affix",
    "summaryText": "The affix component is created to fix any content in a proper position relative to a container.",
    "examples": {
      "top": {
        "title": "Fixed at the top"
      },
      "bottom": {
        "title": "Fixed at the bottom"
      },
      "default": {
        "title": "Fixes element relative to custom container"
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-affix/_variables.scss)[[target=_blank]]"
  },
  "breadcrumbs": {
    "title": "Breadcrumbs",
    "text": "The breadcrumbs component is used for application navigation. It shows the location of the current page within the navigation hierarchy. It’s used with `va-breadcrumb-item` components.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "This is a basic usage of the `va-breadcrumbs` component."
      },
      "color": {
        "title": "Color",
        "text": "Sets color of breadcrumbs content"
      },
      "align": {
        "title": "Align",
        "text": "Changes component position on the page."
      },
      "separator": {
        "title": "Separator",
        "text": "You can use your own separator and customize its color."
      },
      "activeColor": {
        "title": "Active color",
        "text": "Color of active `va-breadcrumb-item` elements."
      },
      "item": {
        "title": "Item",
        "text": "Some `va-breadcrumbs-item` props examples."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-breadcrumbs/_variables.scss)[[target=_blank]]",
    "api": {
      "item": {
        "title": "Item API",
        "text": "API for `va-breadcrumb-item` component."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "Can `separator` prop work with `separator` slot?",
          "answer": "No, slot has higher priority, prop is ignored when slot is used. Same is legit for `label` of `va-breadcrumbs-item`, it is ignored when you use `default` slot."
        }
      ]
    }
  },
  "badge": {
    "title": "Badge",
    "summaryText": "VaBadge is used to highlight information related to other element, such as missed notifications near the user's avatar.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Useful for information views and tables."
      },
      "position": {
        "title": "Position",
        "text": "The `placement` allows you to set placement of the badge relatively to the base element. Available values: `top/bottom/left/right - start/center/end`. The `offset` prop allows you to amend the selected position - it moves badge forward or backward relatively to the main axis (`top/bottom/left/right`)."
      },
      "dot": {
        "title": "Dot",
        "text": "The `dot` property puts the component in a minimalist mode in order to accentuate the base element."
      },
      "transparent": {
        "title": "Transparent",
        "text": "The `transparent` property adds transparency to the component."
      },
      "overlap": {
        "title": "Overlap",
        "text": "The `overlap` property allows badge to overlap the base element."
      },
      "color": {
        "title": "Color",
        "text": "The `color` property sets the color of the component (respectively, `text-color` sets the color of the content), both preset and HEX colors are available."
      },
      "withOtherComponents": {
        "title": "Usage with other components",
        "text": "By combining a component with others, you can add information to them or focus attention on them."
      },
      "noContent": {
        "title": "Without content",
        "text": "By default, the component is hidden unless content is passed to it via a slot or the `text` property. The `visible-empty` property allows displaying an empty component as a colored square."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/tree/develop/packages/ui/src/components/va-badge/_variables.scss)[[target=_blank]]"
  },
  "button": {
    "title": "Button",
    "summaryText": "The `va-button` component replaces the standard HTML button. It offers multiple built-in style presets and allows user to change different attributes (size, color, opacity etc.) manually.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Just a simple button."
      },
      "presets": {
        "title": "Presets",
        "text": "The `preset` prop is used to change the build-in style of the component."
      },
      "withColor": {
        "title": "Colors",
        "text": "The `color` prop is used to change the color of the component."
      },
      "withGradient": {
        "title": "Gradient",
        "text": "Used to apply a gradient style to a background (only if `backgroundOpacity` prop is equals `1`)."
      },
      "withTextColor": {
        "title": "Text colors",
        "text": "The `text-color` prop is used to change the color of the button text."
      },
      "withSize": {
        "title": "Sizes",
        "text": "The `size` prop is used to fit your button to any place on your web page."
      },
      "withRound": {
        "title": "Rounded",
        "text": "You can make your button rounded using `round` prop."
      },
      "withOutline": {
        "title": "Outlined",
        "text": "You can make the button outlined using prop `border-color`."
      },
      "withIcon": {
        "title": "Add icons",
        "text": "You can add icons to `va-button` with 2 different props: `icon` and `icon-right`. Also you can specify color for them via `icon-color` prop."
      },
      "withLoading": {
        "title": "Loading state",
        "text": "You can add loading state to the button."
      },
      "disabled": {
        "title": "Disabled",
        "text": "The `disabled` prop prevents any actions with button."
      },
      "behavior": {
        "title": "Behavior",
        "text": "You can change hover or pressed behavior of the button via `hover`/`pressedBehavior`, `hover`/`pressedMaskColor` and `hover`/`pressedOpacity` props."
      },
      "tag": {
        "title": "Tag",
        "text": "You can change the tag of the button wrapper to any other necessary one. However, we recommend to use other properties. For example, if the `href` property is set, then `button` will be replaced with `a`, and if the value of the `to` property is passed, the button tag will automatically change to `router-link`."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-button/_variables.scss)[[target=_blank]]"
  },
  "slider": {
    "title": "Slider",
    "summaryText": "The slider component is a visualization for the number input. A user can drag a slider within a fixed range to get the required value.",
    "accessibility": "The component covers all the requirements of [w3 slider template](https://www.w3.org/WAI/ARIA/apg/patterns/slider/#wai-ariaroles,states,andproperties)[[target=_blank]]. It has [role=\"slider\"](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/slider_role)[[target=_blank]] and the following attributes: [aria-valuemin](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuemin)[[target=_blank]], [aria-valuemax](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuemax)[[target=_blank]], [aria-valuenow](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuenow)[[target=_blank]], [aria-label](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label)[[target=_blank]], [aria-orientation](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-orientation)[[target=_blank]], [aria-disabled](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-disabled)[[target=_blank]], [aria-readonly](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-readonly)[[target=_blank]].",
    "examples": {
      "default": {
        "title": "Default",
        "text": "This is basic usage of the slider component."
      },
      "color": {
        "title": "Color",
        "text": "You can customize the color of the slider."
      },
      "minMax": {
        "title": "Minimum and maximum values",
        "text": "You can set a range between min and max values."
      },
      "state": {
        "title": "State",
        "text": "Slider can be in disabled or readonly state."
      },
      "range": {
        "title": "Range slider",
        "text": "You can set a range of values."
      },
      "step": {
        "title": "Step",
        "text": "Step can be changed."
      },
      "pins": {
        "title": "Pins",
        "text": "Display markers on slider track."
      },
      "label": {
        "title": "Label",
        "text": "Switch label can have an inverted position or a custom color."
      },
      "slots": {
        "title": "Slots",
        "text": "You can add inputs before and after the slider using 'append' or 'prepend' slot name. Also default label can be replaced using 'label' slot."
      },
      "icon": {
        "title": "Icon",
        "text": "You can insert icon at the start or end of slider."
      },
      "track": {
        "title": "Track",
        "text": "Track can be hidden or have custom color."
      },
      "trackLabel": {
        "title": "Track label",
        "text": "You can show track label and overwrite it's view."
      },
      "vertical": {
        "title": "Vertical",
        "text": "Vertical state of slider."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-slider/_variables.scss)[[target=_blank]]"
  },
  "switch": {
    "title": "Switch",
    "summaryText": "Switch component turns on or off the state of your custom option",
    "examples": {
      "default": {
        "title": "Default",
        "text": "This is basic usage of switch component."
      },
      "color": {
        "title": "Color",
        "text": "You can customize color."
      },
      "state": {
        "title": "State",
        "text": "Switch can be in disabled or readonly state."
      },
      "label": {
        "title": "Label",
        "text": "Switch can be labeled on the left or on the right."
      },
      "customLabel": {
        "title": "Custom Label",
        "text": "You can label any state of switch."
      },
      "innerLabel": {
        "title": "Inner Label",
        "text": "You may put a label inside of a switch."
      },
      "size": {
        "title": "Size",
        "text": "Switches have 3 different sizes."
      },
      "loading": {
        "title": "Loading",
        "text": "You can mark a pending state of switch."
      },
      "customValue": {
        "title": "Custom Values",
        "text": "You can set custom values for true and false state of the component."
      },
      "indeterminate": {
        "title": "Indeterminate"
      },
      "error": {
        "title": "Error",
        "text": "Switch has an error style."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-switch/_variables.scss)[[target=_blank]]"
  },
  "rating": {
    "title": "Rating",
    "summaryText": "The `va-rating` component is a simple yet powerful element when it comes to gathering users feedback. Just in a few lines of code it can provide you with users ratings about your product or application.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "The `va-rating` component has a simple interface to collect user feedback."
      },
      "color": {
        "title": "Colors",
        "text": "With `color` prop you can change the color of the component."
      },
      "size": {
        "title": "Sizes",
        "text": "Using `size` prop specify custom size for an `va-rating` component."
      },
      "hover": {
        "title": "Hover",
        "text": "By using `hover` prop you can see visual changes of value before click."
      },
      "halves": {
        "title": "Halves",
        "text": "You can divide your `va-rating` component values on halves."
      },
      "texts": {
        "title": "Texts",
        "text": "A component can be covered by different custom labels for each value."
      },
      "clearable": {
        "title": "Clearable",
        "text": "Selecting current value again will clear the component."
      },
      "numbers": {
        "title": "Numbers",
        "text": "Want to see numbers instead of icons? We got you covered."
      },
      "itemSlot": {
        "title": "Item slot",
        "text": "You can pass own html to the component using `item` slot. We still handle user events and accessibility, but you can change appearance."
      },
      "customIcons": {
        "title": "Custom Icons",
        "text": "Providing this prop to component allows you to add custom icons."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-rating/_variables.scss)[[target=_blank]]",
    "faq": {
      "questions": [
        {
          "question": "Is rating component keyboard accessible?",
          "answer": "Yes, you can use `Tab` `(Shift+Tab)` to move between icons and press Enter to submit value. Or you can use arrow keys (Left and Right) to change rating value"
        },
        {
          "question": "Can I use every other prop in combination with **numbers** prop?",
          "answer": "Yes, all props are compatible between each other."
        }
      ]
    }
  },
  "toast": {
    "title": "Toast",
    "summaryText": "Component for sending a notification to the user. To make it easier to create toast we have a shorthands. For options API it is `$vaToast`. For composition api we have `useToast` hook. Hook and global object have similar API.",
    "optionsAPI": "In options API you can use VaToastPlugin (automatically installed with createVuestic). `$vaToast` have a few methods: init, close, closeAll.",
    "compositionAPI": "In composition API you can use `useToast` hook.",
    "toastOptionsHeader": "Init Options",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default, run this component in events by using the `init` method with a setting object."
      },
      "color": {
        "title": "Color",
        "text": "Set different colors using `color` prop. You can either user theme string HEX color value."
      },
      "offset": {
        "title": "Offset",
        "text": "Use `offset` property to set the offset of the toast."
      },
      "position": {
        "title": "Position",
        "text": "Use `position` property to set the custom position of the toast. Available are `top-right`, `top-left`, `bottom-right`, `bottom-left`."
      },
      "close": {
        "title": "Close",
        "text": "You can use close method to close the notification and you can set custom onClose event."
      },
      "click": {
        "title": "Click",
        "text": "You can set custom onClick event to handle the click on button."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-toast/_variables.scss)[[target=_blank]]",
    "faq": {
      "questions": [
        {
          "question": "What is the difference between a component and a service?",
          "answer": "The difference is in implementation. The service behaves more flexibly and it is easier to bind it to certain events than to render the whole element. \n Each prop you provide to the component you can provide to the service too by using the setting object."
        }
      ]
    }
  },
  "modal": {
    "title": "Modal",
    "summaryText": "Classic modal overlay which represents a dialog box or other interactive component, such as a dismissible alert, sub-window, etc.",
    "examples": {
      "overview": {
        "title": "Overview",
        "text": "`va-modal`, by default, has the **OK** and **Cancel** buttons in the footer. You can provide a custom message and title with the `message` and `title` props respectively.\n\n`va-modal` supports close on **Esc** (enabled by default) and close on overlay click (enabled by default). These features may be disabled by setting the props `no-esc-dismiss` and `no-outside-dismiss` respectively, or `no-dismiss` as a shorthand to disable both of them."
      },
      "stateful": {
        "title": "Stateful",
        "text": "By default `va-modal` is stateless. You can change it by setting the `stateful` prop"
      },
      "fullscreen": {
        "title": "Full screen",
        "text": "Add the `fullscreen` prop to cover the whole page.\n\nNote that `va-modal` is full screen on mobile viewports by default. You can change it by setting the `mobile-fullscreen` prop to `false`."
      },
      "modalSizing": {
        "title": "Modal sizing",
        "text": "Modals have three optional sizes, available via the prop `size`. These sizes kick in at certain breakpoints to avoid horizontal scrollbars on narrower viewports. Valid optional sizes are `small`, `medium` (default), and `large`."
      },
      "toggleVisibility": {
        "title": "Toggle modal visibility",
        "text": "There are several methods that you can employ to toggle the visibility of `va-modal`.",
        "sections": [
          {
            "title": "Using `v-model` property",
            "text": "`v-model` property is always automatically synced with `va-modal` visible state and you can show/hide using `v-model`."
          },
          {
            "title": "Using `show()`, `hide()`, and `toggle()` component methods",
            "text": "You can access modal using `ref` attribute and then call the `show()`, `hide()` or `toggle()` methods."
          }
        ]
      },
      "customContent": {
        "title": "Custom content",
        "text": "You can remove default padding with `no-padding` prop and change default action buttons with `content` slot."
      },
      "anchor": {
        "title": "Slot: `anchor`",
        "text": "Using the `anchor` slot, the user can access the `show()`, `hide()` and `toggle()` methods."
      },
      "disableAnimation": {
        "title": "Disable open and close animation",
        "text": "To disable the transition/animation when modal opens and closes, set the prop `without-transitions`."
      },
      "hidingOverlay": {
        "title": "Hiding the overlay",
        "text": "Hide the modal's overlay via setting the `overlay` prop to `false`.\n\nNote that clicking outside of the modal will still close the modal even though the overlay is hidden. You can disable this behavior by setting the `no-outside-dismiss` prop on `va-modal`."
      },
      "blurredOverlay": {
        "title": "Blurred overlay",
        "text": "Use the `blur` CSS filter for the overlay layer by setting the `blur` property to `true`. You can override the root CSS variable `--va-modal-overlay-background-blur-radius` to set your own blur radius."
      },
      "scrollingLongContent": {
        "title": "Scrolling long content",
        "text": "When modals become too long for the user's viewport or device, they allow the scrolling of the modal body. Try the demo below to see what we mean.\n\nYou can also allow scrolling only content in modal via setting the `fixed-layout` prop. Title and actions will be fixed."
      },
      "customization": {
        "title": "Customization",
        "text": "`va-modal` provides several slots (`default`, `header` and `footer`), that you can use to customize the content of various sections of the modal.\n\nYou can set custom text for **Cancel** and **Ok** buttons via `ok-text` and `cancel-text` props respectively, or you can hide them via `hide-default-actions` prop.\n\n`va-modal` also supports custom `overlay-opacity` as well as `z-index`, `max-width` and `max-height` for a modal."
      },
      "nestedModals": {
        "title": "Nested modals",
        "text": "Modals can be nested: you can open one modal from another."
      },
      "functionalApi": {
        "title": "Modal functional API",
        "text": "To make it easier to create modal we have a shorthands. For options API it is `$vaModal` that provides the VaModalPlugin (automatically installed with createVuestic). For composition Api we have `useModal` hook. Hook and global object have similar API."
      },
      "beforeClose": {
        "title": "Before close",
        "text": "You can set custom before close event to prevent modal from closing."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-modal/_variables.scss)[[target=_blank]]"
  },
  "pagination": {
    "title": "Pagination",
    "summaryText": "The pagination component is used to split big data sets into chunks so that it's simpler for users to use provided information.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "By default the component is displayed as a list of pages with length equal to `pages` prop value."
      },
      "colors": {
        "title": "Color",
        "text": "Set different colors using `color` prop. You can either user theme string HEX color value."
      },
      "sizes": {
        "title": "Size",
        "text": "Utilize `size` prop in order to make component fit your needs. Refer to API section for more in-depth explanation of how to use `size` prop."
      },
      "icons": {
        "title": "Custom icons",
        "text": "Feeling the need to change icons for arrows? We have 4 props to enable full customization of `va-pagination` component."
      },
      "limitVisible": {
        "title": "Limiting the length",
        "text": "By using `visible-pages` prop you can set the amount of pages visible on screen."
      },
      "withInput": {
        "title": "Using HTML input instead of pages",
        "text": "With `input` prop you can have input with arrow buttons instead of default pagination."
      },
      "totalAndPageSize": {
        "title": "Using `total` and `page-size`",
        "text": "You can provide `total` and `page-size` props to `va-pagination` component and let it calculate the length of pagination itself. The value of the component in this case would be equal to the number of the first item at the selected page."
      },
      "prevAndNextLinks": {
        "title": "Custom links instead of icons",
        "text": "The `prevPageLink` and `nextPageLink` slots allow you to set a different look to the buttons to go to the previous/next page."
      },
      "gapped": {
        "title": "Gaps",
        "text": "`gapped` prop allows you to add distance between pagination items."
      },
      "presets": {
        "title": "Presets",
        "text": "We provide several built-in style presets: `default`, `primary`, `secondary` (inherited from [VaButton](/ui-elements/button)). You can switch between them via `buttons-preset` prop."
      },
      "bordered": {
        "title": "Borders",
        "text": "Specifying `border-color` prop will add borders to the pagination items."
      },
      "activeColor": {
        "title": "Active pagination button color",
        "text": "You can specify color of the current pagination item via `active-page-color` prop."
      },
      "rounded": {
        "title": "Rounded",
        "text": "`rounded` prop makes your pagination items rounded."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-pagination/_variables.scss)[[target=_blank]]",
    "faq": {
      "questions": [
        {
          "question": "What will happen if both `pages` and `total` props are set?",
          "answer": "The error will be thrown into the console. Component is meant to be used only in one of these modes."
        },
        {
          "question": "Can I use `total` and `input` props together?",
          "answer": "Yep. In v-model you'll get item number instead of page number."
        }
      ]
    }
  },
  "tabs": {
    "title": "Tabs",
    "summaryText": "The `va-tabs` component can be used as an on-page navigation offering with a rich variety of visual customizations and usage flexibility.",
    "examples": {
      "default": {
        "title": "Default usage",
        "text": "By default it's displayed as a horizontal list of `va-tab` items"
      },
      "pagination": {
        "title": "With pagination arrows",
        "text": "When wrapper width is less then tabs width, pagination arrows are shown"
      },
      "vertical": {
        "title": "Vertical alignment",
        "text": "By using `vertical` prop alignment of `va-tabs` can be customized"
      },
      "stateful": {
        "title": "Without value",
        "text": "Sometimes `v-model` is too much and in that case using `stateful` prop you can delegate state handling to the component itself"
      },
      "color": {
        "title": "Color",
        "text": "Set different colors using the `color` prop. You can either use a theme string or the HEX color value. Inactive tabs have `inherit` color. If you need to change inactive tabs color, you can set color for va-tabs using CSS."
      },
      "content": {
        "title": "Content",
        "text": "Tabs with a custom content in the default slot."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-tabs/_variables.scss)[[target=_blank]]",
    "faq": {
      "questions": [
        {
          "question": "How can I map content to tabs so that only specific tab content will be displayed?",
          "answer": "We have this functionality in our nearest plans, but for now you could use `v-model` value to map the content yourself"
        }
      ]
    }
  },
  "fileUpload": {
    "title": "File Upload",
    "summaryText": "The `va-file-upload` component is an input for selecting and uploading files with a richer interface than the default one.",
    "examples": {
      "default": {
        "title": "Default usage",
        "text": "By default it’s displayed as a simple button to upload files."
      },
      "dragAndDrop": {
        "title": "Drag & Drop",
        "text": "The `dropzone` prop is used to add drag and drop possibility to the `va-file-upload` component",
        "exampleText": "This is slot, click or drag'n'drop file to upload"
      },
      "slots": {
        "title": "Slot",
        "text": "Allows to create custom file upload area."
      },
      "validation": {
        "title": "Specify file types",
        "text": "Add `file-types` prop with allowed extensions to add file types validation"
      },
      "gallery": {
        "title": "As gallery",
        "text": "With `type === gallery` prop you can show user picture preview of uploaded files"
      },
      "undo": {
        "title": "Canceling the removing action",
        "description": "Add the `undo` property to cancel the removing action, and with a `undo-duration` property set the time to cancel removing",
        "galleryViewLabel": "Enable gallery view",
        "durationFieldLabel": "Undo duration",
        "cancelFieldLabel": "Cancel button text",
        "deletedFileFieldLabel": "Deleted file message"
      },
      "disabled": {
        "title": "Disabled",
        "description": "Use the `disabled` prop to disable any actions with a component"
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-file-upload/_variables.scss)[[target=_blank]]"
  },
  "divider": {
    "title": "Divider",
    "summaryText": "The `va-divider` component is used to separate sections of lists or layouts.",
    "accessibility": "Has a [role=\"separator\"](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/separator_role)[[target=_blank]]. Its attribute [aria-orientation](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-orientation)[[target=_blank]] depends on `vertical` property. Completely ignored by screen readers because of [aria-hidden=\"true\"](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-hidden)[[target=_blank]] attribute.",
    "examples": {
      "default": {
        "title": "Simple divider",
        "text": "Dividers in their simplest form display a horizontal line."
      },
      "customContent": {
        "title": "Custom content",
        "text": "You can customize the content on the divider line. Also you can set position of the content by setting the `orientation` property to `left`, `center` or `right`."
      },
      "inset": {
        "title": "Inset divider",
        "text": "Add the `inset` attribute in order to set whether or not the divider is an inset divider."
      },
      "vertical": {
        "title": "Vertical divider",
        "text": "Add the `vertical` attribute in order to set whether or not the divider is vertically-oriented."
      },
      "dashed": {
        "title": "Dashed divider",
        "text": "Add the `dashed` attribute in order to set whether or not the divider line is dashed."
      },
      "withList": {
        "title": "Divider with lists",
        "text": "Dividers perfectly work with `va-list`."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-divider/_variables.scss)[[target=_blank]]"
  },
  "form": {
    "title": "Form",
    "summaryText": "Need more advanced validation than just `type=\"email\"` over your input elements? **`va-form`** has a solution to offer.",
    "examples": {
      "default": {
        "title": "Default usage",
        "text": "All elements have `rules` prop which offers flexible solutions when it comes to elements validation. By using this prop you’ll be able to specify exact cases when the field is *valid* or *invalid*."
      },
      "advanced": {
        "title": "Trigger validation",
        "text": "You can trigger validation from a parent component by using the `validate()` method of the `va-form` component."
      },
      "submit": {
        "title": "Form submit",
        "text": "You can fire the `submit` event of a `va-form` component: for this you need to set `tag=\"form\"` to the `va-form` and have at least one inner button with `type=\"submit\"`."
      },
      "withInputs": {
        "title": "With inputs"
      }
    }
  },
  "hover": {
    "title": "Hover",
    "summaryText": "The `va-hover` component provides easy access to hover states for any component. To work with hover states you can use either `v-model` or slot-scoped `hover` property.",
    "examples": {
      "slot": {
        "title": "Slot based access",
        "text": "You are also free to use Vue default slot."
      },
      "vModel": {
        "title": "Default usage",
        "text": "You can use `v-model` to get access to hover state."
      },
      "disabled": {
        "title": "Disabled",
        "text": "Won't change value if disabled."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "Can I wrap multiple elements with `va-hover`?",
          "answer": "Yes, but they will share the hover state value."
        }
      ]
    }
  },
  "card": {
    "title": "Card",
    "summaryText": "The `va-card` is a multipurpose representative component that can be used for anything from links to articles. It has some helper components to make markup easier.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "This is default `va-card` implementation using `va-card-title`, `va-card-content` and `va-card-actions` helper components."
      },
      "tag": {
        "title": "Tag",
        "text": "Changed tag to `<b>`"
      },
      "borderAndShape": {
        "title": "Border, shadow and shape"
      },
      "disabled": {
        "title": "Disabled"
      },
      "link": {
        "title": "Card as link"
      },
      "stripe": {
        "title": "Stripe"
      },
      "colorAndGradient": {
        "title": "Color and gradient"
      },
      "image": {
        "title": "Image"
      },
      "ratio": {
        "title": "Aspect ratio",
        "text": "Combination of the `va-card` and `va-aspect-ratio` allows you to set aspect ratio of the component."
      },
      "actions": {
        "title": "Actions",
        "purpose": "The `VaCardActions` component is designed to apply margins and alignment to content (`VaButtons` expected).",
        "props": "Two properties can be passed: `align` (**string**, specify how to align actions) and `vertical` (**boolean**, display actions one below the other).",
        "values": "Valid values for `align`: left, center, right, between, around, stretch."
      },
      "horizontal": {
        "title": "Horizontal"
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-card/_variables.scss)[[target=_blank]]",
    "faq": {
      "questions": [
        {
          "question": "Can I use `va-card` without helper components?",
          "answer": "Yes, if you don't like our styling preset, you are free to use your own."
        },
        {
          "question": "Should I manually set tag if i use link attributes?",
          "answer": "No, we will do it for you. If tag is not set, but `href` is, component tag will be `<a>`, if any of router-link prop is set, it will be `<router-link>`."
        }
      ]
    }
  },
  "sidebar": {
    "title": "Sidebar",
    "summaryText": "`va-sidebar` is a column to store navigation or secondary information of your app.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Default usage of `va-sidebar`"
      },
      "minimized": {
        "title": "Minimized",
        "text": "You can minimize sidebar using `minimized` prop"
      },
      "hoverable": {
        "title": "Hoverable",
        "text": "Manage your sidebar state using `hoverable` prop. It allows to expand 'va-sidebar' on hover."
      },
      "position": {
        "title": "Position",
        "text": "Align `va-sidebar` to the left or right."
      },
      "width": {
        "title": "Width",
        "text": "Define custom width of sidebar in maximixed state."
      },
      "vModel": {
        "title": "V-model",
        "text": "Use v-model to enable/disable `va-sidebar`."
      },
      "minimizedWidth": {
        "title": "Minimized width",
        "text": "Width of `va-sidebar` when minimized."
      },
      "color": {
        "title": "Color",
        "text": "Change background color of a sidebar."
      },
      "gradient": {
        "title": "Gradient background",
        "text": "You can make Navbar background gradient"
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-sidebar/_variables.scss)[[target=_blank]]",
    "faq": {
      "questions": [
        {
          "question": "What if `minimized` conflicts with `hoverable`?",
          "answer": "No conflict there, `minimized` has higher priority. If it's `true`, hover will not expand sidebar."
        }
      ]
    }
  },
  "sidebarItem": {
    "title": "Sidebar item",
    "summaryText": "Used as link in your `VaSidebar`.",
    "examples": {
      "simple": {
        "title": "Simple usage example",
        "text": "`VaSidebarItem` is used with `VaSidebarContent` (to create paddings) and `VaSidebarTitle` (to fill all remaining width in `VaSidebarItem`)"
      },
      "colors": {
        "title": "Colors",
        "text": "You can change sidebar default colors"
      },
      "active": {
        "title": "Highlight active `VaSidebarItem`",
        "text": "It is possible to have multiple `VaSidebarItem` highlighted. You can choose your own way to highlight an active item. Even if you want to activate a few `VaSidebarItems`."
      },
      "icons": {
        "title": "`VaSidebarTitle` and VaIcons",
        "text": "`VaSidebarTitle` used to fill all remaining free space in `VaSidebarItem`. We can also add any other components (like `VaIcon`, `VaChip` or `VaButton`)."
      },
      "components": {
        "title": "Advanced case with `VaAccordion`",
        "text": "`VaSidebarItem` can be used with `VaAccordion` and `VaCollapses`."
      }
    }
  },
  "aspectRatio": {
    "title": "Aspect Ratio",
    "summaryText": "The `va-aspect-ratio` is a wrapper, that may help you to view your block with the required width to height ratio.",
    "examples": {
      "default": {
        "title": "Default"
      },
      "withOtherComponents": {
        "title": "With other components",
        "text": "You're able to combine the `va-aspect-ratio` components with others. By default it's already used in `va-image`, but also will be useful in, for example, `va-card`."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-aspect-ratio/_variables.scss)[[target=_blank]]"
  },
  "image": {
    "title": "Image",
    "summaryText": "The `va-image` component is used to display responsive images. It has some features to make your work with images easier.",
    "imagesInNuxt": {
      "title": "How to deal with images in Vite based apps",
      "problemStatement": "When you will work with `va-image` component, you possibly can meet an issue with missing images in Vite based applications.",
      "resolveByImport": "To resolve this issue, you need to import your image into the script tag and use imported image as a source for the `va-image` component.",
      "resolveByPublicDir": "Also, you can place your images under your `public` directory to avoid importing images."
    },
    "examples": {
      "default": {
        "title": "Default"
      },
      "fit": {
        "title": "Object Fit",
        "text": "Proxies `object-fit` CSS property. Available values are: `contain`, `fill`, `cover`, `scale-down`, `none`."
      },
      "lazy": {
        "title": "Lazy Load",
        "text": "The `lazy` prop allows you to use lazy-load behavior. In this case the image will be loaded only when it becomes visible (intersection)."
      },
      "ratio": {
        "title": "Ratio",
        "text": "The `ratio` prop changes image original ratio, showing part of image to fit new ratio."
      },
      "defaultSlot": {
        "title": "Default slot",
        "text": "Useful for, for example, overlays."
      },
      "slots": {
        "title": "Status slots",
        "text": "We're providing 3 status slots: `error` (visible when `src` path is incorrect), `loading` (visible when image is loading) and `placeholder` (works as both previous). As an alternative for error handling, we provide the `fallback-icon`, `fallback-text`, `fallback-image` and `fallback-renderer` props, that will be called if error slot wasn't passed. Also you're able to set global fallback settings via [components config](/getting-started/configuration-guide#components-config)."
      },
      "srcSet": {
        "title": "Srcset",
        "text": "The `srcset` and `sizes` properties allows you to use native srcset attribute with our component."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-image/_variables.scss)[[target=_blank]]"
  },
  "optionList": {
    "title": "Option List",
    "summaryText": "The `va-option-list` component is a component to be used to group form inputs (like checkboxes and radio buttons) into a list for better control over the data.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "By default `va-option-list` will render list of checkboxes provided by `options` prop"
      },
      "withRadio": {
        "title": "Radio",
        "text": "Set `type=\"radio\"` to display list radio buttons"
      },
      "withSwitch": {
        "title": "Switch",
        "text": "Set `type=\"switch\"` to display list switches"
      },
      "withComplexData": {
        "title": "Array of objects",
        "text": "Instead of array of strings you can provide array of objects and specify which key is for each setting."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-option-list/_variables.scss)[[target=_blank]]"
  },
  "checkbox": {
    "title": "Checkbox",
    "summaryText": "Checkboxes allow the user to select multiple options from a set.",
    "examples": {
      "default": {
        "title": "Standard",
        "text": "Perfectly works with `v-model` by default."
      },
      "label": {
        "title": "Label",
        "text": "You can add a label text by setting the `label` property. You can also set the `left-label` property to move your label on the left side of a checkbox."
      },
      "indeterminate": {
        "title": "Indeterminate"
      },
      "coloring": {
        "title": "Coloring"
      },
      "array": {
        "title": "Grouped (Array)",
        "text": "Just add the same `v-model` to multiple checkboxes, and set the `array-value` prop."
      },
      "error": {
        "title": "Errors",
        "text": "You can show your error messages while using `va-checkbox` with form."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-checkbox/_variables.scss)[[target=_blank]]"
  },
  "progressBar": {
    "title": "Progress Bar",
    "summaryText": "The `va-progress-bar` component is used to display an indicator of an app loading content. Also check the [va-progress-circle](/ui-elements/progress-circle) component.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "By default, the `va-progress-bar` displays a horizontal progress bar. Use the `value` prop to control the progress."
      },
      "indeterminate": {
        "title": "Indeterminate",
        "text": "Use the `indeterminate` prop so that the `va-progress-bar` continuously animates."
      },
      "coloring": {
        "title": "Coloring",
        "text": "Use predefined colors or use your own with the `color` prop."
      },
      "sizing": {
        "title": "Sizing",
        "text": "Use predefined sizes or use your own with the `size` prop."
      },
      "slots": {
        "title": "Slots",
        "text": "There is also the default `slot` if you want to display some additional info about the progress."
      },
      "buffer": {
        "title": "Buffer",
        "text": "When dealing with media content like streaming videos we can use progress bars to show the buffering progress indicator on a video."
      },
      "max": {
        "title": "Maximum value",
        "text": "You can set maximum value for progress bar component"
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-progress-bar/_variables.scss)[[target=_blank]]"
  },
  "progressCircle": {
    "title": "Progress Circle",
    "summaryText": "The `va-progress-circle` component is used to display an indicator of an app loading content. Also check the [va-progress-bar](/ui-elements/progress-bar) component.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "By default, the `va-progress-circle` displays a circular progress bar. Use the `value` prop to control the progress."
      },
      "indeterminate": {
        "title": "Indeterminate",
        "text": "Use the `indeterminate` prop so that the `va-progress-circle` continuously animates."
      },
      "coloring": {
        "title": "Coloring",
        "text": "Use predefined colors or use your own with the `color` prop."
      },
      "sizing": {
        "title": "Sizing",
        "text": "Use predefined sizes or use your own with the `size` prop."
      },
      "slots": {
        "title": "Slots",
        "text": "There is also the default `slot` if you want to display some additional info about the progress."
      },
      "thickness": {
        "title": "Thickness",
        "text": "Use the `thickness` prop to adjust the stroke size."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-progress-circle/_variables.scss)[[target=_blank]]"
  },
  "infiniteScroll": {
    "title": "Infinite Scroll",
    "summaryText": "The `va-infinite-scroll` component is a wrapper component which is intended to be used to create lists with dynamically added content. It provides rich interface to customize scrolling behavior and much more.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Just wrap your content in `va-infinite-scroll` component and provide `load` callback, and you'll see it's called each time list is scrolled till the bottom."
      },
      "reverse": {
        "title": "Reverse",
        "text": "With `reverse` prop you can prepend content to your list. Might be useful in messenger windows."
      },
      "disabled": {
        "title": "Disabled",
        "text": "In case you need to prevent a list from loading more content, `disabled` prop is here for you."
      },
      "customTarget": {
        "title": "Custom scroll target container",
        "text": "Provide either DOM element or CSS Selector to be used instead of default scroll container. "
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-infinite-scroll/_variables.scss)[[target=_blank]]"
  },
  "input": {
    "title": "Input",
    "summaryText": "The `va-input` component is intended to be used instead of the standard HTMl input or textarea.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default `va-input` doesn’t have attributes, but can be combined with a placeholder and/or label."
      },
      "extendedDefault": {
        "title": "Readonly, disabled, symbols counter",
        "text": "It can also be disabled, readonly and have symbols counter."
      },
      "htmlAttributes": {
        "title": "Supported HTML attributes",
        "text": "Be default we support these HTML Input attributes: `type`, `disabled`, `readonly`, `placeholder`, `pattern`, `inputmode`, `minlength`, `maxlength`. Read more on the [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)."
      },
      "hint": {
        "title": "Hint messages",
        "text": "Support single/multi line messages to give some hint for improve UX"
      },
      "validate": {
        "title": "Validation and error/success state",
        "text": "Support a simple validation using the rules prop. The prop accepts an array of callbacks. While validating rules, the current v-model value will be passed to the callback. This callback should return either true or a String, the error message. Also you can manually pass error/success prop to manage input state."
      },
      "slots": {
        "title": "Slots",
        "text": "You can use slots for pass custom elements to input (inner or outer), such as icons or buttons etc."
      },
      "textarea": {
        "title": "Textarea",
        "text": "Support a multi-line `va-input`, useful for larger amounts of text. You can make textarea auto-expandable or manually control min/max number of lines."
      },
      "inputClass": {
        "title": "Input Class",
        "text": "To assign a class directly to input, rather than its wrapper, use the `input-class` property. For example, you can use the build-in component class (or any other class you've created) to align the input text &mdash; `va-text-center` and `va-text-right` to align the center or right.",
        "exampleTexts": [
          "This input must have right-aligned green text with bottom indent.",
          "Native input element must have green text. VaInput wrapper has a gray border."
        ]
      },
      "mask": {
        "title": "Mask",
        "text": "Support possibility to force/help the user to input a specific format with help from mask prop. You can pass some mask presets or custom options based on [cleave.js](https://nosir.github.io/cleave.js/)[[target=_blank]]. By default returning a raw value."
      },
      "styles": {
        "title": "Styles",
        "text": "There are tree styles for input: Default (solid), outline, bordered."
      },
      "types": {
        "title": "Input types",
        "description": [
          "With a `type` property you can set the type of the input which will render native `<input type=\"text/password/search/etc\" />`.",
          "Watch available types [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types) (some types aren't supported or have implemented as a Vuestic UI component)."
        ]
      },
      "customize": {
        "title": "Customizable",
        "text": "You can create `preset` for your input components, but sometimes requirements can be out of boundaries of pre-defined `presets`. To solve this problem component allows to customize it with `slots` and its `props`.",
        "labelFrom": "From",
        "labelTo": "To"
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-input/_variables.scss)[[target=_blank]]"
  },
  "alert": {
    "title": "Alert",
    "summaryText": "Displays a short, important message to attract user attention. If you need to send a notification to users, you can use our [Toast](https://vuestic.dev/ui-elements/toast) component.",
    "whenToUseTitle": "When To Use",
    "whenToUseList": {
      "show": "When you need to show an important message to users.",
      "static": "When you need a static container with some important information which is closable by user actions."
    },
    "examples": {
      "default": {
        "title": "Default",
        "text": "The basic usage of the `va-alert` component.",
        "prop": "You read this important alert message.",
        "slot": "You read this important slotted alert message."
      },
      "color": {
        "title": "Color",
        "text": "Use `color` property to change the color of the component and `text-color` to change the textual content color."
      },
      "styles": {
        "title": "Different styles",
        "text": "3 styles are available: `color`, `outlined` and `border` styled alerts."
      },
      "border": {
        "title": "Border",
        "text": "Use the `border` property to add a strip and the `border-color` property to change the color of the strip."
      },
      "title": {
        "title": "Title",
        "text": "The `title` property allows you to write text over the description area. Use the `title` slot to costomize the title area."
      },
      "dense": {
        "title": "Dense",
        "text": "The `dense` property reduces paddings on alert."
      },
      "icon": {
        "title": "Icon",
        "text": "The `icon` property allows you to add an icon in front of the description area. Use the `icon` slot to costomize the icon area."
      },
      "closeable": {
        "title": "Closeable",
        "text": "The `closeable` property add a close alert area. Also you can pass `close-text` prop to make close icon as plain text."
      },
      "center": {
        "title": "Center",
        "text": "The `center` property allows you to center title and description areas."
      }
    },
    "misc": {
      "title": "Hello World!",
      "titleContent": "Who-hoooo! You successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.",
      "close": "close",
      "slottedTitle": "You can use slotted title",
      "starVuestic": "If you like Vuestic UI, please give us a star on ",
      "slottedTitleContent": "You can add a divider, close button, links, icons, change the color and you can do whatever you need with Vuestic UI!",
      "color": "Colored background. You can use our colors - primary, secondary, info, success, warning, danger, or choose yours using HEX code.",
      "outlined": "Outline",
      "border": "Colored border",
      "default": "Hello World! I'm an alert with an important message! I use Primary blue color by default but you can choose another one :)",
      "primary": "I'm an alert with an important message :)",
      "customized": "Hello World! This is an alert with an important message and a custom background and text color!",
      "primarySlotted": "You read this important slotted alert message",
      "success": "Data uploaded to the server",
      "info": "This alert needs your attention, but it's not super important",
      "warning": "Your account is about expire, upgrade now",
      "danger": "Change a few things up and try submitting again!",
      "error": "There was an error processing your request",
      "centered": "You read this important centered alert message",
      "toggleVisibility": "Toggle visibility",
      "icon": "You read this important alert message with an icon",
      "slottedIcon": "You read this important alert message with a slotted icon",
      "defaultCloseIcon": "Dismissible Alert! Click the close button over there ⇒",
      "customCloseIcon": "You read this important alert message with a custom close icon",
      "messageInsteadIcon": "You read this important alert message with a text instead of an icon",
      "slottedTextInsteadIcon": "You read this important alert message with a slotted text instead of an icon"
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-alert/_variables.scss)[[target=_blank]]"
  },
  "icon": {
    "title": "Icon",
    "summaryText": "The `va-icon` component allows you to use different icon fonts. By default Vuestic UI provides [Material Design Icons](https://fonts.google.com/icons)[[target=_blank]].",
    "iconsConfig": "Read more how you can use different icon libraries with Vuestic UI Icon Config",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Basic usage of the component with different icon fonts.",
        "alert": "Notice that Vuestic UI uses only Material Icons by default. You need to manually install additional libraries."
      },
      "color": {
        "title": "Color",
        "text": "Set different colors using the `color` prop. You can either use a theme string or the HEX color value."
      },
      "size": {
        "title": "Size",
        "text": "Apply the `size` prop in order to make `va-icon` fit your needs."
      },
      "rotation": {
        "title": "Rotation and Flip",
        "text": "It is used to rotate and mirror the `va-icon` component."
      },
      "spin": {
        "title": "Spin",
        "text": "You can add animation of rotation of the icon using the property `spin`."
      },
      "text": {
        "title": "Text as icon",
        "text": "Using `text` prop is used to cover the text icon style."
      },
      "tag": {
        "title": "Custom tag",
        "text": "With the `tag` prop you can attach the icon to another tag."
      }
    },
    "accessibility": "The component completely ignored by screen readers because of [aria-hidden=\"true\"](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-hidden)[[target=_blank]] attribute.",
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-icon/_variables.scss)[[target=_blank]]"
  },
  "radio": {
    "title": "Radio",
    "summaryText": "The `va-radio` allows the user to select one option from a set.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Default usage  of the `va-radio` component."
      },
      "color": {
        "title": "Colors",
        "text": "With `color` prop you can change the color of the component."
      },
      "customLabels": {
        "title": "Custom Labels",
        "text": "You can add a label text by setting the `label` property. To switch label side use `left-label` property."
      },
      "disabled": {
        "title": "Disabled",
        "text": "With `disabled` prop you can disable a user interaction  with `va-radio` component."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-radio/_variables.scss)[[target=_blank]]"
  },
  "collapse": {
    "title": "Collapse",
    "summaryText": "Toggles the visibility of content.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Default usage  of the `va-collapse` component."
      },
      "solid": {
        "title": "Solid",
        "text": "Add borders to your collapse component by using the `solid` property."
      },
      "icon": {
        "title": "Icon",
        "text": "You can add an icon to the header."
      },
      "color": {
        "title": "Color",
        "text": "Use two color schemes."
      },
      "flat": {
        "title": "Flat"
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-collapse/_variables.scss)[[target=_blank]]"
  },
  "accordion": {
    "title": "Accordion",
    "summaryText": "Allows you to control group of [collapses](ui-elements/collapse).",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Default usage  of the `va-accordion` component."
      },
      "multiple": {
        "title": "Multiple",
        "text": "Accordion component allows you to select multiple collapses."
      },
      "inset": {
        "title": "Inset",
        "text": "Active collapse component becomes smaller."
      },
      "popout": {
        "title": "Popout",
        "text": "Active collapse component becomes bigger."
      },
      "flat": {
        "title": "Flat"
      },
      "menu": {
        "title": "Menu",
        "text": "One of the interesting ways to use the component is a collapsing menu."
      }
    }
  },
  "chip": {
    "title": "Chip",
    "summaryText": "Chip - it is a compact element for displaying data or performing an action.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Default usage of the `va-chip` component."
      },
      "outline": {
        "title": "Outline",
        "text": "Outline style without background."
      },
      "flat": {
        "title": "Flat",
        "text": "Flat style without borders and background."
      },
      "square": {
        "title": "Square",
        "text": "Makes your `va-chip` square."
      },
      "color": {
        "title": "Color",
        "text": "You can use the `va-chip` component with different colors."
      },
      "size": {
        "title": "Size",
        "text": "Set different tag sizes using size presets."
      },
      "icon": {
        "title": "Icon",
        "text": "You can use icons in tag."
      },
      "closeable": {
        "title": "Closeable",
        "text": "A tag can be closed by applying the `closeable` property."
      },
      "link": {
        "title": "Link",
        "text": "It makes your tag clickable."
      },
      "shadow": {
        "title": "Shadow",
        "text": "You can set a shadow."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-chip/_variables.scss)[[target=_blank]]"
  },
  "smartHelpers": {
    "title": "Smart Helpers",
    "summaryText": "Vuestic UI provides amount of smart CSS helpers which are adopting to the current breakpoint (see also [Breakpoint Service](/services/breakpoints)).",
    "examples": {
      "gutters": {
        "title": "Gutters",
        "text": "Sets the margin between the cells of your flex-container with the `gutter` class.",
        "sizes": {
          "xs": "`.va-gutter-1` - Extra small gutter between cells",
          "sm": "`.va-gutter-2` - Small gutter between cells",
          "md": "`.va-gutter-3` - Default gutter between cells",
          "lg": "`.va-gutter-4` - Large gutter between cells",
          "xl": "`.va-gutter-5` - Extra large gutter between cells"
        }
      },
      "spacing": {
        "title": "Spacing",
        "text": "Sets the margin (`x` or `y`) between child items of the container with the `spacing` class.",
        "sizes": {
          "xs": "`.va-spacing-x/y-1` - Extra small spacing between items",
          "sm": "`.va-spacing-x/y-2` - Small spacing between items",
          "md": "`.va-spacing-x/y-3` - Default spacing between items",
          "lg": "`.va-spacing-x/y-4` - Large spacing between items",
          "xl": "`.va-spacing-x/y-5` - Extra large spacing between items"
        }
      }
    }
  },
  "grid": {
    "title": "Grid System",
    "deprecated": "CSS helpers and the CSS reset file will remain in the Vuestic UI bundle until version 1.7.0, after which they will be permanently removed. We suggest to use Tailwind CSS instead.",
    "summaryText": "Vuestic UI provides you with some flexbox helper classes. Of course, you can opt out using CSS Grid instead (or any other layout-scheme you'd like), but if you prefer using flexbox, we've got you covered. Still, the final decision is totally up to you.",
    "examples": {
      "default": {
        "title": "Enabling flexbox",
        "example": "Now I'm flexible"
      },
      "breakpoints": {
        "title": "Breakpoints",
        "text": "Use the following classes (`breakpoints`) to apply provided styling to screens of certain widths exclusively.",
        "sizes": {
          "xs": "`.xs` - (< 640px) - Extra small devices",
          "sm": "`.sm` - (>= 640px && < 1024px) - Small devices",
          "md": "`.md` - (>= 1024px && < 1440px) - Medium devices",
          "lg": "`.lg` - (>= 1440px && < 1920px) - Large devices",
          "xl": "`.xl` - (>= 1920) - Extra large devices"
        }
      },
      "offsets": {
        "title": "Offsets",
        "text": "You can use the `offset`-classes to set spaces between a given element and the one to the left from it.",
        "sizes": {
          "xs": "`.offset-xs` - Extra small devices",
          "sm": "`.offset-sm` - Small devices",
          "md": "`.offset-md` - Medium devices",
          "lg": "`.offset-lg` - Large devices",
          "xl": "`.offset-xl` - Extra large devices"
        },
        "first": "First",
        "second": "Second",
        "last": "Last"
      },
      "align": {
        "title": "`align`:",
        "variants": [
          "`.align-start` - cross-start margin edge of the items is placed on the cross-start line",
          "`.align-end` - cross-end margin edge of the items is placed on the cross-end line",
          "`.align-center` - items are centered in the cross-axis",
          "`.align-baseline` - items are aligned the way their baselines align"
        ]
      },
      "alignSelf": {
        "title": "`align-self`:",
        "variants": [
          "`.align-self-start` - cross-start margin edge of the items is placed on the cross-start line",
          "`.align-self-end` - cross-end margin edge of the items is placed on the cross-end line",
          "`.align-self-center` - items are centered in the cross-axis",
          "`.align-self-baseline` - items are aligned the way their baselines align"
        ]
      },
      "alignContent": {
        "title": "`align-content`:",
        "variants": [
          "`.align-content-start` - lines packed to the start of the container",
          "`.align-content-end` - lines packed to the end of the container",
          "`.align-content-center` - lines packed to the center of the container",
          "`.align-content-space-between` - lines evenly distributed; the first line is at the start of the container while the last one is at the end",
          "`.align-content-space-around` - lines evenly distributed with equal space between them"
        ]
      },
      "justify": {
        "title": "`justify`:",
        "variants": [
          "`.justify-start` - items are packed toward the start line",
          "`.justify-end` - items are packed toward to end line",
          "`.justify-center` - items are centered along the line",
          "`.justify-space-around` - items are evenly distributed in the line, items have equal space around on either end",
          "`.justify-space-between` - items are evenly distributed in the line; first item is on the start line, last item is on the end line",
          "`.justify-space-evenly` - items are evenly distributed in the line; items have equal space around them"
        ]
      },
      "justifySelf": {
        "title": "`justify-self`:",
        "variants": [
          "`.justify-self-start` - The item is packed flush to each other toward the start edge of the alignment container in the appropriate axis.",
          "`.justify-self-end` - The item is packed flush to each other toward the end edge of the alignment container in the appropriate axis.",
          "`.justify-self-center` - For items that are not children of a flex container, this value is treated as `.justify-self-start`.",
          "`.justify-self-baseline` - The items are aligned according to baselines"
        ]
      }
    }
  },
  "tailwind": {
    "title": "Tailwind CSS Support",
    "summaryText": "We recommend our users to use [Tailwind CSS](https://tailwindcss.com/)[[target=_blank]] as the most convenient and modern solution to the CSS helpers issue.",
    "deprecated": "CSS helpers and the CSS reset file will remain in the Vuestic UI bundle until version 1.7.0, after which they will be permanently removed.",
    "preparation": {
      "title": "Preparations",
      "text": "Before we start with integration - please ensure you have both Tailwind CSS and Vuestic UI installed. If that's not the case - here are installation guide [for Vuestic UI](/getting-started/installation) and for [Tailwind CSS](https://tailwindcss.com/docs/installation/using-postcss)[[target=_blank]]."
    },
    "features": {
      "integration": {
        "title": "Syncing configs",
        "text": "To create a tight bind between Vuestic with Tailwind we have a {'`@vuestic/tailwind`'} package: it syncs [breakpoint](/services/breakpoints)[[target=_blank]] and [color](/services/colors)[[target=_blank]] settings. You can sync from Vuestic UI to Tailwind or backwards!",
        "instructionIntro": "Here's what you have to do to make it work:",
        "extendAlert": "We're not overriding Tailwind CSS settings, but extending them.",
        "instruction": [
          "1.&nbsp;Install this package:",
          "2.&nbsp;After installation, three commands become available to you:",
          "`npx sync-tailwind-with-vuestic` - formats and transfers the color and breakpoints settings from the `tailwind.config.*` file (and in its absence, it uses the default Tailwind CSS configuration) to the root file `vuestic.config.js` (also added by this command);",
          "`npx watch-tailwind` - watches `tailwind.config.*` in background and synchronizes the Vuestic UI configuration on the fly;",
          "`npx sync-vuestic-with-tailwind` - transfers color and breakpoint settings from default Vuestic UI config to the Tailwind's configuration file (`tailwind.config.cjs`).",
          "3A.&nbsp;`[Tailwind CSS -> Vuestic UI]` import the `config` configuration in your `main.*` and specify it when initializing the application:",
          "Also, you may want to synchronize the configuration partially (in the example - only Tailwind CSS colors will be taken):",
          "3B.&nbsp;`[Vuestic UI -> Tailwind CSS]` Nothing more is needed.",
          "4A.&nbsp;`[Tailwind CSS -> Vuestic UI]` As a result you will be able to use Tailwind colors and breakpoints setting in Vuestic. For example, the result of synchronization default Tailwind settings will be a Vuestic settings file:",
          "4B.&nbsp;`[Vuestic UI -> Tailwind CSS]` Vuestic UI setting will be available in the Tailwind CSS scope. Output format follows the requirements, located [here](https://tailwindcss.com/docs/screens#adding-larger-breakpoints)[[target=_blank]] and [here](https://tailwindcss.com/docs/screens#adding-larger-breakpoints)[[target=_blank]]."
        ]
      }
    }
  },
  "list": {
    "title": "List",
    "summaryText": "The `va-list` component is used to display structured information.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "Has no attributes by default. Build a structure by using components `va-list-label`, `va-list-separator`, `va-list-item` and etc."
      },
      "disabled": {
        "title": "Disabled",
        "text": "You can disable any user interaction by using 'disabled' prop."
      },
      "clickable": {
        "title": "Clickable",
        "text": "Support a ability to use a list item as a link."
      },
      "fit": {
        "title": "Fit",
        "text": "Support a fitting of the list item by its content length."
      },
      "lines": {
        "title": "Lines",
        "text": "You can divide item label content on a custom count of lines."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-list/_variables.scss)[[target=_blank]]",
    "api": {
      "list": {
        "text": "API for `va-list` component."
      },
      "listLabel": {
        "title": "List Label API",
        "text": "API for `va-list-label` component."
      },
      "listSeparator": {
        "title": "List Separator API",
        "text": "API for `va-list-separator` component."
      },
      "listItem": {
        "title": "List Item API",
        "text": "API for `va-list-item` component."
      },
      "listItemLabel": {
        "title": "List Item Label API",
        "text": "API for `va-list-item-label` component."
      },
      "listItemSection": {
        "title": "List Item Section API",
        "text": "API for `va-list-item-section` component."
      }
    }
  },
  "select": {
    "title": "Select",
    "summaryText": "Select field components are used for collecting user provided information from a list of options. This component opens up a menu for the selection list and action.",
    "examples": {
      "default": {
        "title": "Default select"
      },
      "variations": {
        "title": "Variants",
        "text": "Includes single or multiple selects."
      },
      "decorators": {
        "title": "Decorators"
      },
      "objectOptions": {
        "title": "Objects as options"
      },
      "trackBy": {
        "title": "Track by",
        "text": "Track by can be used if you have multiple options with same value."
      },
      "slots": {
        "title": "Slots",
        "text": "Includes `option`, `content`, `prepend`, `prepend-inner`, `append` and `append-inner` slots."
      },
      "tagging": {
        "title": "Tagging",
        "text": "`content` slot allows you to overwrite default `input` element with custom one. So you are able to set tagging state via adding `VaChip` component:"
      },
      "state": {
        "title": "State",
        "text": "Includes error, success, disabled or loading state"
      },
      "autocomplete": {
        "title": "Autocomplete",
        "text": "The `autocomplete` prop enables autocomplete behaviour for the `va-select`."
      },
      "searchable": {
        "title": "Searchable",
        "text": "Supports ability to filter option list by typing"
      },
      "allowCreate": {
        "title": "Allow create",
        "text": "You can add options that initial options do not have"
      },
      "validation": {
        "title": "Validation rules",
        "text": "Select accepts an array of functions that take an input value as an argument and return either true / false or a string with an error message"
      },
      "keyboardNavigation": {
        "title": "Keyboard navigation",
        "moves": "By using `ARROW DOWN` and `ARROW UP` you can move between options",
        "selects": "By using `ENTER` and `SPACE` you can select current option",
        "hints": "If you type while option list is opened this will create a search buffer (will reset if you do not type for 1 second) that will be used to search in the options labels"
      },
      "styles": {
        "title": "Styles",
        "text": "Select styles inherit from input styles"
      },
      "maxVisibleOptions": {
        "title": "Max visible selected options",
        "text": "The `max-visible-options` props sets amount of selected options, that will be shown inside of input wrapper. The rest will be hidden, but may be shown after clicking the badge with hidden options counter."
      },
      "selectedTopShown": {
        "title": "Displaying selected options at the top of the list",
        "text": "The `selected-top-shown` prop forces to display selected options at the top of the options list."
      },
      "iconOptions": {
        "title":"Icon-selection",
        "text": "The 'iconOption' property allows the addition of custom options to the select dropdown menu, each with an icon and a name."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-select/_variables.scss)[[target=_blank]]"
  },
  "parallax": {
    "title": "Parallax",
    "summaryText": "Parallax (`va-parallax`) is a component where the background image is moved at a different speed than the foreground content while scrolling.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "A block with a background image is displayed by default. You need to pass the `src` property."
      },
      "custom": {
        "title": "Custom height and speed",
        "text": "You can adjust parallax `height` and scroll `speed`. Attention, the scrolling speed depends on the ratio of the parallax height to the image height."
      },
      "reversed": {
        "title": "Reversed",
        "text": "You can flip the parallax scrolling."
      },
      "slot": {
        "title": "Slot",
        "text": "You can provide some kind of content over the parallax."
      }
    },
    "accessibility": "Parralax effect is harmful to people with vestibular disorders and should be avoided or used with extreme caution and restraint. If you must use parralax, you should limit usage to one per page and decrease `height` and `speed` for each component.",
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-parallax/_variables.scss)[[target=_blank]]"
  },
  "backtop": {
    "title": "Backtop",
    "summaryText": "The backtop button is used to return to the top of a component.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default `va-backtop` watches for a body element offset height. You can change a target element, positioning and scrolling speed."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/tree/develop/packages/ui/src/components/va-backtop/_variables.scss)[[target=_blank]]"
  },
  "reset": {
    "title": "CSS Reset",
    "deprecated": "CSS helpers and the CSS reset file will remain in the Vuestic UI bundle until version 1.7.0, after which they will be permanently removed.",
    "description": "We use `reset.scss` to reset and normalize basic CSS styles",
    "features": {
      "title": "Reset features",
      "info": "Below is a list of features that are provided by reset.scss:",
      "list": "* Margin and padding reset. \n * Border reset. \n * Hide quotes. \n * Font reset. \n * Hidden-attribute fix for newer browsers. \n * HTML5 display-role reset for older browsers",
      "more": "For a complete list of all applied styles, see the [reset.scss](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/styles/global/reset.scss)[[target=_blank]] stylesheet."
    }
  },
  "colorInput": {
    "title": "Color Input",
    "summaryText": "Input component that allows you to select a color.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default use this component with `v-model`."
      },
      "disabled": {
        "title": "Disabled",
        "text": "All user interactions can be disabled."
      }
    }
  },
  "colorPalette": {
    "title": "Color Palette",
    "summaryText": "Palette component for color pick.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default use this component with `v-model` and palette array."
      },
      "indicator": {
        "title": "Indicator",
        "text": "You can apply different styles to the indicator: `dot` and `square` are available. "
      }
    }
  },
  "datePicker": {
    "title": "Date Picker",
    "description": "Date picker component allows user to select single, multiple or range of dates, months and years. You can customize it the way you want. There is a option to change all string and formats.\n\nIt based on native js dates so you can use this Date Picker with any date library you want.",
    "lookAtDateInput": "Also, look at Date Input",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default, use this component with v-model."
      },
      "mode": {
        "title": "Mode",
        "text": "You can use date picker in three different ways. By default date picker uses `auto` mode. This means that `mode` will be chosen based on `modelValue`. There is three modes: `single`, `multiple` and `range`. Different modes require different model values."
      },
      "stateful": {
        "title": "Stateful",
        "text": "Date picker can be stateful. Initial value will be undefined, but user can change it."
      },
      "firstWeekday": {
        "title": "First day of the week",
        "text": "If you want to always use Monday as the first day of the week, you can set this prop in GlobalConfig."
      },
      "weekends": {
        "title": "Weekends",
        "text": "You can highlight weekends using `highlight-weekends` prop. Also, you can set your own weekends using `weekends` function."
      },
      "otherMonths": {
        "title": "Other month days",
        "text": "You can show days of other months using `show-other-months` prop instead of blank cells in calendar."
      },
      "slots": {
        "title": "Slots",
        "text": "For now, we don't support localization using one prop. But you have opportunity to localize it by yourself using slots."
      },
      "view": {
        "title": "View",
        "text": "You can set specific view for date picker. With `view` prop you can define how date picker will displayed, year and month that will be shown."
      },
      "type": {
        "title": "Type",
        "text": "If you want allow user to pick only month or year, you can make it using `type` prop."
      },
      "disabledDates": {
        "title": "Disable dates",
        "text": "You can disable some specific days, month or year using `allowedDays`, `allowedMonth` or `allowedYear` props."
      },
      "color": {
        "title": "Colors",
        "text": "You can change colors using CSS variables for deeper customization, but also you can simple change colors using props."
      },
      "readonly": {
        "title": "Readonly",
        "text": "Readonly picker for readonly forms."
      },
      "disabled": {
        "title": "Disabled",
        "text": "Disabled picker that can be used in forms."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-date-picker/_variables.scss)[[target=_blank]]"
  },
  "dateInput": {
    "title": "Date Input",
    "description": "Date Input component is a combination of Date Picker and Input components. You can find usage examples using following links:",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": ""
      },
      "resetOnClose": {
        "title": "Reset on close",
        "text": "There is a prop `resetOnClose` for range mode. If user selected incomplete range and closed dropdown, then used last complete value."
      },
      "isOpen": {
        "title": "IsOpen",
        "text": "IsOpen prop allows you to force show dropdown as opened."
      },
      "formatting": {
        "title": "Formatting",
        "text": "You can pass the format function to VaDateInput which will format input text like you want to. This way you can use any format that you want. For example, you can use [date-fns](https://date-fns.org/v2.23.0/docs/format)[[target=_blank]]."
      },
      "manual": {
        "title": "Date Manual Input",
        "text": "You can add `manual-input` attribute to allow user input text from keyboard manually."
      },
      "input": {
        "title": "Parsing",
        "text": "You can pass the parse function to VaDateInput which will parse input text like you want to. This way you can use any format that you want. For example, you can use [date-fns](https://date-fns.org/v2.23.0/docs/format)[[target=_blank]] to parse date string. By default we parse this input using standard `Date.parse` method."
      },
      "inputProps": {
        "title": "Input props",
        "text": "You can pass properties to `VaDateInput`"
      },
      "advancedFormatting": {
        "title": "Advanced formatting",
        "text": "If you need specific format for multiple or range modes you can use."
      },
      "view": {
        "title": "View",
        "text": "You can set specific view for date picker. With `view` prop you can define how date picker will displayed, year and month that will be shown."
      },
      "formattingGlobalConfig": {
        "text": "You can easily use your format functions for all VaDateInputs using [Global Config](/services/components-config) feature."
      },
      "validation": {
        "title": "Validation",
        "text": "Validation works the same way as `VaInput` validation, except rules functions should accept `Date` instead of `string`."
      },
      "mode": {
        "title": "Mode",
        "text": "You can use date input in three different ways. By default date input uses `auto` mode. This means that `mode` will be chosen based on `modelValue`. There is three modes: `single`, `multiple` and `range`. Different modes require different model values."
      }
    }
  },
  "buttonGroup": {
    "title": "Button Group",
    "summaryText": "It is a special component that wrap buttons and applies special styles to them.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default, you need to wrap your buttons with a `va-button-group` component."
      },
      "colors": {
        "title": "Colors",
        "text": "Component provides color to each child button."
      },
      "gradient": {
        "title": "Gradient",
        "text": "It’s used to apply a gradient style to a background."
      },
      "sizes": {
        "title": "Sizes",
        "text": "You can set different sizes."
      },
      "grow": {
        "title": "Grow",
        "text": "Makes button group grow to the width of its container."
      },
      "styles": {
        "title": "Presets & styles",
        "text": "You can use the same `preset`'s (`default`, `primary`, `secondary`, `plain`, `plainOpacity`) and styles (`round`, outline via `borderColor` property) as in [va-button](https://vuestic.dev/ui-elements/button)[[target=_blank]]."
      },
      "icons": {
        "title": "Icons",
        "text": "Looks good with icons provided to buttons. "
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-button-group/_variables.scss)[[target=_blank]]"
  },
  "buttonToggle": {
    "title": "Button Toggle",
    "summaryText": "The button is used to switch between different values.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default, an object with parameters and a v-model is to be passed."
      },
      "colors": {
        "title": "Colors",
        "text": "Applies color presets and HEX colors."
      },
      "toggleColor": {
        "title": "Toggler color",
        "text": "Use `toggle-color` prop to set the color of the active button."
      },
      "gradient": {
        "title": "Gradient",
        "text": "Applies gradient style to background."
      },
      "sizes": {
        "title": "Sizes",
        "text": "You can provide size presets to the component."
      },
      "styles": {
        "title": "Presets and styles",
        "text": "You can use the same `preset`'s (`default`, `primary`, `secondary`, `plain`, `plainOpacity`) and styles (`round`, outline via `borderColor` property) as in [va-button](https://vuestic.dev/ui-elements/button)[[target=_blank]]."
      },
      "disabled": {
        "title": "Disabled",
        "text": "The component can be disabled via `disabled` prop."
      },
      "icons": {
        "title": "Icons",
        "text": "You can set icon instead (or in addition) of label for buttons via `options` props (`icon` and `iconRight` attributes)."
      }
    }
  },
  "appBar": {
    "title": "App bar",
    "summaryText": "The app bar component is a part of a website’s navigation and it’s an alternative to the header element in apps.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default, a `va-app-bar` needs a parent element with relative position."
      },
      "color": {
        "title": "Color",
        "text": "You can set a background color and gradient of the component with `color` and `gradient` props."
      },
      "fixed": {
        "title": "Fixed",
        "text": "You can make app bar position fixed via `fixed` prop."
      },
      "hide": {
        "title": "Hide",
        "text": "`hide-on-scroll` allows you to hide app bar when you scroll away. You need to define `target`."
      },
      "shadow": {
        "title": "Shadow",
        "text": "You can set a shadow with `shadow-on-scroll` prop. You need to define `target`."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-app-bar/_variables.scss)[[target=_blank]]"
  },
  "innerLoading": {
    "title": "Inner Loading",
    "summaryText": "You can handle the loading state of the wrapped component by using the `va-inner-loading` component.",
    "accessibility": "The component has the [aria-live=\"polite\"](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions)[[target=_blank]] and [aria-busy](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-busy)[[target=_blank]] attributes. It blocks any interaction with the content until the loading state is disabled.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default wrap a component in `va-inner-loading` with a `loading` property."
      },
      "color": {
        "title": "Color",
        "text": "You can change the color of the icon."
      },
      "size": {
        "title": "Size",
        "text": "Supports the ability to resize the icon."
      },
      "icon": {
        "title": "Icon",
        "text": "You can change the loading icon."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-inner-loading/_variables.scss)[[target=_blank]]"
  },
  "installation": {
    "title": "Installation",
    "description": "You can create a new project or integrate Vuestic UI into an existing application. There are three ways to create new Vuestic App. All of them mostly the same and provides the same features.",
    "fonts": {
      "title": "Assets installation",
      "description": "By default Vuestic UI uses `Source Sans Pro` and `Material Icons` fonts. You should manually add them into your project. In order to do so you can either:",
      "htmlExampleTitle": "include fonts directly in your `index.html`'s `<head>` element",
      "cssExampleTitle": "or include them in your CSS"
    },
    "quickStart": {
      "title": "Modify your application's entry point",
      "description": "Import both the styles and the plugin into your entry file. The plugin is used to automatically register all the components, directives and other stuff globally. If you don't want to register everything globally then check out the tree-shaking section below."
    },
    "createVuestic": {
      "title": "Create Vuestic",
      "description": "`create-vuestic` is CLI based tool to create new Vuestic App. This is a recommended way to scaffold new Vue apps with Vuestic.",
      "templates": "`create-vuestic` provides three template: Vuestic Admin, create-vue and Nuxt. Templates can be configured to use specific features like tree-shaking or AG Grid theme."
    },
    "cli": {
      "title": "Vue CLI installation",
      "description": "If you have app based on Vue CLI this is a way to install Vuestic UI. Works fine with vite or webpack. Prefer `create-vuestic` for new projects",
      "attention": "Installing Vuestic UI via the plugin would modify your `package.json` and `main.(js`&#124;`ts)` files, so make sure you’ve committed your code before proceeding to avoid data loss.",
      "prepare": "First, make sure you've got [Vue CLI](https://cli.vuejs.org/guide/installation.html)[[target=_blank]] installed globally:",
      "upgrade": "Notice also that the minimum supported version of Vue CLI is v4.0.0. In case you've got an older version installed, please, consider [upgrading](https://cli.vuejs.org/migrating-from-v3/#migrating-from-v3)[[target=_blank]] it.",
      "codeAnnotation": "If everything's fine then you can finally install the plugin with the following command (**don't forget to commit**):"
    },
    "codesandbox": {
      "title": "CodeSandbox",
      "button": "Try Vuestic-UI on CodeSandbox"
    },
    "manual": {
      "title": "Manual installation",
      "subtitle": "If you decide to install Vuestic UI manually, all you need to do is to install a NPM package, a couple of other necessary assets (such as fonts and CSS styles) and slightly modify your application's entry point (most probably `index.js` or `main.js`, depending on your setup).",
      "prerequisites": "But first, make sure you've got all the following prerequisites installed:",
      "node": "[Node.js](https://nodejs.org/en/)[[target=_blank]] (>=v14.0.0)",
      "npm": "[npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)[[target=_blank]] (>=v3.0.0) (or [yarn](https://yarnpkg.com/lang/en/docs/install)[[target=_blank]] (>= v1.16.0)) and [Git](https://git-scm.com/)[[target=_blank]]",
      "afterCheck": "After checking the prerequisites, install Vuestic UI via npm or yarn:"
    },
    "migrationGuide": {
      "title": "Migration guide",
      "1_5": {
        "components": "Components",
        "button": "* Button has been changed visually and its API changed too:\n* `flat` prop has been moved to `preset=\"secondary\"`.\n* Prop `rounded` renamed to `round` and is now `false` by default.",
        "checkbox": "Checkbox is now `inline-block` instead of `block`.",
        "services": "Services",
        "colors": "Colors",
        "colors_0": "In `1.5.0` there are a lot of changes to support dark theme.",
        "colors_1": "* Color config is now extended with variables (where previous colors are stored);\n* `dark`, `white`, `background`, `gray` colors have been removed;\n* text color in components is calculated automatically, but you can force text to be `textDark` or `textLight`;\n* there are 4 types of background color now: `backgroundPrimary`, `backgroundSecondary`, `backgroundTertiary`, `backgroundElement`;\n* read more: [colors](https://vuestic.dev/styles/colors)[[target=_blank]].",
        "colors_2": "* use `useTheme` instead of `useColors` - it has all the same methods.",
        "styles": "Styles",
        "stylesDescription": "* All typography classes now have `va` prefix. For instance: link renamed to `va-link`, `text--right` renamed to `va-text-right`",
        "typography_1": "* `display-1` has been renamed to `va-h1`, same for 2 to 6"
      },
      "1_6": {
        "components": "Components",
        "navbar": "* `center` slot was replaced with default one;\n * default (`center`) slot is now visible on mobiles.",
        "innerLoading": "CSS variables names were changed.",
        "scrollContainer": "`size` prop acceptable values names were changed.",
        "image": "Component was reworked. Suggest to check all places of usage.",
        "extensions": "Extensions",
        "aggrid_0": "Ag Grid",
        "aggrid_1": "Removed SCSS mixins for Vuestic UI theme customization.",
        "styles": "Styles",
        "grid": "Vuestic UI grid helpers were deprecated. Use Tailwind CSS instead."
      }
    }
  },
  "treeShaking": {
    "title": "Tree shaking",
    "description": "If you plan to use only several components in your application and thus reduce the size of your bundle, you can use the Vuestic ESM build. Webpack (vue-cli) and Vite do that automatically.",
    "example": {
      "title": "First, you don't need to use `createVuestic` since it registers all the `vuestic` components globally. We have `createVuesticEssential` instead, which register only essential plugins. You can specify components to declare globally. Or you can import them later.",
      "footer": "You can also specify Vuestic subplugins as `plugins` option. "
    },
    "plugins": {
      "title": "Here is a list of plugins that you can use with Vuestic:",
      "GlobalConfigPlugin": "GlobalConfigPlugin (essential) - used for `VaConfig` component and global props reassignment. [Read more](/services/global-config).",
      "ColorHelpersPlugin": "ColorHelpersPlugin (essential) - used to create reactive CSS variables. Requires `GlobalConfigPlugin`. [Read more](/services/colors-config).",
      "VaToastPlugin": "VaToastPlugin - provides methods for creating Toasts within vue context. [Read more](/ui-elements/toast)",
      "VaModalPlugin": "VaModalPlugin - provides method for creating Modal within vue context. [Read more](/ui-elements/modal)",
      "VaDropdownPlugin": "VaDropdownPlugin - provides methods for dropdown closing within vue context. `VaDropdown` is used in `VaSelect`, `VaTimeInput`, `VaDateInput`, `VaButtonDropdown` component."
    },
    "attention": {
      "cssLoader": "As all components' code is separated, you may need a CSS loader to load component-specific CSS.\nBut you probably already have one."
    },
    "css": {
      "title": "CSS Code Split",
      "description": "We separated our CSS into modules: `essential`, `typography`, `grid` and `reset`. Instead of import `vuestic/css` you can import `vuestic/styles/essential.css` - module without typography, grid and normalize. This is usually need if you already using some CSS framework to prevent style conflicts."
    },
    "bundleSize": {
      "title": "Bundle Size",
      "description": "Statistics of the space occupied in the project bundle (without gzip):"
    }
  },
  "roadmap": {
    "title": "Vuestic UI Roadmap",
    "description": "Our team is constantly improving the existing code base and adding new features that help building applications even easier.",
    "inDevelopment": {
      "title": "In development",
      "description": "The following features are currently being in development:"
    },
    "1-7": {
      "title": "[v1.7](https://github.com/epicmaxco/vuestic-ui/milestone/27)",
      "description": "We still plan things to do in 1.7, but here is what we decided to do for now:"
    },
    "1-6": {
      "title": "[v1.6](https://github.com/epicmaxco/vuestic-ui/milestone/19)",
      "description": "We focus on new services, components and integration with CSS frameworks."
    },
    "1-5": {
      "title": "[v1.5](https://github.com/epicmaxco/vuestic-ui/milestone/11)",
      "description": "We focus on new services, components, testing and automation."
    },
    "1-4": {
      "title": "[v1.4](https://github.com/epicmaxco/vuestic-ui/milestone/7)",
      "description": "* Carousel component. \n * Stepper component. \n * Nuxt support."
    },
    "1-3": {
      "title": "[v1.3](https://github.com/epicmaxco/vuestic-ui/releases/tag/v1.3.0)",
      "description": "* CSS only table. \n * Data Table component. \n * Data Table theme for [AG grid](https://www.ag-grid.com/)[[target=_blank]]."
    },
    "1-2": {
      "title": "[v1.2](https://github.com/epicmaxco/vuestic-ui/releases/tag/v1.2.1)",
      "description": "* Date Input component. \n * Date Picker component. \n * Tree shaking (allows to import only components you need, reducing bundle size)."
    },
    "1-1": {
      "title": "[v1.1](https://github.com/epicmaxco/vuestic-ui/releases/tag/v1.1.0)",
      "description": "* SSR support (vite). \n * Remove medium-editor wrapper. \n * Russian translation. \n * Reduce bundle size (482KB)."
    },
    "1-0": {
      "title": "[v1.0](https://github.com/epicmaxco/vuestic-ui/tree/v1.0.0)",
      "description": "Starting point of vuestic-ui. \n * Reworked and added multiple components. \n * Added proper documentation."
    },
    "0-1": {
      "title": "[v0.1](https://github.com/epicmaxco/vuestic-ui/tree/1.0.0-alpha.0)",
      "description": "Not even alpha, we've just split components from [vuestic-admin](https://github.com/epicmaxco/vuestic-admin)[[target=_blank]] into separate repository to simplify updates."
    },
    "released": {
      "title": "Released",
      "description": " Already released versions"
    },
    "longTimeSupport": {
      "title": "Long time support",
      "description": "The following versions have continued maintenance for backwards compatible fixes, major bugs, and security vulnerabilities."
    },
    "archive": {
      "title": "Archive",
      "description": "The following releases are old and unsupported minor and major versions:"
    }
  },
  "accessibilityGuide": {
    "title": "Accessibility",
    "description": "Vuestic UI components are support keyboard interactions for all mouse-based actions, utilize HTML5 semantic elements where applicable and provide full coverage by WAI-ARIA attributes.",
    "examples": {
      "keyboardInteractions": {
        "title": "Keyboard accessible",
        "text": "All interactive elements of your page should be accessible by keyboard (e.g. text boxes, buttons, etc). That means you should be able focus on them via `Tab` and `Shift+Tab` keys. Focused via keyboard elements have their own visual state. For example, you can focus `date-input` component below via `Tab`, then call `date-picker` via `Enter` and select date, using left-right keys, `Shift+Tab` to focus year and month, `Enter` to confirm the selection and `Esc` to close the picker."
      },
      "waiAria": {
        "title": "WAI-ARIA",
        "text": "All our components are fully (depending on their roles) covered by [WAI-ARIA](https://www.w3.org/WAI/standards-guidelines/aria/)[[target=_blank]] attributes, providing full support for screen-readers. For example, simple input below provides for screen-readers information about inputs name, it is disabled or readonly, it is necessary to fill it and  it doesn't contain any validation errors."
      }
    }
  },
  "configurationGuide": {
    "title": "Configuration",
    "description": "Vuestic UI comes with a convenient mechanism that allows for a deep icons, components, and colors customization.",
    "readMore": "More on this topic",
    "examples": {
      "colors": {
        "title": "Color themes",
        "description": "You can easily modify the colors used by Vuestic UI components (and even add custom ones):",
        "defaultColors": "Default colors",
        "customColors": "Custom colors"
      },
      "colorsClasses": {
        "title": "Custom classes for the colors",
        "description": "By default, Vuestic UI creates custom classes for coloring the text and background colors of elements relative to the global color configuration.",
        "subtitle": "Configuring the custom classes",
        "subDescription": "With custom classes configuration you can create and/or use classes with styles associated with the global color configuration"
      },
      "icons": {
        "title": "Icon fonts",
        "description": [
          "By default Vuestic UI uses **material icons**, so make sure to install the package:",
          "After installing the **material icons** package, you need to import its styles into the `main.js` file."
        ],
        "subtitle": "Using custom icons",
        "subDescription": "With icons config you can use any icon font you'd like by simply transforming the icon names to respective props."
      },
      "components": {
        "title": "Components config",
        "intro": "If you want to set global defaults for Vuestic components or create presets — we have config for this as well!",
        "description": "Let’s say you want all of your buttons to be `outline` and `small` to match your design, but by default that's not the case:",
        "action": "To solve that problem edit to `main.js` file the following way:",
        "result": "Now all of your buttons by default will look like this:",
        "example": "You can configure any prop for any Vuestic UI component in such a manner.",
        "more": "In case your customization runs deeper consider [overriding CSS variables](/styles/css-variables#overriding) or even directly the `.class`' properties (components use BEM-notation so it should be easy to figure out which selector to address with the help of standard dev-tooling)."
      }
    }
  },
  "browserSupport": {
    "title": "Browser Support",
    "description": "We design Vuestic UI to be future proof. That's why we support modern browsers, but some old browsers, such as IE had to go, sorry. That decision was influenced by [dropped support in Vue 3](https://github.com/vuejs/rfcs/discussions/296)[[target=_blank]] and [falling usage rate](https://caniuse.com/usage-table)[[target=_blank]].",
    "table": {
      "browser": "Browser",
      "supported": "Supported"
    }
  },
  "overview": {
    "title": "What is Vuestic UI",
    "description": "Vuestic UI is an OpenSource Vue 3 based UI framework. It is a MIT-licensed UI framework that provides ready-to-use frontend components that are easily configurable and speed up development of responsive and fast-loading web interfaces. It was initially released in May 2021 by [Epicmax](https://epicmax.co/)[[target=_blank]] and that is what Vuestic UI today:\n\n",
    "featuresOverview": "Features overview",
    "features": [
      "Vue 3 compatible: Easy integration with the latest Vue.js\u00A0\uD83E\uDD18",
      "Contains 60+ ready-to-use classy UI components that can be used in any design solution\u00A0\uD83D\uDC85",
      "Dark Theme: Stylish built-in dark mode\u00A0\uD83D\uDDA4",
      "Accessible: designed for all users\u00A0❗",
      "Global config: Customize components effortlessly",
      "Responsive: Adapts to various screens and devices",
      "i18n integration: Simplify app internationalization",
      "Fast & professional technical support from [the core team](/introduction/team)\u00A0\uD83E\uDEC2"
    ]
  },
  "team": {
    "title": "Meet the Team",
    "description": "Hi there, we are really pleased to meet you too!\n\nVuestic started as a small admin template back in 2017. It was released on GitHub and was warmly embraced by the Vue.js community. Since then we’ve been contributing to Vuestic daily and today it’s grown into a full-fledged framework with a decent ecosystem around it.\n\nThe team behind Vuestic is in ❤️ with Vue.js and Open Source. We’re doing our best to make developers’ lives easier and  joyful.",
    "coreTeam": "Core Team 🤓",
    "coreTeamDescription": "Established in 2017, [Epicmax](https://epicmax.co/)[[target=_blank]] is a Vue.js development company with over 55 successfully completed projects for it’s clients all over the world.\n\nThe company is committed to Open Source from its beginning. Vuestic was created and backed by Epicmax, and is supported through all the years. You can request a consultation or order web development services by Epicmax via this [form](https://epicmax.co/contacts)[[target=_blank]]\n\nAnd now, please meet the core contributors 🎉",
    "specialThanks": "Special Thanks 🙌",
    "specialThanksDescription": "We’d like to thank all contributors and users of Vuestic. Your constant assistance, insights and feedback not only help Vuestic to get a better ecosystem, but also charges the core team with energy and enthusiasm to go an extra mile. With you everything is possible."
  },
  "translation": {
    "title": "Translation",
    "description": "For the moment being we only provide translations for the main documentation pages (such as Contribution, Getting Started, etc.). The actual translation-strings could be found at `packages/docs/locales`. Currently there are no translations available for the components' docs. After you finish working on a translation for some page, please, do not forget to update its status to `full` in the `locales/index.ts` file. Here's the current languages-support state:",
    "table": {
      "language": "Language",
      "code": "Code",
      "supported": "Support"
    },
    "language": {
      "en": "English",
      "ru": "Russian",
      "es": "Spanish",
      "zh-CN": "Chinese"
    },
    "status": {
      "part": "Partial support",
      "full": "Full support"
    },
    "sync": {
      "title": "Synchronizing locale files",
      "description": "You can sync the locale files with the following command (the source file is `en.json`):"
    },
    "unused": {
      "title": "Searching unused translations",
      "description": "You can search unused translations with the following command:"
    },
    "missed": {
      "title": "Searching missed translations",
      "description": "You can search missed translations with the following command:"
    },
    "code": {
      "title": "Translations inside code blocks",
      "description": "It's sometimes important to see a translated text instead of vue-i18n function inside a code block, so, we created some helpers that allow us to translate the text inside code blocks like we translate it inside a vue templates.",
      "warn": "Using translation in demos is an exceptional case. Generally we want to leave filler text untranslated, as it's expensive to support and provides no useful information.",
      "basicTitle": "Basic syntax",
      "basicText": "Just pass the vue-i18n function inside a code and the helper will return a translated text wrapped inside brackets.",
      "mustacheTitle": "Mustache syntax",
      "mustacheText": "Wrap the vue-i18n function inside double curly braces and the helper will return just a translated text.",
      "misc": {
        "scheme": "Scheme",
        "schemeText": "translation.path",
        "output": "Output",
        "outputText": "translated text"
      }
    }
  },
  "table": {
    "title": "Tables",
    "summaryText": "You can use plain `<table>`s with the `.va-table` class that would apply Vuestic-theme styles to them.",
    "otherTables": {
      "text": "If you want more functional solutions, use our data-table component or our theme for AG-Grid:",
      "dataTable": "Data Table",
      "agGrid": "AG Grid Theme"
    },
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "Add the `.va-table` class to the `<table>` element."
      },
      "hoverable": {
        "title": "Hoverable",
        "text": "Highlight hovered rows with additional `.va-table--hoverable` class."
      },
      "striped": {
        "title": "Striped",
        "text": "The `.va-table--striped` class colorizes each even row of the table."
      },
      "clickable": {
        "title": "Clickable",
        "text": "Change the cursor to `pointer` when hovering rows by adding the `.va-table--clickable` class"
      }
    }
  },
  "counter": {
    "title": "Counter",
    "summaryText": "The `va-counter` component is intended to be used as a simple counter.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default, `va-counter` has `v-model` prop, and may also include `stateful` state. With `manual-input` the user can manually enter a value."
      },
      "style": {
        "title": "Style",
        "text": "There are tree styles for component: default (solid), outline, bordered."
      },
      "buttons": {
        "title": "Buttons",
        "text": "By default, `va-counter` uses internal icons. The component with prop `buttons` will use external buttons."
      },
      "width": {
        "title": "Width",
        "text": "You can set the width of the entire component with `width`, as well as the indentation of external buttons with `margins`."
      },
      "buttonsStyle": {
        "title": "Buttons style",
        "text": "You can select different button styles using properties `flat` (by default `flat = true`), `rounded` (by default `rounded = false`) and `margins`."
      },
      "iconsColors": {
        "title": "Custom icons and colors",
        "text": "You can select different icons using the `increaseIcon` and `decreaseIcon` properties, and you can also select colors using `color` and `text-color`."
      },
      "state": {
        "title": "State",
        "text": "Component can be `disabled` or `readonly`."
      },
      "maxMinStep": {
        "title": "Max, min, step",
        "text": "You can define `min`, `max` and `step` values."
      },
      "slots": {
        "title": "Slots",
        "text": "You can use slots for pass custom elements: `content` (you can access to **value**) instead of **input** element, `decreaseAction` (you can access to **decrease** function) instead of decrease icon or button and `increaseAction` (you can access to **increase** function) instead of increase icon or button."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-counter/_variables.scss)[[target=_blank]]"
  },
  "guide": {
    "title": "Contribution guide",
    "description": "This guide describes the possible ways in which you can become a part of the ongoing development of Vuestic UI. We are really excited that you are interested in helping us make Vuestic better!",
    "quickStart": {
      "title": "Quick start",
      "description": "If you want to make some changes get a local copy of VuesticUI:",
      "steps": {
        "1": "Fork Vuestic repository",
        "2": "Clone your fork",
        "3": "Install dependencies with `yarn install`"
      }
    },
    "packages": {
      "title": "Packages",
      "description": "Vuestic has few packages in order of importance for newcommers:",
      "list": {
        "ui": "`packages/ui` - UI lib with demos. Here all vuestic components stored.",
        "docs": "`packages/docs` - [vuestic.dev](https://vuestic.dev) source code.",
        "nuxt": "`packages/nuxt` - {'`@vuestic/nuxt`'} module for Nuxt3.",
        "sandbox": "`packages/sandbox` - Package for testing build and treeshaking.",
        "vue-cli-plugin": "`packages/vue-cli-plugin` - vue add vuestic-ui plugin for vue-cli.",
        "ag-grid-theme": "`packages/ag-grid-theme` - AgGrid extension styles.",
        "deploy": "`packages/deploy` - Release scripts for core contributors."
      },
      "notice": "Likely you will deal only with `ui` and `docs` packages."
    },
    "commonlyUsedScripts": {
      "title": "Commonly used scripts",
      "list": {
        "demo": "`yarn serve` - this will run project with demos, where you can test component features.",
        "docs": "`yarn serve:docs` - this will run project with docs (deployed here [vuestic.dev](https://vuestic.dev)).",
        "generateDocspage": "`yarn generate:docspage` - this will generate docs page, so you can write some guide or tutorial.",
        "generateComponent": "`yarn generate:component` - this will make component template with docs page and demo page, so you can easily start making new component."
      },
      "notice": "You can find more scripts in `package.json` of each package."
    },
    "creating": {
      "title": "Making new components or docs pages",
      "description": "We have few generate scripts for you to make your life easier.",
      "scripts": {
        "docs": "`yarn generate:docs` will make new docs page.",
        "component": "`yarn generate:component` will make new component."
      }
    },
    "pullRequests": {
      "title": "Pull Request Guidelines",
      "description": {
        "localBranches": "The `master` branch keeps the latest stable release plus potentially some cherry-picked hotfixes. All the development should be conducted in local branches (fork of the project).",
        "dontSubmitToMaster": "**Do not submit PRs against the `master` branch.** Use the `develop` one instead.",
        "checkoutFeat": "Checkout a `feat/*` branch from the `develop`, then create a pull request to `develop`.",
        "multipleSmallCommits": "It's OK to have multiple small commits as you work on your PR - we will let GitHub automatically squash them into a single one before merging.",
        "fixBugSteps": "If fixing a bug:\n  * If you are resolving a certain issue, add `close #<xxx>[,#<yyy>]` (<xxx>, <yyy> is the related issues' ids) into the PR's description so that GitHub could [automatically close](https://docs.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword)[[target=_blank]] the related issue(s) as soon as the respective commits are merged into the `master` branch (i.e. as soon as a new version of Vuestic UI is out).\n  * Provide detailed description of the bug inside the PR in case the bug is not arranged in the form of a separate issue."
      }
    },
    "branches": {
      "title": "Branches",
      "publicBranches": "Public branches (**epicmax/vuestic-ui**):\n  * `master` - releases and hotfixes only. Do not submit PR's to `master`!\n  * `develop` - main development branch.",
      "localBranches": "Local branches\n  * For local branches prepend your messages with `feat/` or `fix/` (e.g. for a tabs-related fix it would be `fix/tabs`, `feat/date-picker` or `fix#1000/important-bug`). This is necessary to keep local branches visually separated from the public ones."
    },
    "forCoreContributors": {
      "title": "For the core contributors",
      "linkPr": "Always link a PR to its related issue (via `close #123`).",
      "assignYourself": "When you start working on a task - please self-assign the related issue. We don't want a lot of people working simultaneously on the same thing (except when intentional).",
      "smallIssues": "For small issues you may push to the `develop` branch directly while adding `close #123` to the commit message.",
      "singlePrPerIssue": "Create a single PR for one issue. If we have several PRs - move all the code into a single PR and close the rest. If one PR covers several issues - either split it in several PRs or mark one of the issues as duplicate.",
      "onePersonPerIssue": "Make sure to assign an issue to only a single person.",
      "checkYourCode": "Check your code: [conventions](https://github.com/epicmaxco/vuestic-ui/blob/master/packages/docs/conventions.md)[[target=_blank]].",
      "weUseYarn": "We use [yarn](https://yarnpkg.com/lang/en/)[[target=_blank]] for package management.",
      "beProactive": "Be proactive. If you think something is wrong - create an issue or discuss.",
      "recommendedTools": "Recommended tools: [GitKraken](https://www.gitkraken.com/)[[target=_blank]], [WebStorm](https://www.jetbrains.com/webstorm/)[[target=_blank]], [ShareX](https://getsharex.com/)[[target=_blank]].",
      "workInBook": "If you work on UI components - work in the book environment (`yarn serve:book`). We want to keep global stuff out of components."
    },
    "componentFolderStructure": {
      "title": "Component folder structure",
      "link": "See detailed guide here."
    },
    "credits": {
      "title": "Credits",
      "description": "[Hall of fame!](https://github.com/epicmaxco/vuestic-ui/graphs/contributors)[[target=_blank]]"
    }
  },
  "globalConfig": {
    "title": "Global config",
    "subtitle": "Global config allows to configure default values for colors, icons and component's props. ",
    "structure": "Global config consists of `icons`, `colors` and `components` (that also includes `all` and `presets`) configs. ",
    "setupExampleTitle": "You can provide a custom config via `createVuestic` fabric:",
    "reactiveUpdateExampleTitle": "Or you can update the configuration partially at the runtime:",
    "reactiveSetExampleTitle": "Alternatively, you can substitute the whole configuration object at the runtime with another one:",
    "links": {
      "readMore": "More on configuration",
      "icons": "Icons config",
      "components": "Components config",
      "colors": "Colors config",
      "colorsClasses": "Custom classes for the colors"
    },
    "useInRuntime": "The global configuration object might be made reactive:",
    "api": {
      "icons": "Used to configure icon fonts and aliases.",
      "components": "Used to globally overwrite props of specific components.",
      "componentsAll": "Used to globally set props for all components. If there are no other source of props.",
      "componentsPresets": "Used to specify named component's props combinations to use them later at the your application.",
      "colors": "Used to define theme colors that components make use of. Here you can redefine default Vuestic UI theme colors."
    }
  },
  "iconsConfig": {
    "problem": {
      "definition": "Depending on icon library, they could use classes, ligatures or components. So you have to configure vuestic icons to work with your icon solution.",
      "summary": "With icons config we can instead provide an icon name using any style that fits our needs the best. We only need to configure how an icon for with the provided name will be rendered."
    },
    "title": "Icons config",
    "about": "By default Vuestic UI uses [Material Design icons](https://fonts.google.com/icons)[[target=_blank]]. If that's too basic for you - vuestic has powerful icon config.",
    "readBeforeStart": "Find out more about the VaIcon component",
    "fonts": {
      "title": "Fonts",
      "about": "We want to use the `<va-icon name='icon-name' />` pattern. We can setup a config for a specific icon name pattern. In that config we provide an icon class, attributes, tag, contents (innerHTML) or a Vue component relative to icon name.",
      "fontNamePattern": {
        "title": "Font name pattern",
        "about": "Font name pattern is similar to vue dynamic routes. We can use dynamic segments to dynamically generate `IconConfig` in resolve function. Dynamic segments should be written in curly brackets."
      },
      "example": {
        "title": "Interactive playground",
        "about": "Here you can see how your code will be transformed with different icon configs. You can change icon config params to see how it impact on final render. See our presets before play.",
        "alert": "By default Vuestic require only Material Icons. Other icon libraries you need to setup yourself."
      },
      "readMore": "More information on"
    },
    "aliases": {
      "title": "Aliases",
      "about": "To make code simpler we can use aliases. Alias has a `to` prop which would change the name of a given icon to the value of `to` and look for an appropriate font config. All the props from resolved font would be applied to that icon if they were not defined in alias config.",
      "example": {
        "title": "Example aliases config",
        "about": "Below we can see how the icons would be transformed",
        "explain": "As you can see alias config is more important than font config. And `va-icon` props take precedence over both."
      },
      "vaAliases": {
        "title": "Vuestic component alises",
        "text": "We use some icons in our components by default. You can redefine them by changing it's alias."
      }
    },
    "setup": {
      "title": "Let's build our config",
      "about": "We need to update icons config in our global config. Icons config is a flat array with Vuestic default font and aliases. We can use the `createIconsConfig()` helper to create a new config with Vuestic defaults and our custom fonts and aliases merged together. For example:"
    },
    "api": {
      "title": "IconConfig",
      "description": "You can use IconConfig properties in aliases, fonts and as return in resolve function.",
      "name": "String or regex. Can be a string with dynamic segment or regex to use this config as font.",
      "iconClass": "Class that will be applied to the icon. Can be a string or a function that accepts dynamic segment value and returns a string.",
      "content": "Content that will be inside the icon. Can be a string or a function that accepts dynamic segment value and returns a string.",
      "component": "VueComponent that will be used instead of a tag.",
      "componentProps": "Props that will be bound to `component`. Can be an object or a function that accepts dynamic segment value and returns an object.",
      "to": "Here you can define name of a config which values will be merged to this config",
      "tag": "A tag to render icon with. By default - `i`",
      "color": "Sets the CSS `color` property to a given value",
      "rotation": "Rotates the icon by specified angle (in degrees)",
      "spin": "Applies the spin animation to the icon"
    }
  },
  "componentsConfig": {
    "title": "Components config",
    "subtitle": "Component config allows you to override default props values for any Vuestic component. It is an object where the keys are component names and the values are prop-value pairs you want to overwrite. Moreover, there are two more nested configuration objects &mdash; `presets` и `all`. `preset` allows you to specify named props combinations for any component. `all` allows you to specify props value for all Vuestic components. For example:",
    "demoTitle": "The example below allows you to change styling of all buttons for the whole Vuestic documentation site.",
    "resetConfig": "Reset config",
    "componentsAll": {
      "title": "All components config",
      "subtitle": "You could use `components.all` global config property to set prop values for all components at once. It will be applied if there are no other source of prop value. For example:",
      "description": "These prop values will be used as defaults if prop is not set somewhere else (inside the component or other configs)."
    },
    "componentsPresets": {
      "title": "Presets config",
      "subtitle": "As was said, `presets` allows you to specify named props combinations for Vuestic components and then use them in your application. For example:"
    },
    "vaConfig": {
      "title": "Scoped config",
      "subtitle": "You can use the `<va-config>` component to overwrite the default props values for the components inside that tag. Take a look at the demo below:",
      "explain": "Look at the code. In this demo we have changed the default color for all the `VaButton` and `VaIcon` inside the `VaConfig`. We also have passed a different value to the third button's `color` prop (direct component's prop takes precedence over the one specified on the `VaConfig`).",
      "vaConfigComponentLink": "Find out more about VaConfig component"
    },
    "priority": {
      "title": "Props values priority",
      "description": "You are able to specify props values via: direct, `va-config`, `presets config`, `components config`, `components all config`. Their priority (in case several options were used) is presented at the scheme below:"
    },
    "defaultSizes": {
      "title": "Default sizes",
      "description": "If you would like to set default sizes for the component you could use sizesConfig property. Feel free to check the example below:"
    },
    "api": {
      "title": "Component config service API",
      "types": "Types",
      "ComponentConfig": "Object where the keys are Vuestic component names and the values are the component's new default props.",
      "ComponentsAllConfig": "Object where the keys are prop names and the values are the prop's new default values. Will be applied if there are no other source of prop value.",
      "ComponentsPresetsConfig": "Object where the keys are Vuestic component names and the values are objects where the keys are prop names and the values are the prop's values."
    }
  },
  "colorsConfig": {
    "title": "Colors config",
    "about": "You can personalize colors that are used in your app. The colors used by Vuestic components may be redefined dynamically. You can also add your own colors that you intend to use frequently in your app.",
    "example": {
      "about": "For example, you can change the `primary` color that is used by almost all Vuestic components.",
      "demo": "Pick a different primary color below and notice how the colors are changing all over the page."
    },
    "reactivity": {
      "subtitle": "Reactivity",
      "about": "Methods like `getColors` return a computed reactives that can also be accessed by variable `colors`. The advantage is allow to change properties, instead of rewriting whole colors variable. For example, you can change `primary` color by writing `colors.primary = \"#ff0\"`. Multiple properties changes are also supported, you can write `setColors({'{ primary: \"#00f\", secondary: \"#0ff\" }'})`."
    },
    "otherServices": {
      "subtitle": "Colors config with other services",
      "components": "You can use your custom colors in Components config.",
      "icons": "As well as in Icons config.",
      "css": "CSS-variables do also respect the color config and dynamically change their values!"
    },
    "api": {
      "title": "Colors config service API",
      "types": "Types",
      "colorConfig": "Configuration object where is defined color variables, threshold, presets and current preset name.",
      "cssColor": "A valid CSS color.",
      "essentialVariables": "An object where the keys are the color names and values are valid CSS colors.",
      "colorVariables": "An object where the keys are the color names and values are valid CSS colors.",
      "methods": "Methods",
      "applyPreset": "Applies preset by its name to the colors config.",
      "useColors": "Return colors methods and variables.",
      "setColors": "Used to merge new colors into config or update existing colors.",
      "getColors": "Returns current color config.",
      "getColor": "Return color by name.",
      "getComputedColor": "Returns compute color from colors variables.",
      "getBoxShadowColor": "Return a color that is appropriate to be used for the `box-shadow`.",
      "getBoxShadowColorFromBg": "Return a color that is appropriate to be used for the `box-shadow`.",
      "getHoverColor": "Return a color that you can use as a `hover` color.",
      "getFocusColor": "Return a color that you can use as a `focus` color.",
      "getGradientBackground": "Return a gradient-color that you can use as a `background-image` CSS property's value.",
      "getTextColor": "Returns a color depending on the background lightness.",
      "shiftHSLAColor": "Returns shifted HSLA color.",
      "setHSLAColor": "Sets HSLA color.",
      "colorsToCSSVariable": "Converts object of colors to the object of named css variables.",
      "colorToRgba": "Converts named color to the `rgba` string.",
      "getStateMaskGradientBackground": "Returns a CSS linear-background value for the `background-image` property.",
      "hookMethods": "useColors hook methods.",
      "hookVariables": "useColors hook variables.",
      "colors": "A computed reactive where the keys are color names and values are valid CSS colors."
    }
  },
  "breakpoints": {
    "title": "Breakpoint Service",
    "about": "Vuestic UI provides breakpoint service that allows you to control every aspect of your application which depends on the window size.",
    "sizes": {
      "intro": "We use the following breakpoints:",
      "xs": "`.xs` - (< 640px) - Extra small devices",
      "sm": "`.sm` - (>= 640px && < 1024px) - Small devices",
      "md": "`.md` - (>= 1024px && < 1440px) - Medium devices",
      "lg": "`.lg` - (>= 1440px && < 1920px) - Large devices",
      "xl": "`.xl` - (>= 1920) - Extra large devices"
    },
    "helpers": {
      "title": "Helpers",
      "about": "Breakpoint service provides amount of helpers via `useBreakpoint` composable.",
      "list": {
        "title": "Helpers list:",
        "thresholds": "List of the current thresholds.",
        "exactThreshold": "`true` only for mentioned threshold.",
        "width": "Current window width (`px`).",
        "height": "Current window height (`px`).",
        "current": "Current breakpoint name.",
        "downHelper": "`true` for mentioned threshold and all below it.",
        "upHelper": "`true` for mentioned threshold and all above it."
      }
    },
    "class": {
      "title": "Threshold Class",
      "about": "Optional part of the service - reactive `body` class (`.va-screen-lg` for example) that allows you to build the following CSS constructions:"
    },
    "configuring": {
      "title": "Configuring",
      "about": "You can specify your own thresholds values, disable threshold class support or the whole service via Vuestic UI configuration object."
    },
    "examples": {
      "default": "Current breakpoint is:"
    }
  },
  "cssVariables": {
    "title": "Css Variables",
    "description": "Vuestic UI extracts crucial CSS styles in the form of [CSS variables (custom properties)](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties)[[target=_blank]]. No need to install any loaders or additional packages to override components' styling. Instead, you can deeply customize components' visuals using the following simple syntax.",
    "convention": {
      "title": "Convention",
      "description": "Vuestic UI uses the following convention to organize CSS Variables for the sake of convenience:",
      "list": [
        "`components-name` can include sub block names, for example: `card`, `button-content`, `input-placeholder`.",
        "`variable-name` usually is just CSS property name, for example: `display`, `align`, `border-radius`."
      ],
      "notice": "List of component CSS variables can be found at the bottom of its documentation page."
    },
    "overriding": {
      "title": "Global Overriding",
      "description": "No additional tooling is needed. Just create a CSS file (like `overrides.css`), import it into your `main.js` and start redefining the variables as you do with any other CSS properties:"
    },
    "examples": {
      "profile": {
        "title": "CSS variables override example",
        "description": "If you dislike how component looks, you can override default component style. Each component has list of CSS variables, that you override. For example, you want to change avatar `border-radius`:"
      }
    }
  },
  "navbar": {
    "title": "Navbar",
    "examples": {
      "default": {
        "title": "Default",
        "text": "You can use left, center and right slots to pass items to navbar. "
      },
      "colors": {
        "title": "Colors",
        "text": "By default navbar uses `secondary` color. You can pass `color` props to change navbar background color. Also, text color depends on navbar background color. But you can pass own color if you want."
      },
      "shape": {
        "title": "Shape",
        "text": "You can add the shape to navbar background. Shape color will be taken automatic from `color` prop."
      },
      "height": {
        "title": "Height"
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-navbar/_variables.scss)[[target=_blank]]"
  },
  "buttonDropdown": {
    "title": "Button Dropdown",
    "summaryText": "Component with a button that displays dropdown content when getting clicked. It inherits properties, provided by [VaButton](/ui-elements/button) and [VaDropdown](/ui-elements/dropdown) components.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "Just wrap your content with `va-button-dropdown` component and it will become available only via click."
      },
      "split": {
        "title": "Split",
        "text": "The `split` prop allows you to split the button into two, with different purposes of using. One of them can be a link (you can set href for it via `split-to` or `split-href` props, which are analogues of the `to` and `href` attributes)."
      },
      "colors": {
        "title": "Colors",
        "text": "The component can be colored via `color`, `gradient` and `text-color` props."
      },
      "sizes": {
        "title": "Sizes",
        "text": "You are able to set component's size via `size` prop (`small`, `medium` or `large` presets are available, `px` and `rem` values are also suitable)."
      },
      "styles": {
        "title": "Presets and styles",
        "text": "You can use the same `preset`'s (`default`, `primary`, `secondary`, `plain`, `plainOpacity`) and styles (`round`, outline via `borderColor` property) as in [va-button](https://vuestic.dev/ui-elements/button)[[target=_blank]]."
      },
      "disabled": {
        "title": "Disabled",
        "text": "The component can be disabled via `disabled` prop. For the `split` state can be disabled both or only one button (via `disableButton` and `disableDropdown` props)."
      },
      "icons": {
        "title": "Icons",
        "text": "You can set the dropdown icon and its color via `icon` and `icon-color` props. Also you are able to change icon's position from right to  left side of the button via `left-icon` boolean prop. If you want to remove icon at all, use the `hide-icon` property. Opened-state icon can be changed using `openedIcon` prop."
      },
      "clickInside": {
        "title": "Click inside",
        "text": "You are able to set up the dropdown to be closed or not after clicking on its content using the `close-on-content-click` prop."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-button-dropdown/_variables.scss)[[target=_blank]]"
  },
  "popover": {
    "title": "Popover",
    "summaryText": "A `va-popover` can be used to display some text on top of the component.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "Wrap your component in a `va-popover` tag and provide a `message` property with text."
      },
      "color": {
        "title": "Color",
        "text": "You can set different background colors to the component."
      },
      "placement": {
        "title": "Placement",
        "text": "A component can be set in a different position. Use a position property to set it: `top`, `left`, `right` and `bottom` are available. [More about placements](/ui-elements/dropdown#placement-and-offset)"
      },
      "icon": {
        "title": "Icon",
        "text": "You can set an icon to the component."
      },
      "title": {
        "title": "Title",
        "text": "You can set a title to the popover."
      },
      "trigger": {
        "title": "Trigger",
        "text": "Events triggering the popover separated with spaces: `hover`, `click` or `focus`."
      },
      "slots": {
        "title": "Slots usage",
        "description": "You can use `icon`, `title` and `body` slots to provide your own extra content into the popover component."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-popover/_variables.scss)[[target=_blank]]"
  },
  "typography": {
    "title": "Typography",
    "description": "To improve your application's UX, make sure to style the typography the way that would match the rest of the Vuestic-UI-based look and feel.",
    "headings": "Headings",
    "titled": "Title heading",
    "textStyles": "Text styles",
    "codeSnippet": "Code snippet",
    "codeSnippetWarn": "You need to install `Source Code Pro` font if you want to use `.code-snippet` class",
    "textCode": "Text-code",
    "other": "Other typography styles",
    "list": "List styles",
    "orderedList": "Ordered list",
    "unorderedList": "Unordered list",
    "links": "Links",
    "textHighlighted": "Highlighted text",
    "blockquote": "Blockquote",
    "textBlock": "Text block",
    "textHelpers": "Text helpers"
  },
  "agGrid": {
    "title": "AG Grid Theme",
    "description": "If you need more flexible customization of the display of tables, we recommend using the [AG Grid](https://www.ag-grid.com/vue-data-grid/getting-started)[[target=_blank]] library. Vuestic UI provides a ready-made style theme for this library.",
    "otherTables": {
      "text": "Also, we provide styles for HTML Table and have own data-table component:",
      "htmlTable": "HTML Table",
      "dataTable": "Data Table"
    },
    "installation": "AG Grid installation",
    "dependencies": "To start using AG Grid, install the dependencies in your project.",
    "importStyles": [
      "Then import the stylesheet that defines the grid \"structure\" into the `main.*` file and apply the `ag-theme-vuestic` theme on the grid component.",
      "Depending on your project setup and or your purposes you can import pre-compiled CSS styles `{'@'}vuestic/ag-grid-theme` or `{'@'}vuestic/ag-grid-theme/scss` to use our SCSS mixins."
    ],
    "examples": {
      "default": {
        "title": "Default usage",
        "text": "To render a vuestic-style table correctly, you must provide the table dimensions (`width` and `height`), dataset (`rowData`) and column definitions (` columnDefs`) according to this dataset."
      },
      "styles": {
        "title": "Styles",
        "text": "The theme supports the use of the classes `ag-theme-vuestic--striped` to highlight each even row of the table and` ag-theme-vuestic--hoverable` to highlight a line on hover."
      },
      "filter": {
        "title": "Filters and sorting",
        "text": "You can provide some options for the definition object to enable filtering and sorting."
      },
      "pinning": {
        "title": "Rows pinning",
        "text": "To pin rows at the top or bottom, simply provide an array of rows for the `pinnedTopRowData` and `pinnedBottomRowData` properties."
      },
      "pagination": {
        "title": "Pagination",
        "text": "You can enable pagination for the table by providing the required properties."
      },
      "editable": {
        "title": "Cell editing",
        "text": "Provide `editable` property to column definition and then double click or press Enter on selected cell to enable editing mode."
      }
    },
    "attention": "Vuestic-UI provides styles for AG-Grid Community and doesn't change any functional. For more examples and differences between Community and Enterprise versions visit the official [AG-Grid documentation page](https://www.ag-grid.com/vue-data-grid/column-properties/)[[target=_blank]]."
  },
  "dataTable": {
    "title": "Data table",
    "description": "The `va-data-table` component is used for displaying tabular data. Features include sorting, searching, pagination, row selection, ability to add additional row(s) to table header (`thead`), body (`tbody`) or footer (`tfoot`) and other functions.",
    "otherTables": {
      "text": "Also, we provide styles for HTML Table and have own theme for AG-Grid:",
      "htmlTable": "HTML Table",
      "agGrid": "AG Grid Theme"
    },
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "The standard `va-data-table` will by default render your data as simple rows."
      },
      "grid": {
        "title": "Grid mode",
        "text": "The `grid` property set the grid display mode for the table."
      },
      "slots": {
        "title": "Slots",
        "text": [
          "Slots allow you to control the display of data and their views in different parts of the table. The examples below demonstrate some of these slots and what you can do with each of them.",
          "**Using custom slots**. Custom slots (*username*, *street* and *company name*) display certain data.",
          "**Showing header, body and footer's prepend and append static rows**. For added (prepended and appended) static rows an additional `className` with a background color is set.",
          "**Using `colgroup` slot to set specific attributes to columns**. For last column an additional `className` with a background color is set.",
          "Slot names that are not in `columns` will be omitted."
        ]
      },
      "filtering": {
        "title": "Filtering",
        "text": "`va-data-table` allows to apply a single filter for the entire table with the `filter` prop. To use a custom filtering function provide the `va-data-table` with the `filter-method` prop.\n\nThe following example shows the use of a custom filtering function (which looks for the exact match rather than the standard one which checks for substring-inclusion) when the respective checkbox is checked."
      },
      "sorting": {
        "title": "Sorting",
        "text": [
          "You can specify which columns should be sortable by providing a column definition object (see the `columns` prop below) with the `sortable: true` field. Making a column sortable means allowing to click the column's header to toggle the sorting by that column's values.",
          "You can use the `sortingOptions` property to set the sort order for the table as a whole, as well as for each column individually in the `columns` object.",
          "You can also provide a custom sorting function for a given column using the `sortingFn` field on the column definition object: `sortingFn: (a: any, b: any) => number`. The function takes two cells' initial values (a, b) (**note: initial values** (i.e. in the form the user provided them, rather than stringified)) and must return a number (-1, 0, +1) indicating whether the two rows should be swapped the places or not. See the standard JS's [Array.prototype.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)[[target=_blank]] for details. If you want to runtime-disable the custom function and start making use of the built-in one, pass the `undefined` to the `sortingFn`.",
          "`va-data-table` also optionally accepts the `sort-by` and the `sorting-order` modeled props, which allow users to change sorting settings from-outside and to model the changes introduced to the table's sorting by interacting with the table itself. They also allow to provide initial sorting values. **Properties work through the `v-model`**."
        ]
      },
      "selection": {
        "title": "Selection",
        "text": [
          "Use the `selectable` prop to indicate whether the `va-data-table` should have selectable rows or not. The highlighting color of the selected row might be changed with the `selected-color` prop.",
          "The selection may optionally be attached to a model with the standard `v-model` (using the `:model-value` prop and the `update:modelValue` event). This also allows to set the initial selection on the `va-data-table`.",
          "If you have items that can be updated (from the backend, for example), you must set the `items-track-by` prop to track your selected items properly."
        ]
      },
      "pagination": {
        "title": "Pagination",
        "text": "Use the `per-page` and `current-page` props to enable pagination.\n\nThe `va-data-table` component is paginator-agnostic. I.e. it can work with any pagination component you'd like. In the example below, it uses both standard inputs and the `va-pagination` component."
      },
      "styling": {
        "title": "Column styling",
        "text": "Should be specified on columns (see the `columns` prop below). Allows to provide different values (`text-align`, `vertical-align` and `width` css properties, custom `class` and `style`) for headers and for columns' cells."
      },
      "binding": {
        "title": "Row and cell attrs binding",
        "text": "Row and cell customization can be achieved by binding attributes for items using `row-bind` and `cell-bind`."
      },
      "sticky": {
        "title": "Sticky header and footer",
        "text": [
          "The sticky header and footer are set by the `sticky-header` and `sticky-footer` properties. Sticky behavior is achieved through CSS with `position: sticky`. This is NOT supported on all browsers. Check [caniuse.com](https://caniuse.com/?search=sticky)[[target=_blank]] before using this technique.",
          "To work correctly, it is important to limit the height (set the value in the `height` property of the component or using the CSS `height` or `max-height` properties) of the table and assign a background color (set the CSS value `background-color`) of the table header."
        ]
      },
      "virtualScroll": {
        "title": "Virtual scroll",
        "text": "The `virtual-scroller` prop enables virtual scroll for `tbody` rows ([read more](/ui-elements/virtual-scroller)). Pay your attention, that CSS transition is disabled here because of possible performance problems."
      },
      "expandableRow": {
        "title": "Expandable rows",
        "text": "Each row could can be additionally expanded by providing `expandableRow` slot. Slot expansion is triggered by `row.toggleExpandableRow` slot property"
      },
      "inlineEditing": {
        "title": "Inline Editing",
        "text": "Inline cell editing example. We provide a `#cell` slot for each column. The [VaValue](/ui-elements/value) component provides a boolean variable, which we can use to show/hide input. To change cell data we need access it by reference using `row.rowData[item.key]` - this way vue can track reactivity. Additional CSS is used to make the table look better. This way you can use [VaInput](/ui-elements/input), [VaSelect](/ui-elements/select) or any other component to edit data inline."
      },
      "other": {
        "title": "Other",
        "text": [
          "The component has many different properties, some of them are shown below with an example.",
          "Example of `va-data-table` with **CRUD** actions using a `va-modal` component for editing each row:"
        ]
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-data-table/_variables.scss)[[target=_blank]]"
  },
  "uiElementGuide": {
    "title": "UI Element Requirements",
    "description": "This page is intended for Vuestic UI contributors. It describes the requirements for the UI elements.",
    "highLevelStrategy": {
      "title": "High Level Strategy",
      "description": {
        "userExpectations": "Components should be as user expects them to be. We achieve that by checking refs ([Vuetify](https://vuetifyjs.com)[[target=_blank]], [Quasar](https://quasar.dev)[[target=_blank]], [Ant Design](https://ant.design)[[target=_blank]], [iView](http://iview.talkingdata.com)[[target=_blank]], [Element UI](https://element.eleme.io)[[target=_blank]], etc.).",
        "qualityComponents": "Components should be of high quality. We achieve that by manually testing edge-cases and by early refactoring."
      }
    },
    "coreFeatures": {
      "title": "Core Features",
      "description": {
        "visualFeedback": "**Visual feedback** - When a user interacts with a component they should see a result of their actions (could be implemented with :active selector or somehow else depending on the case).",
        "keyboardNavigation": "**Keyboard navigation** - You must ensure that UI elements are keyboard-accessible, and you must disable that functionality for elements that should not receive keyboard focus.",
        "statelessSupport": "**Stateless support** (see the [StatefulMixin](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/mixins/StatefulMixin/README.md)[[target=_blank]])."
      }
    }
  },
  "treeShakingRequirements": {
    "title": "Requirements for Treeshaking",
    "description": "This page for contributors describes the basic rules and restrictions that need to be taken into account when developing for correct work Treeshaking.",
    "about": {
      "title": "How TreeShaking works",
      "description": "We made several build formats:",
      "distFormats": {
        "esm": "esm - used for tree-shaking",
        "esmSsr": "esm-ssr - also used for tree-shaking, but uses {'@'}vue/server-side-renderer.",
        "iife": "iife - used by browsers, can be included to page without bundler.",
        "cjs": "cjs - used for bundlers that use CommonJS (e.g. node) format instead of ESM",
        "style": "styles - SCSS utils, that is not required for components."
      },
      "notice": "We use Webpack for local development and rollup for build, so we have a special package to test this two things - bundlers-tests"
    },
    "requirements": {
      "title": "Requirements and rules",
      "esModules": "We need to use ES module (esm format) and Named Exports (`export { something }` instead of `export default something`). Export default breaks tree shaking for importend file. It will fully loaded by bundler.",
      "dependencies": "TreeShaking works only with node modules, that is written in esm format. For example, we use `lodash-es` instead of `lodash`. That way we compile only functional we need instead of full library.",
      "beforeBuild": "Before release check dist with `bundlers-tests`. We need to check build with Webpack, Vite (Rollup) because vuestic-ui can work different for this two."
    }
  },
  "timePicker": {
    "title": "Time Picker",
    "examples": {
      "default": {
        "title": "Default",
        "text": ""
      },
      "framed": {
        "title": "Framed",
        "text": ""
      },
      "visibleCellsCount": {
        "title": "Controlling the count of displayed cells",
        "text": "For the better view need to set odd numbers"
      },
      "readonlyAndDisabled": {
        "title": "Readonly and disabled",
        "text": ""
      },
      "ampm": {
        "title": "AM PM",
        "text": "You can specify `ampm` props if you want to use 12-hours clock format set as true or 24-hours clock set as false."
      },
      "periodUpdatesModelValue": {
        "title": "Period updates model value",
        "text": ""
      },
      "view": {
        "title": "View",
        "text": "You can specify if time picker needs to show seconds and minutes."
      },
      "filter": {
        "title": "Filter",
        "text": "You can hide specific time and user will not be able to select it."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-time-picker/_variables.scss)[[target=_blank]]"
  },
  "timeInput": {
    "title": "Time Input",
    "description": "Time Input component is a combination of Time Picker and Input components. You can find usage examples using following links:",
    "examples": {
      "default": {
        "title": "Default",
        "text": ""
      },
      "input": {
        "title": "Parsing",
        "text": "Default parse time function likely cover all of your needs, but you can provide your own parse function using `parseTime` prop.",
        "notion": "It can parse such inputs: 11, 11:00, 11:00:00, 11 pm, 23, 2300, 11.00, 11somejunk00"
      },
      "format": {
        "title": "Formatting",
        "text": "We format input text specific to `view` prop. You can pass custom format function that accepts Date and return string."
      },
      "ampm": {
        "title": "AM PM",
        "text": "VaTimeInput will automatically format input string if you need to use AM PM."
      },
      "clearable": {
        "title": "Clearable",
        "text": "The `clearable` prop adds a button to the right to clear the input. Prop `clearableIcon` sets the custom clear icon."
      },
      "validation": {
        "title": "Validation",
        "text": "Validation works the same way as `VaInput` validation, except rules functions should accept `Date` instead of string."
      }
    }
  },
  "stepper": {
    "title": "Stepper",
    "description": "Stepper allows users to separate content into several steps and navigate through it using buttons or timeline.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": ""
      },
      "vertical": {
        "title": "Vertical",
        "text": ""
      },
      "icons": {
        "title": "Custom icons",
        "text": "Each step config could have icon name specified, check `va-icon` for more details."
      },
      "custom": {
        "title": "Customized with slots",
        "text": ""
      },
      "minimal": {
        "title": "Navigation only",
        "text": "You can hide controls and use stepper navigation independently"
      }
    },
    "accessibility": "The component itself has a [role=\"group\"](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/group_role)[[target=_blank]] with aria attributes like an [aria-orientation](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-orientation)[[target=_blank]] attribute that depends on the `vertical` property. The current step element has the attribute [aria-current=\"step\"](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current#values)[[target=_blank]]. Keyboard navigation for this component is based on the [w3 tabs pattern](https://www.w3.org/WAI/ARIA/apg/patterns/tabs/)[[target=_blank]].",
    "alerts": {
      "slots": "You can iterate through slots using template literals in slot name. \n Example: ``{'#[`step-button-${i}`]=\"{ setStep, isActive, isCompleted }\"'}``"
    }
  },
  "colors": {
    "title": "Colors",
    "description": "Vuestic UI defines `CSS variables` of the colors that are used in your application. This allows you to easily build your selectors using the colors you specified in the [Colors Config](https://vuestic.dev/en/services/colors-config).",
    "customAlert": "This is a custom alert that uses CSS variables.",
    "syntax": {
      "title": "Syntax",
      "description": "Vuestic UI uses the following syntax to organize `CSS variable` of the colors:",
      "scheme": "Scheme",
      "name": "the name of the color specified in the Colors Config.",
      "example": "Example",
      "availableCss": "Available CSS variables",
      "colorsUsed": "Each default color of Vuestic UI  (including overridden colors) and the new custom color have their own `CSS variables`."
    },
    "reactivity": {
      "subtitle": "Reactivity",
      "about": "These variables reactive relative to `Colors Config`. This means that they will be updated when the configuration changes. Read more about how to update the configuration [here](https://vuestic.dev/en/services/colors-config#icon-config-service-api).",
      "additional": "Please note that changing `CSS variables` of the colors directly, in turn, will not update `Colors Config`."
    },
    "theme": {
      "title": "Color presets",
      "description": "Vuestic is shipped with two built-in color pressets: light and dark. You can switch between them using `applyPreset` method from `useColors`. You can check example bellow:",
      "autoTextColor": "We use abstract color names instead of absolute names. You can click on each color above to see its description and where is it used.",
      "colors": {
        "primary": "Accent color used on button, links and other interactive elements",
        "secondary": "Accent color used on non important interactive elements",
        "success": "Accent color for success validation, alerts or toasts",
        "danger": "Accent color for error validation, alerts or toasts",
        "info": "Accent color for info toasts or alerts",
        "warning": "Accent color for warning toasts or alerts",
        "backgroundPrimary": "Page background",
        "backgroundSecondary": "Card, Modal, Dropdown background",
        "backgroundElement": "Input, switch, divider background colors",
        "backgroundBorder": "Used as border color in elements like input, switch etc.",
        "textPrimary": "Main text used on page. Used as default color on background colors.",
        "textInverted": "Used as text color, if `textPrimary` doesn't have enough contrast with background color.",
        "shadow": "Color of shadows that used in elements like cards, modals etc.",
        "focus": "Keyboard focus outline color"
      }
    }
  },
  "carousel": {
    "title": "Carousel",
    "examples": {
      "default": {
        "title": "Default",
        "text": ""
      },
      "arrows": {
        "title": "Arrow buttons",
        "text": "Arrow buttons allow user switch to next or previous slide."
      },
      "indicators": {
        "title": "Indicator buttons",
        "text": "Indicators (or dots) used to quickly change slide by it's index."
      },
      "vertical": {
        "title": "Vertical",
        "text": ""
      },
      "slots": {
        "title": "Slots",
        "text": "Slots allow you to customize carousel component."
      },
      "infinite": {
        "title": "Infinite",
        "text": "Smooth scroll transition."
      },
      "autoscroll": {
        "title": "Autoscroll",
        "text": "Autoscroll animation."
      },
      "fade": {
        "title": "Fade",
        "text": "Additional carousel slide switch effect."
      },
      "swipe": {
        "title": "Swipe",
        "text": "The `swipable` prop enables swipe behavior for the component."
      },
      "ratio": {
        "title": "Ratio",
        "text": "The `ratio` prop allows you to set the aspect ratio of the carousel."
      },
      "height": {
        "title": "Height",
        "text": "If you need specific height instead of ratio, you can use `height` prop."
      }
    },
    "variables": "[GitHub Variables Page](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/va-carousel/_variables.scss)[[target=_blank]]"
  },
  "nuxt": {
    "title": "Nuxt integration",
    "description": "Vuestic UI is fully compatible with Nuxt3. You can use Vuestic UI in your Nuxt3 project.",
    "createVuestic": {
      "title": "Scaffold new Nuxt app with Vuestic",
      "description": "The easiest way to create new Nuxt project with integrated Vuestic is to use `create-vuestic` tool. Create new project and select `Nuxt` template.",
      "link": "See detailed guide here."
    },
    "installation": {
      "title": "Manual Installation",
      "plugin": "Install integration module:",
      "nuxtConfig": "Then you need to update nuxt-config.ts file:",
      "moreAboutConfig": "More about configuration"
    },
    "treeShaking": {
      "title": "Tree shaking",
      "description": "Vuestic UI is tree-shaking friendly in Nuxt as well. You can choose which css modules will be used. This can be configured in `nuxt.config.ts`. Components must be tree-shakable automatically.",
      "css": "In `css` options you can pass array of css modules that will be used in the project or `false` to remove all css from Vuestic expect components css. Available modules: `typography`, `grid`, `reset`. In example below grid will not be used in project. This is helpful in case you already using some other library."
    },
    "options": {
      "title": "Options",
      "option": {
        "config": "Vuestic [Global Config](/services/global-config)",
        "css": "Choose which CSS modules will be added to nuxt. If `true` all CSS modules will be added",
        "fonts": "Adds Vuestic default fonts to head"
      }
    },
    "vuesticConfig": {
      "title": "vuestic.config.ts",
      "description": "Because of nuxt config limitation, it is impossible to pass functions trough `nuxt.config.ts`. But you can create `vuestic.config.ts` which will be passed to { '`@vuestic\/nuxt`' }. Use `defineVuesticConfig` to define type safe configuration for Vuestic UI.",
      "iconsConfig": "Read more about Icons Config"
    }
  },
  "ssrGuide": {
    "title": "SSR",
    "description": "Vuestic is fully compatible with server-side rendering.",
    "cssVariables": {
      "title": "CSS variables",
      "description": "Vuestic UI uses `CSS variables` in components. For SSR you need to define them in html head element. You can use following code to generate CSS Variables based on your [ColorConfig](/services/colors-config):"
    },
    "solutions": {
      "title": "Examples",
      "description": "Here are two examples how you can add CSS variables to html head",
      "nuxt": "Look at Nuxt3 guide",
      "viteSsrPlugin": {
        "title": "Vite SSR Plugin",
        "description": "Learn more about [Vite SSR Plugin](https://vite-plugin-ssr.com/vue-tour)"
      },
      "vitesse": {
        "title": "Vitesse",
        "description": "Learn more about [Vitesse](https://github.com/antfu/vitesse) and [useHead](https://github.com/vueuse/head#server-side-rendering)"
      }
    }
  },
  "treeView": {
    "title": "Tree view",
    "description": "Component for the hierarchical and nested data",
    "examples": {
      "default": {
        "title": "Basic usage"
      },
      "customizableContent": {
        "title": "Customizable content",
        "text": "You can customize the body of node"
      },
      "filters": {
        "title": "Filters"
      },
      "selectable": {
        "title": "Selectable"
      },
      "selectableColored": {
        "title": "Colored checkboxes"
      }
    }
  },
  "spacer": {
    "title": "Spacer component",
    "summaryText": "`va-spacer` is an equivalent for the `flex-grow` property. It allows you to get more space between flex components.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "`va-spacer` adding a div with the `.va-spacer` class."
      }
    },
    "accessibility": "The component completely ignored by screen readers because of [aria-hidden=\"true\"](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-hidden)[[target=_blank]] attribute."
  },
  "scrollContainer": {
    "title": "Scroll container",
    "description": "Scroll container with custom colored scrollbar. Useful in case you have long list.",
    "examples": {
      "default": {
        "title": "Default usage"
      },
      "color": {
        "title": "Color",
        "text": "You can change color of scrollbar by passing `color` prop. Try it by choosing colors listed below."
      },
      "gradient": {
        "title": "Gradient",
        "text": "The `gradient` prop enables gradient for scrollbar's background."
      },
      "rtl": {
        "title": "RTL",
        "text": "The `rtl` prop enables RTL-mode."
      },
      "horizontal": {
        "title": "Horizontal",
        "text": "You can specify if scroll container has `horizontal` scroll in the same way as `vertical` one."
      },
      "size": {
        "title": "Size",
        "text": "You are able to set scrollbar's size (width or height) via `size` prop (`small`, `medium` or `large` presets are available, `px` and `rem` values are also suitable)."
      }
    }
  },
  "split": {
    "title": "Split",
    "summaryText": "`va-split` component splits container into 2 horizontal/vertical panels. You can change panels sizes via grabbing the separator-grabber between them.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": ""
      },
      "vertical": {
        "title": "Vertical",
        "text": "Prop `vertical` changes components orientation to vertical."
      },
      "customGrabber": {
        "title": "Custom grabber",
        "text": "You can pass via `grabber` slot any content which will overwrite default grabber (`va-divider`)."
      },
      "customLimits": {
        "title": "Limits",
        "text": "`limits` prop allows you to set up panels min-max sizes. For example, `[[10, 'any'], ['50px', '30rem']]` (sum of different panels min and max size should be equal to 100%) will set up min size of the start panel to 10%, max - 100%. For the end panel - 50px and 30rem accordingly. If you don't need max sizes limits but only min ones, you can use this record form: `[10px, 50%]`."
      },
      "snapping": {
        "title": "Snapping",
        "text": "`snapping` and `snapping-range` props allow you to set up a virtual marks, splitter will be 'jumping' to when it will be near of them. For example, `snapping` with value `['20', 80]` and `snapping-range` with value `5` will set up 2 marks - 20 and 80 percents of the splitter container size. Meanwhile, splitter will 'jump' to it when there is at least 5 percents of the container size between them."
      },
      "nested": {
        "title": "Nested",
        "text": "Passing another `va-split` component via `start`/`end` slot you can gain different panels combinations."
      },
      "maximization": {
        "title": "Maximization",
        "text": "Prop `maximization` allows to maximize end panel size via double click on dragger (additional prop `maximizeStart` changes this logic - start panel maximizing instead)."
      },
      "disabled": {
        "title": "Disabled",
        "text": "`disabled` prop restricts to change panels size (including option via `maximization` prop)."
      }
    }
  },
  "virtualScroller": {
    "title": "Virtual Scroller",
    "summaryText": "The `va-virtual-scroller` component allows you to use long lists without need to render every list child element but only visible ones depending on the current state of the scroll.",
    "examples": {
      "default": {
        "title": "Default",
        "text": ""
      },
      "horizontal": {
        "title": "Horizontal",
        "text": "The `horizontal` prop allows you to change component's orientation."
      },
      "bench": {
        "title": "Bench",
        "text": "The `bench` prop allows you to make scrolling smooth by rendering additional but not visible items at the start or end of the list. For example, `bench` prop with value `10` will render additional ~10 items before the visible list start and ~10 after the visible list end."
      },
      "customKey": {
        "title": "Custom Key",
        "text": "The `trackBy` prop allows you to specify the key name for list items rendering."
      },
      "itemSize": {
        "title": "Item Size",
        "text": "The `itemSize` prop allows you to specify the list item size (width or height - depends on `horizontal` prop value). For example, acceptable values are: 5, \"5\", \"5px\", \"5rem\". The component is recalculating average item's size ourselves on every scroll event and max value (`itemSize` or calculated one) will be used. We recommend to set at least minimal item size via this prop to prevent possible performance issues during first rendering."
      },
      "differentContent": {
        "title": "Any list items",
        "text": "`va-virtual-scroller` component allows you to create not only 'modest' list with primitive elements but also use it for scrolling card, table rows etc."
      }
    }
  },
  "i18n": {
    "title": "i18n",
    "description": "We made a separated config for i18n messages, so you can redefine messages we use in components.",
    "config": {
      "title": "i18n default messages",
      "changeDefault": {
        "title": "Change default messages",
        "description": "Default messages can be set in `GlobalConfig`. Config is fully typed, so you can use autocomplete to find messages you want to change."
      }
    },
    "runtimeUpdate": {
      "title": "Changing language in runtime",
      "description": "If you have more than one language, you can update messages in runtime with `useI18nConfig` hook from VuesticUI."
    },
    "useWithVueI18n": {
      "title": "Using with vue-i18n",
      "description": "If you use vue-i18n we can recommend to store VuesticUI messages under specific key",
      "exampleConfig": "Recommended config structure"
    }
  },
  "webComponents": {
    "title": "Web components",
    "description": "Vuestic UI provides web-components build, so you can pick some component and use them without Vue application",
    "warn": "This feature is currently in test mode. You can use it, but there can be unexpected bugs or we can change API in future. Help use improve it!",
    "installation": {
      "title": "Installation",
      "description": "Web components build shiped within `vuestic-ui` package and can be imported with suffix `vuestic-ui/web-components`.",
      "create": "Before you can use web-components they must be registered with `window.customElement`. We provide a nice helper, so you can register specific components:",
      "installVuestic": "See \"Install Vuestic UI\""
    },
    "css": {
      "title": "CSS",
      "description": "Since Custom Elements have their own scoped CSS in Shadow DOM, there might be a case when you want to provide some CSS to components. You can do this with `css` property in `registerVuesticWebComponents`. For example, if you want to use Font Awesome in Vuestic components you need provide this CSS:"
    },
    "example": {
      "title": "Usage example",
      "description": "We use Vuestic web component with vanilla Vite project here",
      "steps": [
        "First, we need to register Custom Elements",
        "Then we can use them in our HTML",
        "You can also use Global Config with VaConfig element"
      ],
      "seeMore": "See more detailed example in our Sandbox"
    },
    "treeShaking": {
      "title": "Tree shaking",
      "description": "You can import and register only specific components that you need and your bundler will tree-shake other components. It also removes our default CSS in case you don't want ot use Material Icons."
    }
  },
  "colorsClasses": {
    "title": "Custom classes for the colors",
    "about": "By default, Vuestic UI creates custom classes for coloring the text and background colors of elements relative to the global color configuration. To expand the number of generated classes, you need to add the `colorsClasses` configuration to the `GlobalConfig`.",
    "default": "Here is format of custom classes for the colors generated by Vuestic UI:",
    "defaultColors": "The values for `colorVariableName` and `colorValue` are taken from the global color config.",
    "readMoreAboutDefaultColor": "Read more about CSS Variables for colors generated by Vuestic UI by default [here](/services/colors-config).",
    "configDescription": "An array of `ColorsClassesConfig` type objects. Used to define new helper classes",
    "setup": {
      "title": "Let's create our config",
      "about": "We need to update the colors classes configuration in the our global configuration. The colors classes are an array of objects with class names and CSS properties. For example:",
      "explanation": "The example above shows us the `ColorsClassesConfig` configuration structure. It's important to note that styleProperty can take either a string or an array of strings as its value.",
      "example": "An example of using the classes we created:"
    },
    "examples": {
      "default": {
        "title": "Example",
        "example1": "Now I'm have a green color on the borders and text colors",
        "example2": "I have a red background"
      }
    },
    "api": {
      "title": "Helper classes configuration API"
    }
  },
  "skeleton": {
    "title": "Skeleton",
    "description": "Skeleton is a component that is used to show the user that the content is loading. It is used to improve the user experience and to show the user that the content is loading.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "The default skeleton is a `squared` reactable with a width of 100% and a height of 5rem."
      },
      "text": {
        "title": "Text",
        "text": "The skeleton with `text` variant looks like a text line. Count of lines can be configured with `lines` prop. The last line can be shorter than others with `lastLineWidth` prop."
      },
      "headline": {
        "title": "Headline",
        "text": "You can apply typography or any other classes to the skeleton. For example, `va-h1` class will make the skeleton look like a headline."
      },
      "circle": {
        "title": "Circle",
        "text": "The skeleton with `circle` variant looks like a circle. The size of the circle can be configured with `height` and `width` prop. Usualy used as avatar placeholder."
      },
      "rounded": {
        "title": "Rounded",
        "text": "The skeleton with `rounded` variant looks like a rounded rectangle. The size of the rectangle can be configured with `height` and `width` prop. Can be used as button or input placeholder."
      },
      "square": {
        "title": "Square",
        "text": "The skeleton with `square` variant looks like a square. The size of the square can be configured with `height` and `width` prop. Can be used as card or image placeholder."
      },
      "group": {
        "title": "Group",
        "text": "Skeletons can be grouped in `VaSekeletonGroup` component to sync their animations. For example, you can use it to create a card, list or table placeholder."
      },
      "groupWave": {
        "title": "Wave animation",
        "text": "You can use `wave` animation for `VaSkeletonGroup` to make it look like a wave. VaSkeletonGroup will sync animations."
      },
      "loading": {
        "title": "Loading",
        "text": "Down bellow is an example how you can use skeleton in your application. We use `isLoading` ref to indicate if content is loading. Don't forget to add `aria-busy` attribute to the content to indicate that it is loading to sreen reader."
      }
    }
  }
}
