{
  "landing": {
    "header": {
      "buttons": {
        "overview": "Обзор",
        "docs": "Документация",
        "discord": "Присоединиться в Discord",
        "translation": "Добавить перевод...",
        "language": "Язык",
        "star": "Star"
      }
    },
    "preview": {
      "title": "Vue.js 3.0 UI Framework",
      "buttons": {
        "start": "Начать",
        "github": "Смотреть на GitHub"
      },
      "features": {
        "nuxt": {
          "title": "Поддержка Nuxt",
          "text": "Руководство интеграции Nuxt"
        },
        "components": {
          "title": "52 Отзывчивых Компонента",
          "text": "Документация компонентов"
        },
        "keyboard": {
          "title": "Клавиатурная Навигация",
          "text": "Руководство по доступности"
        },
        "browsers": {
          "title": "Поддержка Современных Браузеров",
          "text": "Список поддерживаемых браузеров"
        }
      }
    },
    "seamless": {
      "title": "Плавная Интеграция",
      "text": "Используйте Vuestic UI с другими библиотеками компонентов без конфликтов.",
      "compare": {
        "vuestic": "Компоненты Vuestic UI",
        "other": "Другие компоненты"
      }
    },
    "customize": {
      "title": "Полная Кастомизация",
      "text": "Обеспечьте соответствие компонентов Vuestic UI вашему дизайну с помощью мощных динамических конфигураций.",
      "tabs": [
        "Адаптивность",
        "Стили",
        "Темы Оформления"
      ],
      "copy": "Скопировано",
      "configuration": "Посмотрите наше руководство по конфигурации"
    },
    "opensource": {
      "title": "Открытое ПО",
      "text": [
        "Vuestic UI навсегда свободен и открыт к разработке. Ознакомьтесь с нашими",
        "открытыми вопросами",
        "руководством по разработке",
        "и",
        "сервером в discord,",
        "чтобы помочь нам улучшить Vuestic UI."
      ]
    },
    "admin": {
      "title": "Vuestic Admin",
      "text": "Попробуйте Vuestic UI Framework в действии.",
      "buttons": {
        "github": "Смотреть на GitHub",
        "demo": "Демонстрация",
        "star": "Star"
      },
      "features": {
        "opensource": "Открытая лицензия MIT",
        "themes": "Две встроенные цветовые схемы",
        "responsive": "Кросс-браузерное и отзывчивая верстка",
        "i18n": "Поддержка i18n"
      }
    },
    "footer": {
      "text": "Открытое ПО, свободно для использования. Запросы на разработку:",
      "buttons": {
        "epicmax": "Об Epicmax",
        "admin": "Vuestic Admin",
        "spinners": "Epic Spinners"
      }
    }
  },
  "api": {
    "all": {
      "events": {
        "validation": "Валидация",
        "blur": "Потеря фокуса элемента",
        "focus": "Фокусировка на элементе",
        "input": "Изменение значения",
        "click": "Клик"
      },
      "props": {
        "align": "Customizes horizontal position of component (flex based). Available values are strings: 'left', 'center', 'right', 'between', 'around', 'stretch'.",
        "id": "Применяет `id` к внутреннему компоненту ввода, полезно для нативных форм",
        "name": "Применяет `name` к внутреннему компоненту ввода, полезно для нативных форм",
        "tag": "Заменяет тег html. Это полезно для семантики, а также для обеспечения валидной разметки в некоторых случаях (`ul > li` и `tr > td`, etc)",
        "size": "Изменияет размер компонента. Доступны следющие опции: `small`, `medium`, `large`. Если вам нужна более тонкая настройка, вы можете указать число (будет использовано как `px`) или строковое значение (поддерживаются `rem` и `px`).",
        "disabled": "Применяет стиль `disabled` и удаляются все эффекты взаимодействия с пользователем",
        "readonly": "Не выглядит как неактивный элемент, но ведет себя схожим образом",
        "success": "Отображение компонента в состоянии `success`",
        "error": "Отображение компонента в состоянии `error`",
        "messages": "Описание сообщений для компонента",
        "errorMessages": "Сообщения об ошибках для компонента",
        "errorCount": "Количество отображаемых сообщений об ошибках",
        "stateful": "Добавляет возможность работы с компонентом без настройки `v-model`",
        "color": "Цвет компонента (поддерживаемые темой опции или *HEX*)",
        "textColor": "Цвет текста (поддерживаемые темой опции или *HEX*)",
        "rules": "Правила валидации<!-- TODO Add link -->",
        "to": "Целевой маршрут ссылки, [подробнее](https://router.vuejs.org/api/#to \"Vue router docs\")",
        "replace": "Если установлено, при навигации вызывается `router.replace()` вместо `router.push()`, поэтому запись в истории не сохраняется. [Подробнее](https://router.vuejs.org/api/#replace \"Vue router docs\")",
        "append": "Если установлено, всегда добавляется относительный путь к текущему, [подробнее](https://router.vuejs.org/api/#append \"Vue router docs\")",
        "exact": "Проверяет точное соотвествие ссылки. Без знака `'/'` будет соответствовать каждому маршруту, [подробнее](https://router.vuejs.org/api/#exact \"Vue router docs\")",
        "activeClass": "Применяется к активной ссылке, [подробнее](https://router.vuejs.org/api/#active-class \"Vue router docs\")",
        "exactActiveClass": "Применяется к активной ссылке c точным соотвествием, [подробнее](https://router.vuejs.org/api/#exact-active-class \"Vue router docs\")",
        "href": "Определяет компонент как привязку и применяет атрибут href, [подробнее](https://router.vuejs.org/api/#href \"Vue router docs\").",
        "target": "Целевой указатель навигации, [подробнее](https://developer.mozilla.org/docs/Web/HTML/Element/A).",
        "src": "Исходный URL",
        "arrayValue": "То же, что и нативный `value`, используется с массивом в `v-model`",
        "label": "То же, что и нативный `label`",
        "leftLabel": "Перемещает название в левую часть компонента",
        "loading": "Индикатор загрузки (иконка спиннера)",
        "trueValue": "Переопределяет возвращаемое значение, когда оно выбрано (`checked`)",
        "falseValue": "Переопределяет возвращаемое значение, когда оно не выбрано",
        "square": "Удаляет скругления",
        "indicator": "Sets the indicator style.",
        "icon": "Sets an icon.",
        "rounded": "Добавляет скругления",
        "flat": "Удаляет `borders` и фон",
        "outline": "Удаляет фон",
        "gradient": "Добавляет градиент фона",
        "modelValue": "Значение биндинга `v-model`",
        "activeButtonTextColor": "Цвет текста активной кнопки (поддерживаемые темой опции или *HEX*)",
        "indeterminateValue": "Переопределяет нуестановленное значение состояния",
        "borderColor": "Цвет css стиля `border` (поддерживаемые темой опции или *HEX*)",
        "clearableIcon": "Устанавливает иконку кнопки очистки",
        "tabindex": "Устанавливает кастомный `tabindex`"
      }
    },
    "VaBadge": {
      "props": {
        "text": "Badge text",
        "overlap": "Allows badge to overlap with element.",
        "transparent": "Makes badge semi-transparent.",
        "multiLine": "Badge text will wrap to next line.",
        "visibleEmpty": "Badge will be shown even when there is no text.",
        "dot": "Shows dot instead of full badge. Useful to notify user without grabbing too much attention.",
        "bottom": "Position badge to the bottom.",
        "left": "Position badge to the left"
      }
    },
    "VaButton": {
      "props": {
        "outline": "Применяет очерченный (`outline`) стиль",
        "flat": "Применяет плоский (`flat`) стиль",
        "icon": "Иконка, отображаемая слева от заголовка",
        "iconRight": "Иконка, отображаемая справа от заголовка",
        "type": "Значение html атрибута `type`",
        "block": "Применяет стиль `block` (элемент будет занимать 100% ширины контейнера)",
        "rounded": "Применяет скругления",
        "round": "Делает кнопку круглой",
        "spaceBetweenItems": "Устанавливает расстояние между несколькими кнопками",
        "gradient": "Применяет градиент к цвету кнопки",
        "href": "Будет использоваться как значение html атрибута `href` (если используется `<button />`, будет заменено на `<a>`)",
        "target": "Будет использоваться как значение html атрибута `target` (если используется `<button />`, будет заменено на `<a>`)"
      },
      "slots": {
        "default": "Контент кнопки"
      },
      "events": {
        "click": "Эммитится, когда пользователь кликает на кнопку"
      },
      "methods": {
        "focus": "Устанавливает фокус на кнопку",
        "blur": "Удаляет фокус с кнопки"
      }
    },
    "VaForm": {
      "props": {
        "autofocus": "Установит фокус в первый элемент <!-- TODO Add link --> при отрисовке"
      },
      "events": {
        "validation": "Triggered on validation update"
      },
      "methods": {
        "validate": "Выполняет проверку и обновляет состояние ошибки для каждого компонента формы. Работает с вложенными формами",
        "focus": "Устанавливает фокус на превый доступный для этого элемент формы",
        "focusInvalid": "Устанавливает фокус на первый невалидный элемент формы. Это полезно для более длинных форм и позволяет привлечь внимание пользователя к недопустимому полю.",
        "resetValidation": "Сбрасывает валидацию для всех проверяемых элементов <!-- TODO Add link -->",
        "reset": "Сбрасывает значения и валидацию для всех элементов формы"
      }
    },
    "VaSlider": {
      "props": {
        "range": "Задает возможность выбора диапазона значений",
        "value": "Значение компонента",
        "trackLabel": "Задает название ползунка",
        "color": "Задает цвет",
        "trackColor": "Задает цвет дорожки слайдера",
        "labelColor": "Задает цвет названия слайдера",
        "trackLabelVisible": "Задает видимость названия слайдера",
        "min": "Минимальное значение",
        "max": "Максимальное значение",
        "step": "Шаг изменения значения компонента",
        "label": "Название слайдера",
        "invertLabel": "Перемещает название слайдера направо",
        "disabled": "Делает слайдер неактивным",
        "readonly": "Делает слайдер доступным только для чтения",
        "pins": "Добавляет отображение меток на слайдере",
        "iconPrepend": "Иконка перед слайдером",
        "iconAppend": "Иконка после слайдера",
        "vertical": "Включает вертикальное отображение слайдера",
        "showTrack": "Включае/отключает отображение дорожки слайдера"
      },
      "events": {
        "dragStart": "Начало перемещения ползунка",
        "dragEnd": "Окончание перемещения ползунка",
        "change": "Изменение значения после потери фокуса",
        "input": "Измениение значения"
      },
      "slots": {
        "append": "Поле ввода до слайдера",
        "prepend": "Поле ввода после слайдера",
        "label": "Название слайдера"
      }
    },
    "VaAffix": {
      "props": {
        "offsetTop": "Distance from the top of target element to the top of affixed element.",
        "offsetBottom": "Distance from the bottom of target element to the bottom of affixed element.",
        "target": "The element relative to which the component is fixed."
      },
      "events": {
        "change": "Emits affixed state on its' change."
      }
    },
    "VaBreadcrumbs": {
      "props": {
        "activeColor": "Color of active links (theme string or HEX string).",
        "separator": "Element to separate breadcrumbs items.",
        "separatorColor": "Color of the separator icon (theme string or HEX string)."
      },
      "slots": {
        "default": "One or more `va-breadcrumbs-item` elements.",
        "separator": "Separator element. Can be string or vue component."
      }
    },
    "VaBreadcrumbsItem": {
      "props": {
        "label": "Component content (string)."
      },
      "slots": {
        "default": "Component content."
      }
    },
    "VaModal": {
      "props": {
        "value": "Текущее значение состояния видимости",
        "title": "Текст заголовка",
        "message": "Контент",
        "size": "Размер окна по ширине: `small`, `medium` (по умолчанию) или `large`",
        "okText": "Текст кнопки **Ok**",
        "cancelText": "Текст кнопки **Cancel**",
        "hideDefaultActions": "Скрытие кнопок **Ok** и **Cancel**",
        "fullscreen": "Отображение модального окна на всю область отображения",
        "mobileFullscreen": "Отображение модального окна на всю область отображения для мобильны устройств `mobile-fullscreen` (по умолчанию: `true`)",
        "noDismiss": "Отмена закрытия по клику на оверлей или клавишу **Esc**",
        "noOutsideDismiss": "Отмена закрытия по клику на оверлей",
        "noEscDismiss": "Отмена закрытия по клику на клавишу **Esc**",
        "maxWidth": "Максимальная ширина модального окна",
        "maxHeight": "Максимальная высота `max-height` модального окна, если контент больше, отобразится полоса вертикальной прокрутки",
        "fixedLayout": "Применение вертикальной полосы прокрутки только к содержимому, заголовок и футор останутся зафиксированными",
        "withoutTransitions": "Отлкючение анимации открытия/закрытия",
        "overlay": "Отображение оверлея",
        "overlayOpacity": "Прозрачность оверлея",
        "zIndex": " CSS свойство `z-index`"
      },
      "events": {
        "clickOutside": "Клик на оверлей",
        "input": "Открытии модального окна",
        "ok": "Клик на кнопку **Ok**",
        "beforeOpen": "Событие до открытия модального окна, но после начала анимации",
        "open": "Открытие модального окна после окончания анимации",
        "beforeClose": "Событие до закрытия модального окна, но после начала анимации",
        "close": "Закрытие модального окна после окончания анимации",
        "cancel": "Закртие модального окна пользовтелем без побочных действий"
      },
      "methods": {
        "hide": "Закрытие модального окна. Для `stateless` режима происходит только эммит `input`",
        "open": "Открытие модального окна. Для `stateless` режима происходит только эммит `input`",
        "toggle": "Переключение видимости модального окна. Для `stateless` режима происходит только эммит `input`"
      },
      "slots": {
        "default": "Контент",
        "header": "Заголовок",
        "footer": "Футер"
      }
    },
    "VaRating": {
      "props": {
        "value": "Значение компонента",
        "icon": "Иконка, отображаемая при заполненном значении",
        "halfIcon": "Иконка, отображаемая при наполовину заполненном значении (обязательно свойство **`halves`**)",
        "emptyIcon": "Иконка, отображаемая при незаполненном значении",
        "readonly": "Делает компонент доступным только для чтения (отменяет действия: `pointer` и `hover`)",
        "numbers": "Заеменяет иконки рейтинга на числа",
        "halves": "Позволяет выбирать значения с шагом `0.5`",
        "max": "Количество отображаемых элементов",
        "clearable": "Позволяет установить значение компонента на `0`, срабатывает при клике по уже выбранному значению",
        "hover": "Добавляет визуальный отклик при наведении курсора на элементы",
        "texts": "Массив заголовков, который будет применене к каждому значению. Длина массива должна быть равна свойству `max`",
        "textColor": "Цвет текстовых надписей",
        "unselectedColor": "Определяет цвет невыделенных элементов (по умолчанию используется свойство `color`)"
      }
    },
    "VaPagination": {
      "props": {
        "value": "Current page (or item if `total` is issued) value",
        "visiblePages": "The amount of displayed pages. (When set to 0 all pages are displayed)",
        "pages": "The amount of pages",
        "boundaryLinks": "Show controls to move to first and last page",
        "boundaryNumbers": "Always show first and last page (will replace `boundary-links` if both used)",
        "directionLinks": "Show buttons to move forward and backward",
        "input": "Use HTML Input instead of buttons to control `va-pagination` state",
        "hideOnSinglePage": "Component won't be displayed if only 1 page is available",
        "flat": "Applies `flat` style",
        "total": "Set the amount of data pagination should iterate through. This prop should not be used with `pages` prop.",
        "pageSize": "Set the amount of data to be displayed at 1 page. Used to calculate the length of pagination. This prop should not be used with `pages` prop.",
        "boundaryIconLeft": "Set the icon name for left boundary icon",
        "boundaryIconRight": "Set the icon name for right boundary icon",
        "directionIconLeft": "Set the icon name for left direction icon",
        "directionIconRight": "Set the icon name for right direction icon",
        "size": "Specify size for component. \"small\", \"medium\", \"large\" sizes are available"
      }
    },
    "VaTabs": {
      "props": {
        "value": "The *name* of selected tab or *index* (if `name` prop is not specified)",
        "left": "Align all items to the left",
        "right": "Align all items to the right",
        "center": "Align all items to the center",
        "grow": "Take all container width",
        "hideSlider": "Remove slider which underlines selected item",
        "vertical": "Align all items vertically",
        "prevIcon": "Icon to be used for scrolling backward in pagination",
        "nextIcon": "Icon to be used for scrolling forward in pagination"
      }
    },
    "VaSwitch": {
      "props": {
        "color": "Цвет переключателя",
        "size": "Размер компонента, возможные варианты: `small`, `medium` (по умолчанию), `large`",
        "label": "Название переключателя",
        "leftLabel": "Перемещает название налево",
        "readonly": "Делает переключатель доступным только для чтения",
        "trueLabel": "Название при значении `true`",
        "falseLabel": "Название при значении `false`",
        "trueInnerLabel": "Название внутри переключателя при значении `true`",
        "falseInnerLabel": "Название внутри переключателя при значении `false`",
        "value": "Значение переключателя",
        "trueValue": "Значение включенного переключателя",
        "falseValue": "Значение выключенного переключателя",
        "arrayValue": "Переключает возвращаемое значение в тип `Array`",
        "indeterminate": "Добавляет состояние, в котором невозможно сказать, включен или выключен переключатель"
      },
      "slots": {
        "default": "Название переключателя",
        "innerLabel": "Название внутри переключателя"
      }
    },
    "VaFileUpload": {
      "props": {
        "type": "Устанавливает тип компонента, поддерживаемые типы: `single`, `list` и `gallery`",
        "fileTypes": "Устанавливает поддерживаемые форматы файлов",
        "dropzone": "Включает Drag&Drop",
        "value": "Массив с загруженными файлами"
      }
    },
    "VaHover": {
      "props": {
        "value": "Hover state."
      },
      "events": {
        "input": "Emits hover state when it changes."
      },
      "slots": {
        "default": "Vue default slot."
      }
    },
    "VaDivider": {
      "props": {
        "vertical": "Вертикальное отображение разделителя",
        "dashed": "Пунктирный разделитель",
        "inset": "Добавляет внутренние отсупы",
        "orientation": "Позиция контента внутри разделителя, доступны опции (только для горизонтального разделителя): `left`, `center` (по умолчанию) и `right`"
      },
      "slots": {
        "default": "Содержимое разделителя (только для горизонтального разделителя)"
      }
    },
    "VaToast": {
      "props": {
        "title": "Sets the title for the notification",
        "offsetY": "Sets the Y offset",
        "offsetX": "Sets the X offset",
        "message": "Notification message",
        "icon": "Sets the close icon",
        "customClass": "Applies custom class to the component",
        "duration": "Sets the duration of the notification display",
        "closeable": "Provides the ability to close the component",
        "onClose": "Applies a function to use when pressed a close button",
        "onClick": "Applies a function to use when clicked",
        "position": "Sets the position of the notification",
        "render": "Render function to use a custom content",
        "multiLine": "Sets more space for the Toast component"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaCard": {
      "props": {
        "stripe": "Включает отображени полоски над заголовком карточки",
        "stripeColor": "Задает цвет полоски (предопределенные опции цвета или `HEX`)",
        "gradient": "Добавляет градиент в тело компонента",
        "bordered": "Включает контур компонента",
        "outlined": "Включает тень компонента"
      }
    },
    "VaSidebar": {
      "props": {
        "minimized": "Minimized state of sidebar.",
        "hoverable": "Expand sidebar on hover.",
        "position": "Position of `va-sidebar`, can be `right` or `left`.",
        "width": "Width of component in maximized state.",
        "minimizedWidth": "Width of component in minimized state.",
        "value": "The current visibility state of `va-sidebar`."
      }
    },
    "VaImage": {
      "props": {
        "ratio": "Соотношение ширины к высоте",
        "contain": "Масштабирует изображение, сохраняя пропорции, чтобы все изображение поместилось внутри блока"
      },
      "events": {
        "loaded": "Эммитится, когда загрузка изображения окончена",
        "error": "Эммитится при ошибке загрузки"
      },
      "slots": {
        "loading": "Отображается при загрузке изображения",
        "error": "Отображается при ошибке загрузки изображения",
        "default": "Ваше содержимое изображения, не отображается при загрузке или ошибке"
      }
    },
    "VaOptionList": {
      "props": {
        "value": "The array of currently selected items in a list",
        "disabledBy": "Ключ в объекте, который будет использоваться как свойство `disabled`. Может быть строкой (путь к ключу) или функцией типа: `(option) => option.disabled`",
        "valueBy": "Ключ в объекте, который будет использоваться как свойство `value`. Может быть строкой (путь к ключу) или функцией типа: `(option) => option.value`",
        "trackBy": "Ключ в объекте, который будет использоваться как свойство `key`. Может быть строкой (путь к ключу) или функцией типа: `(option) => option.track`",
        "textBy": "Ключ в объекте, который будет использоваться как свойство `text`. Может быть строкой (путь к ключу) или функцией типа: `(option) => option.text`",
        "options": "Массив отображаемых элементов",
        "type": "Тип компонента, возможные опции: `radio`, `checkbox` и `switch`",
        "defaultValue": "Выбираемое по умолчанию значение при монтировании компонента",
        "leftLabel": "Пермещает название влево"
      },
      "events": {
        "input": "Изменение значения"
      },
      "slots": {
        "default": "Отображение элементов. Доступные свойства:\n`option: String | Object`\n`isDisabled: Boolean`\n`name: String`\n`color: String`\n`leftLabel: Boolean`\n`getText: (option: String | Object) => String` \n `selectedValue: Array<String | Object>`\n`index: Number`"
      }
    },
    "VaAvatar": {
      "props": {
        "icon": "Иконка, которая будет отображаться внутри контейнера",
        "src": "URL-адрес изображения (будет помещен в атрибут `src` тега изображения)",
        "fontSize": "Размер текста внутри аватара",
        "email": "Будет отображать `gravatar` для предоставленного email"
      },
      "slots": {
        "default": "Используйте этот слот для замены содержимого по умолчанию, отображаемого внутри компонента"
      }
    },
    "VaCheckbox": {
      "props": {
        "value": "Значение чекбокса",
        "indeterminate": "То же, что и нативный `indeterminate` - состояние, в котором невозможно сказать, включен ли `on` или `off`",
        "checkedIcon": "Заменяет иконку `checked`",
        "indeterminateIcon": "Заменяет иконку `indeterminate`"
      },
      "events": {
        "input": "Изменение значения компонента"
      }
    },
    "VaProgressBar": {
      "props": {
        "value": "The progress value",
        "indeterminate": "Create a indeterminate loading bar",
        "buffer": "Create a loading bar with a buffer. Commonly used in videos",
        "reverse": "Reverse the progress bar direction",
        "rounded": "Add a border radius to the `va-progress-bar` component (default: true)"
      },
      "slots": {
        "default": "Display any additional info about the progress"
      }
    },
    "VaProgressCircle": {
      "props": {
        "value": "The progress value",
        "indeterminate": "Using the `indeterminate` prop, the `va-progress-circle` continues to  animate indefinitely.",
        "thickness": "Circle border size between 0 and 1"
      },
      "slots": {
        "default": "Display any additional info about the progress"
      }
    },
    "VaInfiniteScroll": {
      "props": {
        "offset": "Number of pixels to the end of `va-infinite-scroll` container at which the component should start loading more content in advance.",
        "reverse": "Instead of bottom, top of the container would trigger loading.",
        "disabled": "Won't trigger load even when scroll reached end. Useful to prevent further loading when there is no more items in list.",
        "scrollTarget": "The element to be used as a scroll container instead of default one. Could be CSS selector or Element. When not set - direct wrapper will be used as a scroll container.",
        "debounce": "Debounce to be applied when listening to scroll event. Useful to prevent user from triggering loading multiple times.",
        "load": "Function that loads data. Should return Promise",
        "tag": "Заменяет тег html. Это полезно для семантики, а также для обеспечения валидной разметки в некоторых случаях (`ul > li` и `tr > td`, etc)"
      },
      "slots": {
        "loading": "Shown when content is fetching.",
        "default": "The content to be scrolled"
      }
    },
    "VaAlert": {
      "props": {
        "value": "Текущее состояние видимости `alert`",
        "title": "Текста заголовка",
        "description": "Текст сообщения",
        "icon": "Отображать иконку перед содержанием",
        "closeIcon": "Заменить иконку закрытия по умолчанию на собственный",
        "closeText": "Текст вместо иконки закрытия",
        "closeable": "Добавляет зону закрытия",
        "center": "Центрирование заголовка и сообщения",
        "borderColor": "Цвет для border",
        "border": "Полоса border. Доступные опции расположения: 'top', 'right', 'bottom', 'left'.",
        "dense": "Уменьшает отступы вокруг сообщения"
      },
      "methods": {
        "hide": "Скрывает alert. Для stateless только эммитит `input`"
      },
      "slots": {
        "default": "Тело компонента",
        "title": "Заголовок",
        "icon": "Иконка",
        "close": "Иконка закрытия"
      }
    },
    "VaIcon": {
      "props": {
        "component": "Позволяет использовать компонент svg в качестве иконки",
        "rotation": "Поворачивает компонент на указанный градус",
        "spin": "Запускает анимацию вращения",
        "iconsConfig": "Позволяет настроить набор иконок"
      }
    },
    "VaRadio": {
      "props": {
        "value": "Модель компонента",
        "option": "Значение, которое установится в модель при выборе опции"
      }
    },
    "VaCollapse": {
      "props": {
        "value": "Значение компонента",
        "header": "Текст заголовка",
        "icon": "Иконка в заголовке",
        "solid": "Включает обводку компонента",
        "colorAll": "Применяет цвет ко всему компоненту"
      },
      "events": {
        "input": "Изменение значения компонента (клик по панели)"
      },
      "methods": {},
      "slots": {
        "default": "Тело компонента",
        "header": "Заголовок компонента"
      }
    },
    "VaAccordion": {
      "props": {
        "value": "Массив значений открытых панелей",
        "multiply": "Позволяет оставлять открытыми множество панелей",
        "inset": "Активная панель будет уменьшена",
        "popout": "Активная панель будет увеличена"
      },
      "events": {
        "input": "Изменение значения компонента (клик по панели)"
      },
      "methods": {},
      "slots": {
        "default": "Раскрываемые панели (тело аккордеона)"
      }
    },
    "VaChip": {
      "props": {
        "closeable": "Предоставляет возможность закрыть тег",
        "outline": "Применяет контур, убирает фон",
        "flat": "Убирает фон и контур",
        "icon": "Отображаемая внутри компонента иконка"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaInput": {
      "props": {
        "value": "Значение поля ввода",
        "type": "Устанавливает тип",
        "label": "Устанавливает название",
        "placeholder": "Устанавливает плейсхолдер",
        "mask": "Устанавливает маску поля ввода при использовании в качестве строки или параметра маски",
        "color": "Цвет поля ввода",
        "removable": "Добавляет кнопку для сброса значения",
        "returnRaw": "Устанавливает возможность возврата необработанного значения",
        "autosize": "Устанавливает возможность авторасширения `textarea`",
        "minRows": "Минимальное количество строк",
        "maxRows": "Максимальное количество строк",
        "rules": "Accepts an array of functions that take an input value as an argument and return either true / false or a string with an error message",
        "disabled": "Делает поле ввода неактивным",
        "readonly": "Делает поле ввода доступным только для чтения",
        "success": "Отображение поля ввода в состоянии `success`",
        "messages": "Оторбражает сообщения или сообщение, если используются данные типа `String`",
        "error": "Отображение поля ввода в состоянии `error`",
        "errorMessages": "Оторбражает сообщения или сообщение об ошибке, если используются данные типа `String`",
        "errorCount": "Количество отображаемых сообщений об ошибках",
        "clearable": "Добавляет кнопку сброса значения поля ввода",
        "bordered": "Применяет подчеркивание"
      },
      "events": {
        "input": "Изменение значения компонента",
        "change": "Изменение значения по взаимодействию с пользователем",
        "blur": "Потеря фокуса",
        "focus": "Установка фокуса",
        "click": "Клик по полю ввода",
        "click-prepend": "Клик по слоту `prepend`",
        "click-prepend-inner": "Клик по слоту `prependInner`",
        "click-append": "Клик по слоту `append`",
        "click-append-inner": "Клик по слоту `appendInner`",
        "keyup": "Пользователь отпустил кнопку на клавиатуре",
        "keydown": "Пользователь нажал кнопку на клавиатуре"
      },
      "methods": {
        "focus": "Устанавливает фокус в поле ввода",
        "reset": "Очищает значение поля ввода"
      },
      "slots": {
        "prepend": "Добавляет элемент за пределами поля ввода и перед его содержимым",
        "prependInner": "Добавляет элемент внутри поля ввода и перед его содержимым",
        "append": "Добавляет элемент за пределами поля ввода и после его содержимого",
        "appendInner": "Добавляет элемент внутри поля ввода и после его содержимого"
      }
    },
    "VaList": {
      "props": {
        "fit": "Stretches list by its content width"
      },
      "slots": {
        "default": "Contains list items"
      }
    },
    "VaListLabel": {
      "slots": {
        "default": "Contains the label text"
      }
    },
    "VaListSeparator": {
      "props": {
        "fit": "Adds space on the left side",
        "spaced": "Adds spaces over and under the separator"
      }
    },
    "VaListItem": {
      "events": {
        "focus": "Emitted when item is focused",
        "click": "Emitted when user clicked on item"
      },
      "slots": {
        "default": "For a list item content"
      }
    },
    "VaListItemLabel": {
      "props": {
        "caption": "Applies another style to text",
        "lines": "Divides item label content on a custom count of lines"
      },
      "slots": {
        "default": "Contains the label text"
      }
    },
    "VaListItemSection": {
      "props": {
        "icon": "Makes section for icon",
        "avatar": "Makes section for avatar"
      },
      "slots": {
        "default": "For a section content"
      }
    },
    "VaSelect": {
      "props": {
        "value": "Значение компонента. При использование свойства 'multiple' привязанное значение должно иметь тип `Array`",
        "clearValue": "Значение, которые установяться после сброса",
        "options": "Опции, которые может выбрать пользователь",
        "disabledBy": "Ключ в объекте, который будет использоваться как свойство `disabled`. Может быть строкой (путь к ключу) или функцией: `(option) => option.disabled`",
        "valueBy": "Ключ в объекте, который будет использоваться как свойство `value`. Может быть строкой (путь к ключу) или функцией: `(option) => option.value`",
        "trackBy": "Ключ в объекте, который будет использоваться как свойство `key`. Может быть строкой (путь к ключу) или функцией: `(option) => option.track`",
        "textBy": "Ключ в объекте, который будет использоваться как свойство `text`. Может быть строкой (путь к ключу) или функцией: `(option) => option.text`",
        "placeholder": "Задает текст плейсхолдера",
        "position": "Задает позиционирование выпадающего меню",
        "tagMax": "Задает максимальное количество тегов, после которого выделение будет обрезано",
        "tags": "Задает отображение выбранных значений как тегов",
        "deletableTags": "Задает возможность удаление тегов",
        "searchable": "Задает возможность фильтрации по набранному тексту",
        "multiple": "Задает возможность выбора нескольких значений",
        "width": "Задает ширину выпадающего меню",
        "maxHeight": "Задает максимальную высоту выпадающего меню",
        "noOptionsText": "Задает текст, отображаемый при отсутствии опций",
        "fixed": "Задает стратегию раскрывающегося списка",
        "clearable": "Задает возможность очистки значения компонента",
        "hideSelected": "Задает возможность скрытия выбранных значений",
        "allowCreate": "Разрешает добавление отсутствующих значений. Можно установить значение `unique`, если вам необходимо создавать только уникальные значения",
        "clearIcon": "Задает иконку кнопки сброса значения",
        "dropdownIcon": "Задает иконку выпадающего меню. Может быть значением типа `Object`, если вы хотите задать различные иконки для отображения `open/close`",
        "bordered": "Применяет подчеркивание",
        "separator": "Текст для разделения выбранных значений"
      },
      "events": {
        "clear": "Сброс значения компонента",
        "updateSearch": "Изменение значения поиска (фильтра)"
      },
      "methods": {
        "reset": "Сбрасывает значение компонента"
      },
      "slots": {
        "prepend": "Добавляет элемент за пределами компонента и перед его содержимым",
        "prependInner": "Добавляет элемент внутри компонента и перед его содержимым",
        "append": "Добавляет элемент за пределами компонента и после его содержимого",
        "appendInner": "Добавляет элемент внутри компонента и после его содержимого"
      }
    },
    "VaParallax": {
      "props": {
        "target": "The element relative to which the component is fixed",
        "src": "URL to the image",
        "alt": "Specifies an alternate text for an image",
        "height": "Sets a height of the parallax",
        "reversed": "Flips the parallax scrolling",
        "speed": "Sets a speed of the parallax scrolling"
      },
      "slots": {
        "default": "For a content over the parallax"
      }
    },
    "VaBacktop": {
      "props": {
        "target": "Applies the selector to which the backtop is bound",
        "visibilityHeight": "The minimum height after which the backtop is displayed",
        "speed": "Sets the scrolling speed",
        "horizontalPosition": "Sets the horizontal position of the component",
        "verticalPosition": "Sets the vertical position of the component",
        "horizontalOffset": "Sets the horizontal offset of the component from the border of the monitor",
        "verticalOffset": "Sets the vertical offset of the component from the border of the monitor"
      },
      "events": {
        "click": "Emitted when user clicked on backtop"
      },
      "methods": {},
      "slots": {
        "default": "Slot for backtop content"
      }
    },
    "VaButtonDropdown": {
      "props": {
        "size": "Задает размер кнопки. Возможные опции: `small`, `medium` и `large`",
        "disableDropdown": "Применяет `disabled` к выпадающему меню",
        "disableButton": "Применяет `disabled` к кнопке",
        "round": "Устанавливает квадратный стиль для кнопки",
        "split": "Разделяет элемент на 2 кнопки. Это полезно, когда у вас есть основное действие (кнопка) и ряд второстепенных действий (иконка + раскрывающийся список)",
        "splitTo": "Устанавливает ссылку навигации vue-router в компоненте при применении опции `split`",
        "splitHref": "Sets a native navigation link in a split component.",
        "icon": "Применяет кастомную иконку к раскрывающемуся муню",
        "leftIcon": "Applies a button left icon.",
        "openedIcon": "Применяет кастомную иконку в выпадающему меню, когда оно открыто",
        "position": "Устанавливает расположение выпадающего меню",
        "keepAnchorWidth": "Сохраняет положение якоря прежним",
        "offset": "Устанавливает расстояние между выпадающим меню и якорем",
        "modelValue": "Устанавливет значение опции `model` для компонента",
        "closeOnContentClick": "Устанавливает закрытие или отменияет его по клику на контент"
      },
      "events": {
        "click": "Эммитится при клике на кнопку",
        "mainButtonClick": "Эммитится при клике на основную кнопку при применении опции `split`"
      },
      "methods": {},
      "slots": {
        "default": "Контент выпадающего меню"
      }
    },
    "VaColorPicker": {
      "props": {
        "value": "Current picked color."
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaColorInput": {
      "props": {
        "value": "Current color.",
        "selected": "Select the indicator."
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaColorInputAdvanced": {
      "props": {
        "value": "Current color.",
        "selected": "Select the indicator.",
        "mode": "Sets the mode of the component.",
        "palette": "An array of colors to palette mode."
      },
      "events": {},
      "methods": {},
      "slots": {
        "default": "Component content"
      }
    },
    "VaColorSlider": {
      "props": {
        "value": "Current color"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaColorPalette": {
      "props": {
        "value": "Current color",
        "palette": "An array of colors"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaColorPaletteAdvanced": {
      "props": {
        "value": "Current color",
        "palette": "An array of colors"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaDatePicker": {
      "props": {
        "value": "Sets the input value",
        "weekDays": "Adds days to the table",
        "placeholder": "Sets input placeholder",
        "config": "Object with settings for date picker"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaButtonGroup": {
      "slots": {
        "default": "Кнопки"
      }
    },
    "VaButtonToggle": {
      "props": {
        "options": "Массив объектов со свойствами label и value",
        "value": "Текущее значение переключателя",
        "size": "Изменияет размер компонента. Доступны следющие опции: 'small', 'medium', 'large'",
        "toggleColor": "Цвет кнопки-переключателя",
        "activeButtonTextColor": "Цвет текста кнопки с выбранным значением"
      },
      "events": {
        "input": "Эммитится при переключении между кнопками"
      },
      "methods": {},
      "slots": {}
    },
    "VaAppBar": {
      "props": {
        "gradient": "Applies gradient style to background",
        "bottom": "Sets the component position to the bottom",
        "hideOnScroll": "Hides component when scrolling target",
        "shadowOnScroll": "Applies box-shadow to the component when scrolling target",
        "shadowColor": "Sets color to the box-shadow"
      },
      "events": {},
      "methods": {},
      "slots": {
        "default": "Slot for app-bar content"
      }
    },
    "VaInnerLoading": {
      "props": {},
      "events": {},
      "methods": {},
      "slots": {
        "default": "Slot for the component to which you want to apply loading styles"
      }
    },
    "VaNuxtIntegration": {
      "props": {},
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaTable": {
      "props": {},
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaSidebarItem": {
      "props": {
        "activeColor": "Used to set accent color for active `VaSidebarItem`",
        "hoverColor": "Used to set accent color for hovered `VaSidebarItem`",
        "active": "If `true` this sidebar item will be highlighted"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaNavbar": {
      "props": {
        "shape": "If this prop true, then shape will be drawn at navbar background."
      },
      "events": {},
      "methods": {},
      "slots": {}
    }
  },
  "menu": {
    "badges": {
      "wip": {
        "text": "wip",
        "title": "Работа в прогрессе"
      }
    },
    "categories": {
      "view": "Отображение",
      "form": "Форма",
      "layout": "Расположение",
      "navigation": "Навигация",
      "color": "Цвет",
      "other": "Другое"
    },
    "introduction": "Введение",
    "gettingStarted": "Начало работы",
    "styles": "Стили",
    "uiElements": "Элементы UI",
    "contribution": "Помощь в разработке",
    "documentationPage": "Документация",
    "affix": "Affix",
    "avatar": "Аватар",
    "breadcrumbs": "Breadcrumbs",
    "badge": "Бейдж",
    "card": "Карточка",
    "sidebar": "Sidebar",
    "rating": "Рейтинг",
    "modal": "Модальное окно",
    "tabs": "Табы",
    "treeView": "Дерево",
    "slider": "Слайдер",
    "switch": "Переключатель",
    "popovers": "Popovers",
    "chat": "Чат",
    "pagination": "Pagination",
    "fileUpload": "Поле выбора файла",
    "form": "Форма",
    "hover": "Hover",
    "image": "Изображение",
    "optionList": "Список опций",
    "divider": "Разделитель",
    "checkbox": "Чекбокс",
    "button": "Кнопка",
    "progressBar": "Progress Bar",
    "progressCircle": "Progress Circle",
    "infiniteScroll": "Infinite Scroll",
    "alert": "Алерт",
    "icon": "Иконка",
    "radio": "Радиокнопка",
    "collapse": "Раскрываемая панель",
    "accordion": "Аккордеон",
    "chip": "Фишка",
    "grid": "Grid",
    "input": "Поле ввода",
    "list": "List",
    "select": "Выпадающий список",
    "parallax": "Parallax",
    "popover": "Popover",
    "backtop": "Backtop",
    "reset": "Reset",
    "colorPicker": "Color Picker",
    "colorInput": "Color Input",
    "colorSlider": "Color Slider",
    "colorPalette": "Color Palette",
    "datePicker": "Дата/время",
    "buttonGroup": "Группа кнопок",
    "buttonToggle": "Кнопка-переключатель",
    "buttonDropdown": "Кнопка с меню",
    "appBar": "App Bar",
    "innerLoading": "Inner Loading",
    "installation": "Установка",
    "roadmap": "План развития",
    "nuxtIntegration": "Nuxt Integration",
    "accessibilityGuide": "Доступность",
    "configurationGuide": "Настройки",
    "browsersList": "Список браузеров",
    "overview": "Обзор",
    "translation": "Перевод",
    "browserSupport": "Поддрежка браузеров",
    "table": "Таблицы",
    "guide": "Контрибьюторам",
    "iconsConfig": "Иконки",
    "services": "Настройка",
    "globalConfig": "Глобальная",
    "advancedIconsConfig": "Advanced Icons Config",
    "componentsConfig": "Компоненты",
    "colorsConfig": "Цвета",
    "cssVariables": "Переменные CSS",
    "sidebarItem": "Sidebar Item",
    "navbar": "Navbar",
    "toast": "Toast",
    "typography": "Типографика",
    "agGridWrapper": "AG Grid Wrapper",
    "dataTable": "Таблица данных"
  },
  "all": {
    "examples": "Примеры",
    "api": "API",
    "faq": "FAQ"
  },
  "docsExample": {
    "showCode": "Показать код"
  },
  "documentationPage": {
    "compilesTo": "Компилируется в:",
    "title": "Документация",
    "description": "Эта страница предназначена для контрибьюторов vuestic-ui: на ней объясняется, как создавать и изменять документацию.",
    "introduction": {
      "title": "Введение",
      "description": "Вместо использования установленной системы документации, такой как [vue-press](https://vuepress.vuejs.org/) или [docsify](https://docsify.js.org/#/), мы решили создать систему, специально предназначенную для Vuestic. Она призвана обеспечить отличную гибкость для будущего развития."
    },
    "pageConfig": {
      "title": "Конфигурация страницы",
      "generate": "Если вы хотите задокументировать компонент с нуля, используйте команду `yarn generate: component`, которая проведет вас через пошаговый процесс.",
      "description": "Документация имеет плоскую структуру - список блоков. Markdown поддерживается во всех текстовых блоках. Вот блоки, которые вы можете использовать:"
    },
    "blocktypes": {
      "title": {
        "title": "Title",
        "text": "Заголовок страницы является обязательным для страниц документации."
      },
      "subtitle": {
        "title": "Subtitle",
        "text": "Используется для: Примеров, API, FAQ. Тэг `h2`."
      },
      "headline": {
        "title": "Headline",
        "text": "Блок используется для обозначения заголовков примеров или FAQ questions. Тэг `h3`."
      },
      "paragraph": {
        "title": "Paragraph",
        "text": "Следует использовать для всех неспециальных текстовых блоков."
      },
      "list": {
        "title": "List",
        "text": "Следует использовать для блоков списка.",
        "inCode": "Результирующий код будет выглядеть так:",
        "listExample1": "Значение элемента списка 1",
        "listExample2": "Значение элемента списка 2"
      },
      "code": {
        "title": "Code",
        "text": "Предварительный просмотр кода. Мы используем [prism](https://prismjs.com/)."
      },
      "example": {
        "title": "Example",
        "text": "Показывает компонент с предварительным просмотром кода. Компонент может использовать все глобальные сервисы: классы css, цвета, etc."
      },
      "api": {
        "title": "API",
        "text": "Документация API для компонента. Сочетает параметры компонентов с объявлениями вручную."
      }
    },
    "apiOptionsTitle": "Параметры API",
    "apiOptions": {
      "text": "Мы не можем сделать глубокий автоматический анализ кода. Большая часть документации API должна быть объявлена явно. Параметры API позволяют настраивать такие опции, как: `version`, `props`, `events`, `methods` и `slots`.",
      "version": "`version` - указывает, в какой версии vuestic был реализован этот компонент или функция.",
      "types": "`types` - более простой механизм документирования типов свойств может быть определен из параметров компонентов (`String`, `Number`, etc). Почти для всего остального это должно быть определено.",
      "local": "`local` - принудительное использование компонентного перевода. По умолчанию используется раздел «все» объекта перевода.",
      "hidden": "`hidden` - позволяет скрыть свойство из раздела API на странице документации. Так как некоторые свойства могут быть предназначены для внутреннего использования."
    }
  },
  "avatar": {
    "title": "Аватар",
    "summaryText": "Компонент `va-avatar` обычно используется для изображений профиля пользователя. Компонент помогает вам последовательно отображать его в разных размерах во всем веб-приложении.",
    "examples": {
      "default": {
        "title": "По умолчанию",
        "text": "По умолчанию `va-avatar` отображается в виде круглого контейнера."
      },
      "size": {
        "title": "Разные размеры",
        "text": "Свойство `size` позволяет указать нестандартный размер аватара. По умолчанию размер шрифта будет масштабироваться в зависимости от значения свойства `size`. Но вы можете использовать свойство `font-size`, чтобы задать нужный вам размер текста."
      },
      "color": {
        "title": "Разные цвета"
      },
      "withImage": {
        "title": "Изображения",
        "text": "Свойство `src` используется для добавления пользовательских изображений к компоненту."
      },
      "withIcon": {
        "title": "Иконки",
        "text": "Свойство `icon` используется для отображения иконок внутри аватара."
      },
      "withEmail": {
        "title": "Gravatar",
        "text": "Свойство `email` и [gravatar](https://en.gravatar.com/support/what-is-gravatar/) используются для получения изображения профиля пользователя."
      }
    }
  },
  "affix": {
    "title": "Affix",
    "summaryText": "The affix component is created to fix any content in a proper position relative to a container.",
    "examples": {
      "top": {
        "title": "Fixed at the top."
      },
      "bottom": {
        "title": "Fixed at them bottom."
      },
      "target": {
        "title": "Fixes element relative to custom container."
      }
    }
  },
  "breadcrumbs": {
    "title": "Breadcrumbs",
    "text": "The breadcrumbs component is used for application navigation. It shows the location of the current page within the navigation hierarchy. It’s used with `va-breadcrumb-item` components.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "This is a basic usage of the `va-breadcrumbs` component."
      },
      "color": {
        "title": "Color",
        "text": "Sets color of breadcrumbs content"
      },
      "align": {
        "title": "Align",
        "text": "Changes component position on the page."
      },
      "separator": {
        "title": "Separator",
        "text": "You can use your own separator and customize its color."
      },
      "activeColor": {
        "title": "Active color",
        "text": "Color of active `va-breadcrumb-item` elements."
      },
      "item": {
        "title": "Item",
        "text": "Some `va-breadcrumbs-item` props examples."
      }
    },
    "api": {
      "item": {
        "title": "Item API",
        "text": "API for `va-breadcrumb-item` component."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "Can `separator` prop work with `separator` slot?",
          "answer": "No, slot has higher priority, prop is ignored when slot is used. Same is legit for `label` of `va-breadcrumbs-item`, it is ignored when you use `default` slot."
        }
      ]
    }
  },
  "badge": {
    "title": "Badge",
    "summaryText": "VaBadge is used to highlight information related to other element, such as missed notifications on top of avatar.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Useful for information views and tables."
      },
      "withAvatar": {
        "title": "With Avatar"
      },
      "withCard": {
        "title": "With Card"
      },
      "position": {
        "title": "Position left and bottom"
      },
      "overlap": {
        "title": "Overlap"
      },
      "dot": {
        "title": "Dot"
      },
      "transparent": {
        "title": "Transparent"
      },
      "color": {
        "title": "Color"
      }
    }
  },
  "button": {
    "title": "Кнопка",
    "summaryText": "Компонент `va-button` заменяет стандартную кнопку HTML. Он предлагает несколько встроенных стилей и позволяет пользователю вручную изменять цвет и размер.",
    "examples": {
      "default": {
        "title": "По умолчанию",
        "text": "Простая кнопка."
      },
      "withColor": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента."
      },
      "withGradient": {
        "title": "Градиент",
        "text": "Свойство `gradient` используется для применения стиля градиента к фону."
      },
      "withTextColor": {
        "title": "Цвет текста",
        "text": "Свойство `text-color` используется для изменения цвета текста кнопки."
      },
      "withSize": {
        "title": "Размер",
        "text": "Свойство `size` используется для изменения размера кнопки."
      },
      "withStyle": {
        "title": "Разные стили",
        "text": "Для компонента `va-button` доступно 3 стиля: `outlined`, `flat` и `square`."
      },
      "withIcon": {
        "title": "Иконки",
        "text": "Вы можете добавить иконки в компонент `va-button` с 2 разными свойствами: `icon` и `icon-right`"
      },
      "withConfig": {
        "title": "Слот иконки с настройкой",
        "text": "Вы можете обернуть кнопки компонентом `VaConfig` и использовать иконки как слоты."
      },
      "withLoading": {
        "title": "Состояние загрузки",
        "text": "Свойство `loading` используется для отображения спиннера загрузки."
      },
      "disabled": {
        "title": "Недоступная кнопка",
        "text": "Свойство `disabled` запрещает любые действия с кнопкой."
      }
    }
  },
  "slider": {
    "title": "Слайдер",
    "summaryText": "Компонента `va-slider` визуализирует поле ввода для числа. Пользователь может перетащить ползунок в фиксированном диапазоне, чтобы получить необходимое значение.",
    "examples": {
      "default": {
        "title": "Базовое использоваени",
        "text": "Базовое использоваени компонента `va-slider`."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "minmax": {
        "title": "Диапазон значений",
        "text": "Свойства `min` и `max` позволяют установить минимальное и максимальное значение соотвественно."
      },
      "state": {
        "title": "Сотстояние",
        "text": "Свойство `disabled` делает слайдер неактивным как визуально, так и отменяет все виды действий с ним, свойство `readonly` работает схожим образом, но не применяет визуальных изменений."
      },
      "range": {
        "title": "Диапазон значений",
        "text": "Свойство `range` добавляет возможность выбора диапазона значений."
      },
      "step": {
        "title": "Шаг",
        "text": "Свойство `step` добавляет возможность ограничения шага перемещения селектора на определенное значение."
      },
      "pins": {
        "title": "Метки",
        "text": "Свойство `pins` добавляет отображение меток на слайдере."
      },
      "label": {
        "title": "Название",
        "text": "Свойство `label` добавляет название слайдеру и имеет две дополнительные настройки: `invert-label` - перемещает название вправо, `label-color` - изменяет цвет названия."
      },
      "slots": {
        "title": "Слоты",
        "text": "Вы можете добавить поля ввода до и после компонента используя слоты `append` и `prepend` соотвественно. Так же название слайдера можно кастомизировать через слот `label`."
      },
      "icon": {
        "title": "Иконка",
        "text": "Свойства `icon-append` и `icon-prepend` позовляют добавить иконку до и после слайдера."
      },
      "track": {
        "title": "Дорожка слайдера",
        "text": "Свойство `show-track` позволяет скрыть дорожку слайдера, свойство `track-color` позволяет изменить её цвет."
      },
      "trackLabel": {
        "title": "Название ползунка",
        "text": "Свойство `track-label-visible` включает отображения названия ползунка. Его отображение можно настроить при помощи свойства `track-label`."
      },
      "vertical": {
        "title": "Вертикальный слайдер",
        "text": "Свойство `vertical` изменяет отображение слайдера на вертикальное."
      }
    }
  },
  "switch": {
    "title": "Переключатель",
    "summaryText": "Компонент `va-switch` изменяет состояние вашего свойства на `true/false`.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Базовое использование компонента `va-switch`."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "state": {
        "title": "Состояние",
        "text": "Свойство `disabled` делает переключатель неактивным как визуально, так и отменяет все виды действий с ним, свойство `readonly` работает схожим образом, но не применяет визуальных изменений."
      },
      "label": {
        "title": "Название",
        "text": "Свойство `label` добавляет название переключателю. Свойство `left-label` - перемещает название влево."
      },
      "customLabel": {
        "title": "Название по значению",
        "text": "Свойства `true-label` и `false-label` задают названия для значений `true` и `false` соответственно."
      },
      "innerLabel": {
        "title": "Название внутри переключателя",
        "text": "Свойства `true-inner-label` и `false-inner-label` задают названия для значений `true` и `false` внутри переключателя. Слот `innerLabel` позволяет кастомизировать эти значения."
      },
      "size": {
        "title": "Размер",
        "text": "Свойство `size` изменияет размер переключателя, доступны 3 варианта: `small`, `medium` (по умолчанию) и `large`."
      },
      "loading": {
        "title": "Спиннер закрузки",
        "text": "Свойство `loading` включает спиннер загрузки переключателя."
      },
      "error": {
        "title": "Ошибка",
        "text": "Свойство `error` стилизует переключатель инофрмируя об ошибке. Свойство `error-messages` добавляет сообщние об ошибке."
      }
    }
  },
  "rating": {
    "title": "Рейтинг",
    "summaryText": "Компонент `va-rating` это простой, но мощный элемент для сбора отзывов пользователей. Всего в нескольких строках кода он может предоставить вам оценку пользователей о вашем продукте или приложении.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компонент `va-rating` предоставляет простой интерфейс для сбора отзывов пользователей."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "size": {
        "title": "Размер",
        "text": "Свойство `size` используется для изменения размера."
      },
      "hover": {
        "title": "Наведение",
        "text": "Свойство `hover` предоставляте возможность увидеть виузальные изменения при наведении до клика."
      },
      "halves": {
        "title": "Половинки",
        "text": "Свойство `halves` позволяет использовать значения с шагом в `0.5`."
      },
      "texts": {
        "title": "Текст",
        "text": "Свойство `texts` позволяет задать текст для каждого значения в рейтинге."
      },
      "clearable": {
        "title": "Сброс знанчения",
        "text": "Повторный выбор текущего значения очистит компонент."
      },
      "numbers": {
        "title": "Числа вместо иконок",
        "text": "Свойство `numbers` заменит иконки рейтинга на числа."
      },
      "customIcons": {
        "title": "Иконки",
        "text": "Свойства `icon` и `empty-icon` позволяеют заменить иконки для выбранного и невыбранного значения соотвественно."
      }
    },
    "faq": {
      "subtitle": "FAQ",
      "questions": [
        {
          "question": "Работает ли компонент `va-rating` с клавиатурой?",
          "answer": "Да, вы можете использовать `Tab` `(Shift+Tab)` для перемещения между иконками рейтинга, нажмите `Enter` для подтверждения выбора. Так же вы можете использовать клавиши со стрелками (`влево` и `вправо`), чтобы изменить значение рейтинга."
        },
        {
          "question": "Могу ли я использовать свойство `numbers` в сочетании с остальными свойствами?",
          "answer": "Да, все свойства компонента `va-rating` совместимы друг с другом."
        }
      ]
    }
  },
  "toast": {
    "title": "Toast",
    "summaryText": "Component for sending a notification to the user.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default, run this component in events by using the `init` method with a setting object."
      },
      "color": {
        "title": "Color",
        "text": "Set different colors using `color` prop. You can either user theme string *HEX* color value."
      },
      "offset": {
        "title": "Offset",
        "text": "Use `offset` property to set the offset of the toast."
      },
      "position": {
        "title": "Position",
        "text": "Use `position` property to set the custom position of the toast. Available are `top-right`, `top-left`, `bottom-right`, `bottom-left`."
      },
      "close": {
        "title": "Close",
        "text": "You can use close method to close the notification and you can set custom onClose event."
      },
      "click": {
        "title": "Click",
        "text": "You can set custom onClick event to handle the click on button."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "What is the difference between a component and a service?",
          "answer": "The difference is in implementation. The service behaves more flexibly and it is easier to bind it to certain events than to render the whole element. \n Each prop you provide to the component you can provide to the service too by using the setting object."
        }
      ]
    }
  },
  "modal": {
    "title": "Модальное окно",
    "description": "Классический модальный оверлей, который представляет собой диалоговое окно или другой интерактивный компонент, такой как отклоняемый alert, подокно и т.д.",
    "overview": {
      "subtitle": "Обзор",
      "paragraphs": [
        "По умолчанию `<va-modal>` содержит в футере кнопки **OK** and **Cancel**. Вы можете указать собственное сообщение и заголовок с помощью параметров `message` и `title`.",
        "Компонент `<va-modal>` поддерживает закрытие по клику **Esc** (включено по умолчанию) и клику по оверлею (включено по умолчанию). Эти функции можно отключить, используя параметры `no-esc-dismiss` и `no-external-dismiss` соответственно или `no-dismiss` в качестве сокращения, чтобы отключить обе функции."
      ]
    },
    "stateful": {
      "subtitle": "Сохранение состояния (stateful)",
      "paragraph": "По умолчанию компонент `va-modal` не сохраняет состояние. Вы можете изменить это установив параметр `stateful`."
    },
    "fullscreen": {
      "subtitle": "Отображение на весь экран",
      "paragraphs": [
        "Свойство `fullscreen` включает отображение модального окна на весь экран.",
        "Имейте ввиду, что компонент `va-modal` на мобильных устройствах включает свойство `fullscreen` по умолчанию. Вы можете изменить это установив свойство `mobile-fullscreen` в `false`."
      ]
    },
    "modalSizing": {
      "subtitle": "Размер",
      "paragraph": "Свойство `size` позволяет изменить размер модального окна, имеется три опциональных размера. Эти размеры действуют в определенных брейкпоинтах, чтобы избежать горизонтальных полос прокрутки на более узких окнах просмотра. Доступные опции: `small`, `medium` (по умолчанию) и `large`."
    },
    "toggleVisibility": {
      "subtitle": "Переключение видимости",
      "paragraph": "Есть несколько методов, которые вы можете использовать для переключения видимости модального окна.",
      "sections": [
        {
          "headline": "Использование свойства `v-model`",
          "paragraph": "Свойство `v-model` всегда автоматически синхронизировано с состоянием отображения компонентом `<va-modal>` и вы можете урпавлять видимостью при помощи `v-model`."
        },
        {
          "headline": "Использование методов `show()`, `hide()`, и `toggle()`",
          "paragraph": "Вы можете получить доступ к компоненту используя атрибут `ref` и вызвать методы `show()`, `hide()` или `toggle()`."
        }
      ]
    },
    "disableAnimation": {
      "subtitle": "Отмена анимации открытия/закрытия",
      "paragraph": "Свойство `without-transitions` позволяет отключить анимации открытия/закрытия модального окна."
    },
    "hidingOverlay": {
      "subtitle": "Скрытие оверлея",
      "paragraphs": [
        "Свойство `overlay` позволяет скрыть оверелей модального окна, для этого его необходимо установит в `false`.",
        "Имейте ввиду, что клик по скрытому оверлею все еще будет приводить к закрытию модального окна. Вы можете отменить это действие при помощи свойства `no-outside-dismiss`."
      ]
    },
    "scrollingLongContent": {
      "subtitle": "Прокрутка длинного контента",
      "paragraphs": [
        "Когда модальное окно становится слишком длинными для области просмотра, то появляется полоса прокрутки для скроллинга тела модального окна.",
        "Свойсто `fixed-layout` позволяет включить прокрутку только для контента внутри модального окна, тогда заголовок и футер с кнопками останутся зафиксированными."
      ]
    },
    "customization": {
      "subtitle": "Кастомизация",
      "paragraphs": [
        "Компонент `<va-modal>` предоставляет несколько слотов (`default`, `header` и `footer`), которые вы можете использовать для кастомизации контента в соответствующих секциях.",
        "Вы можете задать кастомный текст для кнопок **Cancel** и **Ok** использую свойства `ok-text` и `cancel-text`, или вы можете скрыти и используя свойство `hide-default-actions`.",
        "Компонент `va-modal` также поддерживает свойство `overlay-opacity` и такие свойство, как `z-index`, `max-width` и `max-height`."
      ]
    },
    "nestedModals": {
      "subtitle": "Вложенные модальные окна",
      "paragraph": "Модальные окна могут быть вложенными, то есть вы можете открыть модальное окно из другого."
    },
    "api": {
      "subtitle": "API"
    }
  },
  "pagination": {
    "title": "Pagination",
    "summaryText": "The pagination component is used to split big data sets into chunks so that it's simpler for users to use provided information.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "By default the component is displayed as a list of pages with length equal to `pages` prop value."
      },
      "colors": {
        "title": "Color",
        "text": "Set different colors using `color` prop. You can either user theme string *HEX* color value"
      },
      "sizes": {
        "title": "Size",
        "text": "Utilize `size` prop in order to make component fit your needs. Refer to *API* section for more in-depth explanation of how to use `size` prop."
      },
      "icons": {
        "title": "Custom icons",
        "text": "Feeling the need to change icons for arrows? We have 4 props to enable full customization of `va-pagination` component."
      },
      "limitVisible": {
        "title": "Limiting the length",
        "text": "By using `visible-pages` prop you can set the amount of pages visible on screen."
      },
      "withInput": {
        "title": "Using HTML input instead of pages",
        "text": "With `input` prop you can have input with arrow buttons instead of default pagination."
      },
      "totalAndPageSize": {
        "title": "Using `total` and `page-size`",
        "text": "You can provide `total` and `page-size` props to `va-pagination` component and let it calculate the length of pagination itself. The value of the component in this case would be equal to the number of the first item at the selected page."
      }
    },
    "faq": {
      "subtitle": "FAQ",
      "questions": [
        {
          "question": "What will happen if both `pages` and `total` props are set?",
          "answer": "The error will be thrown into the console. Component is meant to be used only in one of these modes."
        },
        {
          "question": "Can I use `total` and `input` props together?",
          "answer": "Yep. In v-model you'll get item number instead of page number."
        }
      ]
    }
  },
  "tabs": {
    "title": "Tabs",
    "summaryText": "The `va-tabs` component can be used as an on-page navigation offering with a rich variety of visual customizations and usage flexibility.",
    "examples": {
      "default": {
        "title": "Default usage",
        "text": "By default it's displayed as a horizontal list of `va-tab` items"
      },
      "pagination": {
        "title": "With pagination arrows",
        "text": "When wrapper width is less then tabs width, pagination arrows are shown"
      },
      "vertical": {
        "title": "Vertical alignment",
        "text": "By using `vertical` prop alignment of `va-tabs` can be customized"
      },
      "stateful": {
        "title": "Without value",
        "text": "Sometimes `v-model` is too much and in that case using `stateful` prop you can delegate state handling to the component itself"
      }
    },
    "faq": {
      "subtitle": "FAQ",
      "questions": [
        {
          "question": "How can I map content to tabs so that only specific tab content will be displayed?",
          "answer": "We have this functionality in our nearest plans, but for now you could use `v-model` value to map the content yourself"
        }
      ]
    }
  },
  "fileUpload": {
    "title": "Поле выбора файла",
    "summaryText": "Компонент `va-file-upload` это поле для выбора и загрузки файлов с более расширенным интерфейсом, чем по умолчанию.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию это простая кнопка для загрузки файлов."
      },
      "dragAndDrop": {
        "title": "Drag & Drop",
        "text": "Свойство `dropzone` используется для добавления возможности перетаскивания файла в компонент `va-file-upload`."
      },
      "validation": {
        "title": "Допустимые типы файлов",
        "text": "Свойство `file-types` используется для установки допустимых типов файлов."
      },
      "gallery": {
        "title": "Превью",
        "text": "Свойство `type` со значением `gallery` включит отображение превью загружаемого файла."
      }
    }
  },
  "divider": {
    "title": "Разделитель",
    "summaryText": "Компонента `va-divider` используется для разделения разделов списков или макетов.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компонента `va-divider` представляет собой горизонтальную линию."
      },
      "customContent": {
        "title": "Кастомизация содержимого",
        "text": "Вы можете кастомизировать контент компонента. Также вы можете установить положение контента, используя свойство `orientation` в значении: `left`, `center` или `right`."
      },
      "inset": {
        "title": "Вставляемый разделитель",
        "text": "Свойство `inset` стилизует разделитель как вставляемые (применяет внутренние отступы)."
      },
      "vertical": {
        "title": "Вертикальный разделитель",
        "text": "Свойство `vertical` устанавливают вертикальную ориентацию разделителя."
      },
      "dashed": {
        "title": "Пунктирный разделитель",
        "text": "Свойство `dashed` стилизует разделитель пунктиром."
      },
      "withList": {
        "title": "Разделитель списков",
        "text": "Разделитель отлично работает с компонентом [va-list](https://vuestic.dev/en/ui-elements/list)."
      }
    }
  },
  "form": {
    "title": "Форма",
    "summaryText": "Для ваших полей ввода нужна более продвинутая система валидации, чем просто `type=\"email\"`? В компоненте **`va-form`** имееются инструменты для решения этой задачи.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "У всех элементов имеется свойство `rules`, которое предлагает гибкие решения, когда дело доходит до валидации элементов. Используя это свойство, вы сможете указать точные правила, когда поле является *valid* или *invalid*."
      },
      "advanced": {
        "title": "Триггер валидации",
        "text": "Вы можете запустить проверку из родительского компонента, используя метод `validate()` компонента `va-form`."
      }
    }
  },
  "hover": {
    "title": "Hover",
    "summaryText": "The `va-hover` component provides easy access to hover states for any component. To work with hover states you can use either `v-model` or slot-scoped `hover` property.",
    "examples": {
      "slot": {
        "title": "Slot based access",
        "text": "You are also free to use Vue default slot."
      },
      "vModel": {
        "title": "Default usage",
        "text": "You can use `v-model` to get access to hover state."
      },
      "disabled": {
        "title": "Disabled",
        "text": "Won't change value if disabled."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "Can I wrap multiple elements with `va-hover`?",
          "answer": "Yes, but they will share the hover state value."
        }
      ]
    }
  },
  "card": {
    "title": "Карточка",
    "summaryText": "Компонент `va-card` представляет собой многоцелевой репрезентативный компонент, который можно использовать для чего угодно, от ссылок до статей. В нем есть несколько вспомогательных компонентов, облегчающих разметку.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компонент `va-card` реализуется при помощи вспомогательных компонентов `va-card-title` и `va-card-content`."
      },
      "tag": {
        "title": "Тег-обертка",
        "text": "Свойство `tag` обернет компонент в соответствующий тег."
      },
      "borderAndShape": {
        "title": "Контур, тень и форма"
      },
      "disabled": {
        "title": "Неактивная карточка"
      },
      "link": {
        "title": "Карточка-ссылка"
      },
      "stripe": {
        "title": "Полоса"
      },
      "colorAndGradient": {
        "title": "Цвет и градиент"
      }
    },
    "faq": {
      "questions": [
        {
          "question": "Могу ли я использовть компонент `va-card` без вспомогательных компонентов?",
          "answer": "Да, если вам не нравится наш пресет, то вы можете сделать свой."
        },
        {
          "question": "Нужно ли мне вручную выставлять тег, если я использую карточку как ссылку?",
          "answer": "Нет, мы сделаем это за вас. Если тег не установлен, но имеется атрибут `href`, тегом компонента будет `<a>`, если используется свойство `router-link`, то компонент будет обернут в `<router-link>`."
        }
      ]
    }
  },
  "sidebar": {
    "title": "Sidebar",
    "summaryText": "`va-sidebar` is a column to store navigation or secondary information of your app.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Default usage of `va-sidebar`"
      },
      "minimized": {
        "title": "Minimized",
        "text": "You can minimize sidebar using `minimized` prop"
      },
      "hoverable": {
        "title": "Hoverable",
        "text": "Manage your sidebar state using `hoverable` prop. It allows to expand 'va-sidebar' on hover."
      },
      "position": {
        "title": "Position",
        "text": "Align `va-sidebar` to the left or right."
      },
      "width": {
        "title": "Width",
        "text": "Define custom width of sidebar in maximixed state."
      },
      "vModel": {
        "title": "V-model",
        "text": "Use v-model to enable/disable `va-sidebar`."
      },
      "minimizedWidth": {
        "title": "Minimized width",
        "text": "Width of `va-sidebar` when minimized."
      },
      "color": {
        "title": "Color",
        "text": "Change background color of a sidebar."
      },
      "gradient": {
        "title": "Gradient background",
        "text": "You can make Navbar background gradient"
      }
    },
    "faq": {
      "questions": [
        {
          "question": "What if `minimized` conflicts with `hoverable`?",
          "answer": "No conflict there, `minimized` has higher priority. If it's `true`, hover will not expand sidebar."
        }
      ]
    }
  },
  "sidebarItem": {
    "title": "Sidebar item",
    "summaryText": "Used as link in your sidebar.",
    "examples": {
      "simple": {
        "title": "Simple usage example",
        "text": "`VaSidebarItem` is used with `VaSidebarContent` (to create paddings) and `VaSidebarTitle` (to fill all remaining width in `VaSidebarItem`)"
      },
      "colors": {
        "title": "Colors",
        "text": "You can change sidebar default colors"
      },
      "active": {
        "title": "Highlight active `VaSidebarItem`",
        "text": "It is possible to have multiple `VaSidebarItem` highlighted. You can choose your own way to highlight an active item. Even if you want to activate a few `VaSidebarItems`."
      },
      "icons": {
        "title": "`VaSidebarTitle` and VaIcons",
        "text": "`VaSidebarTitle` used to fill all remaining free space in `VaSidebarItem`. We can also add any other components (like `VaIcon`, `VaChip` or `VaButton`)."
      },
      "components": {
        "title": "Advanced case with `VaAccordion`",
        "text": "`VaSidebarItem` can be used with `VaAccordion` and `VaCollapses`."
      }
    }
  },
  "image": {
    "title": "Изображение",
    "summaryText": "Компонент `va-image` используется для отображения отзывчивых изображений, в нем есть функции, облегчающие работу с изображениями.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Базовое использование изображений."
      },
      "contain": {
        "title": "Содержание",
        "text": "Свойство `contain` используется для отображения полного изображения, игнорируя его исходное соотношение сторон и размер."
      },
      "ratio": {
        "title": "Соотношение",
        "text": "Свойство `ratio` изменяет исходное соотношение сторон."
      },
      "slots": {
        "title": "Слоты"
      },
      "defaultSlot": {
        "title": "Слот по умолчанию",
        "text": "Всегда отображается по умолчанию."
      },
      "loaderSlot": {
        "title": "Слот закгрузки",
        "text": "Виден при загрузке изображения."
      },
      "errorSlot": {
        "title": "Слот ошибки",
        "text": "Виден, когда путь `src` неверен."
      }
    }
  },
  "optionList": {
    "title": "Список опций",
    "summaryText": "Компонент `va-option-list` component используется для группировки входных данных формы (например чекбоксов) в список для лучшего контроля над данными.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компонент `va-option-list` отобразит список чекбоксов, предоставленных свойством `options`."
      },
      "withRadio": {
        "title": "Радиокнопка",
        "text": "Свойство `type` со значением `radio` включит отображение списка radio кнопок."
      },
      "withSwitch": {
        "title": "Переключатель",
        "text": "Свойство `type` со значением `switch` включит отображение списка переключателей."
      },
      "withComplexData": {
        "title": "Массив объектов",
        "text": "Вместо массива строк вы можете использовать массив объектов и указать, какой ключ используется для каждого параметра."
      }
    }
  },
  "checkbox": {
    "title": "Чекбокс",
    "summaryText": "Чекбоксы позволяют пользователю выбрать несколько вариантов из набора опций.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию отлично работает с `v-model`."
      },
      "label": {
        "title": "Название",
        "text": "Свойство `label` добавляет текст в название элемента. Если вы примените свойство `left-label`, то название будет размещено слева от чекбокса."
      },
      "indeterminate": {
        "title": "Неустановленное значение"
      },
      "coloring": {
        "title": "Цвет"
      },
      "array": {
        "title": "Группа (Array)",
        "text": "Просто установить в значение `v-model` одинаковое свойстово с типом `array` для группы чекбоксов и добавьте свойство `array-value`."
      },
      "error": {
        "title": "Ошибка",
        "text": "Свойство `error` включает стиль ошибки для чекбокса, свойство `error-messages` добавить сообщение с текстом ошибки."
      }
    }
  },
  "progressBar": {
    "title": "Progress Bar",
    "summaryText": "The `va-progress-bar` component is used to display an indicator of an app loading content. Also check the <a href=\"/en/progress-circle\">va-progress-circle</a> component.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "By default, the `va-progress-bar` displays a horizontal progress bar. Use the `value` prop to control the progress."
      },
      "indeterminate": {
        "title": "Indeterminate",
        "text": "Use the `indeterminate` prop so that the `va-progress-bar` continuously animates."
      },
      "coloring": {
        "title": "Coloring",
        "text": "Use predefined colors or use your own with the `color` prop."
      },
      "sizing": {
        "title": "Sizing",
        "text": "Use predefined sizes or use your own with the `size` prop."
      },
      "slots": {
        "title": "Slots",
        "text": "There is also the default `slot` if you want to display some additional info about the progress."
      },
      "buffer": {
        "title": "Buffer",
        "text": "When dealing with media content like streaming videos we can use progress bars to show the buffering progress indicator on a video."
      }
    }
  },
  "progressCircle": {
    "title": "Progress Circle",
    "summaryText": "The `va-progress-circle` component is used to display an indicator of an app loading content. Also check the <a href=\"/en/progress-bar\">va-progress-bar</a> component.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "By default, the `va-progress-circle` displays a circular progress bar. Use the `value` prop to control the progress."
      },
      "indeterminate": {
        "title": "Indeterminate",
        "text": "Use the `indeterminate` prop so that the `va-progress-circle` continuously animates."
      },
      "coloring": {
        "title": "Coloring",
        "text": "Use predefined colors or use your own with the `color` prop."
      },
      "sizing": {
        "title": "Sizing",
        "text": "Use predefined sizes or use your own with the `size` prop."
      },
      "slots": {
        "title": "Slots",
        "text": "There is also the default `slot` if you want to display some additional info about the progress."
      },
      "thickness": {
        "title": "Thickness",
        "text": "Use the `thickness` prop to adjust the stroke size."
      }
    }
  },
  "infiniteScroll": {
    "title": "Inifinite Scroll",
    "summaryText": "The `va-infinite-scroll` component is a wrapper component which is intended to be used to create lists with dynamically added content. It provides rich interface to customize scrolling behavior and much more.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Just wrap your content in `va-infinite-scroll` component and provide `load` callback, and you'll see it's called each time list is scrolled till the bottom."
      },
      "reverse": {
        "title": "Reverse",
        "text": "With `reverse` prop you can prepend content to your list. Might be useful in messenger windows."
      },
      "disabled": {
        "title": "Disabled",
        "text": "In case you need to prevent a list from loading more content, `disabled` prop is here for you."
      },
      "customTarget": {
        "title": "Custom scroll target container",
        "text": "Provide either DOM element or CSS Selector to be used instead of default scroll container. "
      }
    }
  },
  "input": {
    "title": "Поле ввода",
    "summaryText": "Компонент `va-input` предназначен для использования вместо стандартного элемента HTMl `input` или `textarea`.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компонент `va-input` не имеет атрибутов, но его можно комбинировать с атрибутами `placeholder` и/или `label`. Его также можно сделать неактивным или доступным только для чтения."
      },
      "hint": {
        "title": "Подсказка",
        "text": "Поддерживаются -одно или -много строчные сообщения, чтобы отобразить подсказку для улучшения UX."
      },
      "validate": {
        "title": "Validation and error/success state",
        "text": "Support a simple validation using the rules prop. The prop accepts an array of callbacks. While validating rules, the current v-model value will be passed to the callback. This callback should return either true or a String, the error message. Also you can manually pass error/success prop to manage input state."
      },
      "slots": {
        "title": "Слоты",
        "text": "Вы можете использовать слоты для передачи пользовательских элементов в поле ввода (`inner` или `outer`), таких, как иконки, кнопки и т.д."
      },
      "textarea": {
        "title": "Textarea",
        "text": "Свойство `type` установленное в значение `textarea` переведет компонент `va-input` в режим HTML элемента `textarea`, полезно для ввода большего количества текста. Вы можете оставить поле ввода авторасширяемым или настроить значение `min-rows` и `max-rows` вручную."
      },
      "mask": {
        "title": "Маска",
        "text": "Свойство `mask` добавляет возможность помочь пользователю ввести определенный формат данных с помощью маски. Вы можете использовать некоторые пресеты масок или пользовательские параметры на основе [cleave.js](https://nosir.github.io/cleave.js/). По умолчанию возвращается необработанное значение."
      },
      "styles": {
        "title": "Стили",
        "text": "Поддерживаются три свойства для стилизации компонента: `solid` (по умолчанию), `outline`, `bordered`."
      }
    }
  },
  "alert": {
    "title": "Алерт",
    "summaryText": "Алерт отображает важное сообщение для привлечения внимания пользователя.",
    "examples": {
      "default": {
        "title": "По умолчанию",
        "text": "Базовое использование компонента `va-alert`."
      },
      "color": {
        "title": "Color",
        "text": "Свойство `color` используется, чтобы изменить цвет компонента."
      },
      "styles": {
        "title": "Стили компонента",
        "text": "Для компонента `va-alert` доступно 3 стиля: `color`, `outlined` и `border`."
      },
      "border": {
        "title": "Border",
        "text": "Свойство `border` используется, чтобы добавить полосу, и свойство `border-color`, чтобы изменить её цвет."
      },
      "title": {
        "title": "Title",
        "text": "Свойство `title` позволяет писать текст поверх содержания. Используйте слот `title` для кастомизации загловка."
      },
      "dense": {
        "title": "Dense",
        "text": "Свойство `dense` уменьшает отступы компонента."
      },
      "icon": {
        "title": "Icon",
        "text": "Свойство `icon` позволяет добавить иконку перед областью описания. Используйте слот `icon` для кастомизации иконки."
      },
      "closeable": {
        "title": "Closeable",
        "text": "Свойство `closeable` позволяет добавить иконку для закрытия компонента. Используйте свойство `close-text`, чтобы заменить иконку на текст."
      },
      "center": {
        "title": "Center",
        "text": "Свойство `center` позволяет центрировать заголовок и описание."
      }
    }
  },
  "icon": {
    "title": "Иконка",
    "summaryText": "Компонент `va-icon` позволяет использовать различные шрифты иконок.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Базовое использование компонента с разными шрифтами значков."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "size": {
        "title": "Размер",
        "text": "Свойство `size` задает размер иконкам."
      },
      "rotation": {
        "title": "Поворот",
        "text": "Свойство `rotation` используется для поворота иконки."
      },
      "spin": {
        "title": "Вращение",
        "text": "Свойство `spin` добавляет анимацию вращения иконки."
      },
      "text": {
        "title": "Текста вместо иконки",
        "text": "Свойство `text` используется для отображения иконки как текста"
      },
      "tag": {
        "title": "Произвольный тег",
        "text": "Свойство `tag` полволяет обернуть иконку в произвольный тег"
      }
    }
  },
  "radio": {
    "title": "Радиокнопка",
    "summaryText": "Компонент `va-radio` позволяет пользователю выбрать один вариант из набора опций.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Базовое использование компонента `va-radio`."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "customLabels": {
        "title": "Название",
        "text": "Свойство `label` добавляет текст в название элемента. Если вы примените свойство `left-label`, то название будет размещено слева от чекбокса."
      },
      "disabled": {
        "title": "Недоступная опция",
        "text": "Свойство disabled запрещает любые действия с компонентом `va-radio`."
      }
    }
  },
  "collapse": {
    "title": "Раскрываемая панель",
    "summaryText": "Компонент `va-collapse` переключает видимость контента.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Базовое использование компонента `va-collapse`."
      },
      "solid": {
        "title": "Обводка",
        "text": "Свойство `solid` добавляет обводку компоненту."
      },
      "icon": {
        "title": "Иконка",
        "text": "Свойство `icon` добавляет иконку в заголовок."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      }
    }
  },
  "accordion": {
    "title": "Аккордеон",
    "summaryText": "Позволяет управлять группой [раскрываемых панелей](https://vuestic.dev/ui-elements/collapse).",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Базовое использование компонента `va-accordion`."
      },
      "multiply": {
        "title": "Несколько открытых панелей",
        "text": "Свойство `multiply` позволяет оставить открытыми множество раскрываемых панелей."
      },
      "inset": {
        "title": "Уменьшение активной панели",
        "text": "Свойство `inset` уменьшает активную панель."
      },
      "popout": {
        "title": "Увеличение активной панели",
        "text": "Свойство `popout` увеличивает активную панель."
      }
    }
  },
  "chip": {
    "title": "Фишка",
    "summaryText": "Фишка - это компактный элемент для отображения данных или выполнения действия",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Базовое использование компонента `va-chip`"
      },
      "outline": {
        "title": "Контур",
        "text": "Свойство `outline` убирает заливку фону, оставляя только контур"
      },
      "flat": {
        "title": "Только текст",
        "text": "Свойство `flat` убирает контур и заливку фишки, оставляя только текст"
      },
      "square": {
        "title": "Квадратные углы",
        "text": "Свойство `square` добавляет фишке квадратные углы"
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` позволяет изменить цвет фишки"
      },
      "size": {
        "title": "Размер",
        "text": "Свойство `size` используется для изменения размера фишки"
      },
      "icon": {
        "title": "Иконка",
        "text": "Свойство `icon` добавляет иконку в фишку"
      },
      "closeable": {
        "title": "Закрываемость",
        "text": "Свойство `closeable` добавляет действие закрытия"
      },
      "link": {
        "title": "Ссыка",
        "text": "Свойство `to` делает фишку кликабельной ссылкой"
      }
    }
  },
  "grid": {
    "title": "Grid Layout",
    "summaryText": "Мы предоставляем вам вспомогательные классы для [flex](https://developer.mozilla.org/ru/docs/Web/CSS/flex). Для [css grid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout) встроенных классов не предоставляется. Это не означает, что вам *нужно* использовать `flex`, но он остается мощным инструментом.",
    "examples": {
      "default": {
        "title": "Включение flexbox"
      },
      "breakpoints": {
        "title": "Breakpoints",
        "text": "Вы можете использовать наши `breakpoints`, чтобы установить длину вашего контейнера.",
        "sizes": {
          "xs": "`.xs` - Телефоны (<600px)",
          "sm": "`.sm` - Планшеты (≥600px)",
          "md": "`.md` - Мониторы/ноутбуки (≥960)",
          "lg": "`.lg` - Широкоформатные устройства (≥1280px)",
          "xl": "`.xl` - 4K и ultra-wide устройства (≥1920px)"
        }
      },
      "offsets": {
        "title": "Смещения (offsets)",
        "text": "Вы можете использовать класс `offset`, чтобы установить расстояние между левым и текущим элементами вашего контейнера.",
        "sizes": {
          "xs": "`.offset--xs` - Телефоны (<600px)",
          "sm": "`.offset--sm` - Планшеты (≥600px)",
          "md": "`.offset--md` - Мониторы/ноутбуки (≥960)",
          "lg": "`.offset--lg` - Широкоформатные устройства (≥1280px)",
          "xl": "`.offset--xl` - 4K и ultra-wide устройства (≥1920px)"
        }
      },
      "gutters": {
        "title": "Поля отступа (gutters)",
        "text": "Управление компоновкой `layout` при помощи `gutter`.",
        "sizes": {
          "xs": "`.gutter--xs` - Самый маленький отступ между ячейками",
          "sm": "`.gutter--sm` - Маленький отступ между ячейками",
          "md": "`.gutter--md` - Отступ между ячейками по умолчанию",
          "lg": "`.gutter--lg` - Большой отступ между ячейками",
          "xl": "`.gutter--xl` - Самый большой отступ между ячейками"
        }
      }
    },
    "api": {
      "align": {
        "title": "`align`:",
        "variants": [
          "`.align--start` - край поля элемента помещается на линию начала поперечной оси (cross-start)",
          "`.align--end` - край поля элемента помещается на линию конца поперечной оси (cross-end)",
          "`.align--center` - элементы центруются по поперечной оси (cross-axis)",
          "`.align--baseline` - элементы выравниваются согласно их базовых линий (baselines)"
        ]
      },
      "alignSelf": {
        "title": "`align-self`:",
        "variants": [
          "`.align-self--start` - край поля элемента помещается на линию начала поперечной оси (cross-start)",
          "`.align-self--end` - край поля элемента помещается на линию конца поперечной оси (cross-end)",
          "`.align-self--center` - элементы центруются по поперечной оси (cross-axis)",
          "`.align-self--baseline` - элементы выравниваются согласно их базовых линий (baselines)"
        ]
      },
      "alignContent": {
        "title": "`align-content`:",
        "variants": [
          "`.align-content--start` - строки расположены в начале контейнера",
          "`.align-content--end` - строки расположены в конце контейнера",
          "`.align-content--center` - строки расположены по центру контейнера",
          "`.align-content--space-between` - строки равномерно распределены; первая строка находится в начале контейнера, а последняя - в конце",
          "`.align-content--space-around` - строки равномерно распределены с равным пространством между ними"
        ]
      },
      "justify": {
        "title": "`justify`:",
        "variants": [
          "`.justify--start` - элементы расположены в начале контейнера",
          "`.justify--end` - элементы расположены в конце контейнера",
          "`.justify--center` - элементы расположены по центру контейнера",
          "`.justify--space-between` - элементы равномерно распределены; первый элемент находится в начале контейнера, а последний - в конце",
          "`.justify--space-around` - элементы равномерно распределены по строке с равным пространством вокруг них"
        ]
      },
      "justifySelf": {
        "title": "`justify-self`:",
        "variants": [
          "`.justify-self--start` - элементы расположены на одном уровне друг с другом в начале выравнивающего контейнера по соответствующей оси",
          "`.justify-self--end` - элементы расположены на одном уровне друг с другом в конце выравнивающего контейнера по соответствующей оси",
          "`.justify-self--center` - для элементов, которые не являются дочерними по отношению к flex контейнеру, это значение обрабатывается как начало (start)",
          "`.justify-self--baseline`"
        ]
      }
    }
  },
  "list": {
    "title": "List",
    "summaryText": "The `va-list` component is used to display structured information.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "Has no attributes by default. Build a structure by using components `va-list-label`, `va-list-separator`, `va-list-item` and etc."
      },
      "disabled": {
        "title": "Disabled",
        "text": "You can disable any user interaction by using 'disabled' prop."
      },
      "clickable": {
        "title": "Clickable",
        "text": "Support a ability to use a list item as a link."
      },
      "fit": {
        "title": "Fit",
        "text": "Support a fitting of the list item by its content length."
      },
      "lines": {
        "title": "Lines",
        "text": "You can divide item label content on a custom count of lines."
      }
    },
    "api": {
      "list": {
        "text": "API for `va-list` component."
      },
      "listLabel": {
        "title": "List Label API",
        "text": "API for `va-list-label` component."
      },
      "listSeparator": {
        "title": "List Separator API",
        "text": "API for `va-list-separator` component."
      },
      "listItem": {
        "title": "List Item API",
        "text": "API for `va-list-item` component."
      },
      "listItemLabel": {
        "title": "List Item Label API",
        "text": "API for `va-list-item-label` component."
      },
      "listItemSection": {
        "title": "List Item Section API",
        "text": "API for `va-list-item-section` component."
      }
    }
  },
  "select": {
    "title": "Выпадающий список",
    "summaryText": "Компонент `va-select` используется для выбора значения из списка опций. Этот компонент открывает меню с вариантами выбора.",
    "examples": {
      "default": "Базовое использование",
      "variations": {
        "title": "Выбор нескльких значений",
        "text": "Свойство `multiple` включает возможность выбора нескольких значений"
      },
      "decorators": "Декораторы",
      "objectOptions": {
        "title": "Объекты в качестве опций"
      },
      "trackBy": {
        "title": "Выбор опций с одинаковыми значениями",
        "text": "Свойство `track-by` можно использовать, если у вас есть несколько вариантов с одинаковым значением."
      },
      "slots": {
        "title": "Слоты",
        "text": "Поддерживаемые слоты: `prepend`, `prepend-inner`, `append` и `append-inner`."
      },
      "state": {
        "title": "Состояния",
        "text": "Поддерживаемые состояния: `error`, `success`, `disabled` и `loading`."
      },
      "chips": {
        "title": "Фишки",
        "text": "Включает отображение выборанных значений в виде фишек и их максимального количества."
      },
      "searchable": {
        "title": "Поиск",
        "text": "Свойство `searchable` включает возможность фильтрации списка опций путем ввода."
      },
      "allowCreate": {
        "title": "Создание отсутствующих опций",
        "text": "Свойство `allowCreate` позволяет добавить опции, которые не содержатся в изначальном наборе опций."
      },
      "validation": {
        "title": "Правила валидации",
        "text": "Компонент `va-select` принимает массив функций, которые принимают входное значение в качестве аргумента и возвращают либо `true/false`, либо строку с сообщением об ошибке."
      },
      "keyboardNavigation": {
        "title": "Клавиатруная навигация",
        "moves": "Используя кнопки со стрелками `вверх` и `вниз` вы можете перемещаться межды опциями.",
        "selects": "Выброр опции возможен по клику `ENTER` и `SPACE`.",
        "hints": "Если вы начнете вводить текст в открытом списке опции, он создаст буфер поиска (будет сброшен, если новый ключ не будет введен в течение 1 секунды), который будет использоваться для поиска в названиях опций."
      },
      "styles": {
        "title": "Стили",
        "text": "Применяются те же стили, что и для компонента [va-input](https://vuestic.dev/ui-elements/input)."
      }
    }
  },
  "parallax": {
    "title": "Parallax",
    "summaryText": "Parallax is a component where the background image is moved at a different speed than the foreground content while scrolling.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "A block with a background image is displayed by default. You need to pass the 'src' property."
      },
      "custom": {
        "title": "Custom height and speed",
        "text": "You can adjust parallax height and scroll speed. Attention, the scrolling speed depends on the ratio of the parallax height to the image height."
      },
      "reversed": {
        "title": "Reversed",
        "text": "You can flip the parallax scrolling."
      },
      "slot": {
        "title": "Slot",
        "text": "You can provide some kind of content over the parallax."
      }
    }
  },
  "backtop": {
    "title": "Backtop",
    "summaryText": "The backtop button is used to return to the top of a component.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default `va-backtop` watches for a body element offset height. You can change a target element, positioning and scrolling speed."
      }
    }
  },
  "reset": {
    "title": "CSS Reset",
    "description": "We use `reset.scss` to reset and normalize basic CSS styles",
    "features": {
      "title": "Reset features",
      "info": "Below is a list of features that are provided by reset.scss:",
      "list": "* Margin and padding reset. \n * Border reset. \n * Hide quotes. \n * Font reset. \n * Hidden-attribute fix for newer browsers. \n * HTML5 display-role reset for older browsers",
      "more": "For a complete list of all applied styles, see the [reset.scss](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/components/vuestic-sass/global/reset.scss) stylesheet."
    }
  },
  "colorPicker": {
    "title": "Color Picker",
    "summaryText": "A component which helps to pick the color. We use the [vue-color](https://github.com/xiaokaike/vue-color) library for this component. Will be replaced in next versions.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default use this component with `v-model`."
      }
    }
  },
  "colorInput": {
    "title": "Color Input",
    "summaryText": "Input component that allows you to select a color.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default use this component with `v-model`."
      },
      "selected": {
        "title": "Selected",
        "text": "Dot style changes can be applied."
      },
      "disabled": {
        "title": "Disabled",
        "text": "All user interactions can be disabled."
      },
      "advanced": {
        "title": "Advanced",
        "text": "It's a heavier component which provides an ability to pick color by click."
      }
    },
    "api": {
      "colorInput": "Color Input API",
      "colorInputAdvanced": "Color Input Advanced API"
    }
  },
  "colorSlider": {
    "title": "Color Slider",
    "summaryText": "Slider component for color pick.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default use this component with `v-model`."
      }
    }
  },
  "colorPalette": {
    "title": "Color Palette",
    "summaryText": "Palette component for color pick.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default use this component with `v-model` and palette array."
      },
      "indicator": {
        "title": "Indicator",
        "text": "You can apply different styles to the indicator: `dot` and `square` are available. "
      },
      "advanced": {
        "title": "Advanced",
        "text": "The component has an advanced version with an input component and color picker."
      }
    },
    "api": {
      "colorPalette": "Color Palette API",
      "colorPaletteAdvanced": "Color Palette Advanced API"
    }
  },
  "datePicker": {
    "title": "Поля выбора даты/времени",
    "description": "Работа в прогрессе",
    "summaryText": "Input component for data selection.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default, use this component with v-model."
      },
      "placeholder": {
        "title": "Placeholder",
        "text": "You can set the input component placeholder."
      },
      "weekDays": {
        "title": "Days of the week",
        "text": "Passing `week-days` shows weekdays in picker."
      },
      "successError": {
        "title": "Success & Error",
        "text": "You can apply success and error styles."
      },
      "disabled": {
        "title": "Disabled",
        "text": "You can apply disabled styles and disable interaction with the component."
      },
      "disabledDays": {
        "title": "Disabled days",
        "text": "You can provide a config object with a `disable` property to disable the array of days."
      },
      "range": {
        "title": "Range",
        "text": "You can provide a config object with a `mode: range` property to add the ability to set a date range."
      },
      "dayTime": {
        "title": "Day time",
        "text": "You can provide a config object with an `enableTime` property to add the ability to set a time."
      },
      "multiple": {
        "title": "Multiple",
        "text": "You can provide a config object with an `mode: multiple` property to add the ability to select multiple dates."
      },
      "inline": {
        "title": "Inline",
        "text": "You can provide a config object with an `inline` property to add the ability to select multiple dates."
      }
    }
  },
  "buttonGroup": {
    "title": "Группа кнопок",
    "summaryText": "Это специальный компонент, который обертывает кнопки и применяет к ним специальные стили",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию вам необходимо обернуть ваши кнопки компонентом `va-button-group`"
      },
      "colors": {
        "title": "Цвет",
        "text": "Компонент передает свойство `color` каждой дочерней кнопке"
      },
      "gradient": {
        "title": "Градиент",
        "text": "Свойство `gradient` применяет градиент к цвету фона"
      },
      "sizes": {
        "title": "Размер",
        "text": "Свойство `size` задает размер кнопкам"
      },
      "styles": {
        "title": "Разные стили",
        "text": "Вы можете использовать стили компонента [va-button](https://vuestic.dev/ui-elements/button)"
      },
      "icons": {
        "title": "Иконки",
        "text": "Вы можете кастомизировать ваши кнопки используя иконки"
      }
    }
  },
  "buttonToggle": {
    "title": "Кнопка-переключатель",
    "summaryText": "Кнопка используется для переключения между различными значениями",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию передается объект с опциями и параметр для `v-model`"
      },
      "colors": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)"
      },
      "toggleColor": {
        "title": "Цвет активной кнопки",
        "text": "Свойство `toggle-color` используется для изменения цвета кнопки с выбранным значением"
      },
      "gradient": {
        "title": "Градиент",
        "text": "Свойство `gradient` применяет градиент к цвету фона"
      },
      "sizes": {
        "title": "Размер",
        "text": "Свойство `size` задает размер кнопкам"
      },
      "styles": {
        "title": "Разные стили",
        "text": "Вы можете использовать стили компонента [va-button](https://vuestic.dev/ui-elements/button)"
      },
      "disabled": {
        "title": "Недоступная кнопка",
        "text": "Свойство `disabled` запрещает любые действия с кнопкой."
      }
    }
  },
  "appBar": {
    "title": "App bar",
    "summaryText": "The app bar component is a part of a website’s navigation and it’s an alternative to the header element in apps.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default, a `va-app-bar` needs a parent element with relative position."
      },
      "color": {
        "title": "Color",
        "text": "You can set a background color of the component."
      },
      "bottom": {
        "title": "Bottom",
        "text": "You can make app bar sit at the bottom of the screen."
      },
      "hide": {
        "title": "Hide",
        "text": "`hide-on-scroll` allows you to hide app bar when you scroll away."
      },
      "shadow": {
        "title": "Shadow",
        "text": "You can set a shadow."
      }
    }
  },
  "innerLoading": {
    "title": "Inner Loading",
    "summaryText": "You can handle the loading state of the wrapped component by using the `va-inner-loading` component.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default wrap a component in `va-inner-loading` with a `loading` property."
      },
      "color": {
        "title": "Color",
        "text": "You can change the color of the icon."
      },
      "size": {
        "title": "Size",
        "text": "Supports the ability to resize the icon."
      },
      "icon": {
        "title": "Icon",
        "text": "You can change the loading icon."
      }
    }
  },
  "installation": {
    "title": "Установка",
    "description": "Начните работу с Vuestic UI, чтобы создавать многофункциональные и удобные приложения благодаря нашей гибко настраиваемой структуре. Мы максимально упростили процесс установки, чтобы сэкономить ваши усилия. Установка возможна несколькими способами",
    "subtitle": "Вы можете начать использовать Vuestic с простых шагов, как вам удобнее",
    "prerequisites": "Во-первых, убедитесь, что у вас установлены все необходимые зависимости:",
    "node": "<a href=\"https://nodejs.org/en/\">Node.js</a> ( >=14.*)",
    "npm": "<a href=\"https://www.npmjs.com/get-npm\">npm</a> версия 3+ ( or <a href=\"https://yarnpkg.com/lang/en/docs/install\">yarn</a> version 1.16+) и <a href=\"https://git-scm.com/\">Git</a",
    "afterCheck": "После проверки предварительных требований установите Vuestic UI через npm/yarn:",
    "fonts": {
      "title": "Установка шрифтов",
      "description": "По умолчанию Vuestic UI использует шрифты `Source Sans Pro` и `Material Icons`. Вам необходимо вручную добавить эти шрифты в свой проект. Ниже приведены несколько примеров.",
      "htmlExampleTitle": "Вы можете включить шрифты в заголовок HTML:",
      "cssExampleTitle": "Или вы можете включить шрифты в свой CSS:"
    },
    "quickStart": {
      "title": "Быстрый старт",
      "description": "Убедитесь, что вы импортировали оба стиля и плагин в свой входной файл:"
    },
    "cli": {
      "title": "Установка через Vue CLI",
      "prepare": "Перед установкой убедитесь, что [Vue CLI](https://cli.vuejs.org/guide/installation.html) установлен глобально и имеет версию 4+:",
      "upgrade": "Ознакомьтесь с [руководством](https://cli.vuejs.org/migrating-from-v3/#migrating-from-v3) для Vue CLI версии 3, которое поможет вам обновить приложение",
      "description": "Простой способ, если вы используете настройку через Vue-CLI или хотите опробовать Vuestic UI в новом проекте",
      "attention": "Установка Vuestic UI изменит файлы package.json и main.js (ts). Убедитесь, что вы закоммитили свой код перед его установкой, чтобы избежать потери данных",
      "codeAnnotation": "Затем установите Vuestic UI как плагин Vue-CLI:"
    },
    "nuxt": {
      "title": "Установка с Nuxt",
      "description": "Vuestic UI может быть добавлен как поагин после установки. Создайте плагин и включите его в `nuxt.config.js`:"
    },
    "manual": {
      "title": "Ручная установка",
      "description": "Простой способ, если вы используете настройку через Vue-CLI или хотите опробовать Vuestic UI в новом проекте"
    }
  },
  "roadmap": {
    "title": "План развития Vuestic UI",
    "description": "Наша команда постоянно улучшает существующую кодовую базу и добавляет новые функции, которые помогают еще больше упростить создание приложений.",
    "inDevelopment": {
      "title": "В разработке",
      "description": "В настоящее время разрабатываются следующие релизы:"
    },
    "1-2": {
      "title": "v1.2",
      "description": "Будем работать над новыми компонентами: date-picker и data-table"
    },
    "1-1": {
      "title": "v1.1",
      "description": "Исправления ошибок и поддержка ssr (vite)"
    },
    "1-0": {
      "title": "v1.0",
      "description": "Начало работы над vuestic-ui, переработаны и добавлены несколько компонентов, добавлена соответствующая документация"
    },
    "0-1": {
      "title": "v0.1",
      "description": "Даже не альфа, мы просто выделили компоненты из [vuestic-admin](https://github.com/epicmaxco/vuestic-admin) в отдельный репозиторий, чтобы упростить обновления"
    },
    "released": {
      "title": "Выпущено",
      "description": " Уже выпущенные версии:"
    },
    "longTimeSupport": {
      "title": "Долгосрочная поддержка (LTS)",
      "description": "Следующие версии продолжают поддерживаться на предмет исправлений обратной совместимости, серьезных ошибок и уязвимостей системы безопасности"
    },
    "archive": {
      "title": "Архив",
      "description": "Следующие выпуски являются старыми и не поддерживаются minor и major версиями:"
    }
  },
  "nuxtIntegration": {
    "title": "Work In Progress"
  },
  "accessibilityGuide": {
    "title": "Доступность",
    "description": "Компоненты Vuestic UI поддерживают взаимодействие с клавиатурой для всех действий с помощью мыши и использование семантические элементов HTML5, где это применимо.",
    "keyboardInteractions": {
      "title": "Доступность с клавиатуры",
      "description": "Все интерактивные элементы вашей страницы, например текстовые поля, кнопки и т. д. могут быть доступны с клавиатуры. Это означает, что вы сможете установить на них фокус, используя клавиши Tab и Shift+Tab."
    }
  },
  "configurationGuide": {
    "title": "Конфигурация",
    "description": "Мы разработали удобный механизм, который позволяет делать глубокую настройку иконок, компонентов и цветов.",
    "readMore": "Подробнее",
    "colors": {
      "title": "Цветовые темы",
      "description": "Vuestic UI поставляется с набором цветов, которые можно легко расширить:"
    },
    "icons": {
      "title": "Иконочные шрифты",
      "description": "По умолчанию в Vuestic UI используется шрифт **material design icons**, поэтому вам следует установить его заранее",
      "subtitle": "Использование кастомных иконок",
      "subDescription": "С помощью конфигурации иконок вы можете использовать любой иконочный шрифт, который вам нужен, просто преобразовывая имя иконки в нужные свойства:"
    },
    "components": {
      "title": "Конфигурация компонентов",
      "intro": "Если вы хотите установить глобальные настройки по умолчанию для компонентов Vuestic, то у нас есть для этого конфигурация!",
      "description": "Допустим, вам нужно, чтобы все ваши кнопки были `outline` и `small` в соответствии с дизайном, но по умолчанию это не так:",
      "action": "Чтобы решить эту проблему - добавьте в свой `main.js`:",
      "result": "Теперь ваши кнопки будут выглядеть так:",
      "example": "Аналогичным образом вы можете глобально настроить любые свойства для компонентов Vuestic Ui.",
      "more": "Если вам нужна более глубокая кастомизация, то вы можете переопределить [переменные css](https://vuestic.dev/en/styles/css-variables#overriding) или свойства класса напрямую (в компонентах используется БЭМ, так что селекторы легко угадать)."
    }
  },
  "browserSupport": {
    "title": "Поддрежка браузеров",
    "description": "Мы разрабатываем Vuestic UI с расчетом на будущее. Вот почему мы поддерживаем современные браузеры, но извините, пришлось отказаться от некоторых старых браузеров, таких как IE. На это решение повлияло [прекращение поддержки в Vue 3](https://github.com/vuejs/rfcs/discussions/296) и [падение рейтинга использования](https://caniuse.com/usage-table).",
    "table": {
      "browser": "Браузер",
      "supported": "Поддержка"
    }
  },
  "overview": {
    "title": "Что такое Vuestic UI",
    "description": "Мы разработали фреймворк таким образом, чтобы он удовлетворял самые изощренные дизайнерские фантазии и позволял вам их воплощать.",
    "featuresOverview": "Обзор возможностей",
    "vueThreeCompatible": "Полная **совместимость с Vue.js 3**",
    "featureRich": "Содержит более **50+ компонентов с богатым набором функций, которые можно использовать в любом дизайнерском решении",
    "configurable": "Позволяет **настраивать компоненты** глобально через конфигурации и переменные css",
    "responsive": "Полностью **отзывчивый** и **поддерживает современные браузеры** (но не IE11, извините)",
    "translatable": "Легко интегрируется с **i18n**"
  },
  "translation": {
    "title": "Перевод",
    "description": "Перевод нужен только для документации (`packages/docs/locales`) поскольку компоненты в настоящий момент не используют перевод. Вот текущее состояние поддержки языков:",
    "table": {
      "language": "Язык",
      "supported": "Статус поддержки"
    }
  },
  "table": {
    "title": "Таблицы",
    "summaryText": "Вы можете использовать класс `va-table` для настройки стилей ваших таблиц.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Просто добавьте `va-table` к элементу `table`."
      },
      "hoverable": {
        "title": "Кастомизация :hover",
        "text": "Вы можете добавить больше интерактивности к строкам таблицы с помощью дополнительного класса `va-table--hoverable`."
      },
      "striped": {
        "title": "Выделение полосой",
        "text": "Класс `va-table--striped` позволяет выделить цветом каждую вторую строку в таблице."
      },
      "clickable": {
        "title": "Кликабельность",
        "text": "Чтобы строки при наведении выглядели как свойство `pointer`, добавьте класс `va-table-clickable`."
      }
    }
  },
  "guide": {
    "title": "Руководство для контрибьюторов",
    "description": "В этом руководстве описаны способы, с помощью которых вы можете стать частью непрерывного развития пользовательского интерфейса Vuestic. Мы очень рады, что вы хотите внести свой вклад в Vuestic UI.",
    "pullRequests": {
      "title": "Рекомендации по внесению изменений (Pull Request)",
      "description": {
        "localBranches": "Ветка `master` хранит последнюю стабильную версию + избранные (cherrypicked) хотфиксы. Вся разработка должна вестись в локальных ветках.",
        "dontSubmitToMaster": "**Не отправляйте ваши PR в ветку master.**",
        "checkoutFeat": "Сделайте checkout ветки `feat/` из ветки `develop`, затем создайте pull request в ту же ветку.",
        "multipleSmallCommits": "Совершенно нормально иметь несколько небольших коммитов, когда вы работаете над вашим PR - мы позволим GitHub сделать автоматический squash изменений перед слянием.",
        "fixBugSteps": "В случае исправления бага:\n  * Если вы решаете особую проблему, добавьте `close #xxxx[,#xxx]` (#xxxx - id проблемы) в описание PR так что github [закроет](https://docs.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword) проблему, как только изменения сольются в `master`.\n  * Предоставьте подробное описание ошибки в PR, если это не было сделано в вопросе (issue)."
      }
    },
    "branches": {
      "title": "Ветки",
      "publicBranches": "Публичные ветки (**epicmax/vuestic-ui**):\n  * `master` - только релизы и хотфиксы. Не выставляйте ваш PR в `master`!.\n  * `develop` - основная ветка разработки. На данный момент в ней хранится версия `2.0`.",
      "localBranches": "Локальные ветки\n  * Для локальных веток добавьье префикс `feat/`, например для фикса комнонета `va-tabs` будет `feat/fix-tabs`. Это сделано для того, чтобы локальные ветки были визуально отделены от публичных."
    },
    "fileNaming": {
      "title": "Именование файлов",
      "camelCase": "`testIsContextableComponent.ts` - helpers and instants",
      "kebabCase": "`api-options.ts` - конфигурации",
      "pascalCase": "`DocsCode.vue` - компоненты, классы, типы"
    },
    "forCoreContributors": {
      "title": "Для core-контрибьюторов",
      "linkPr": "Всегда связывайте PR с проблемой (например `close #123`).",
      "assignYourself": "Когда вы приступите к работе над задачей - назначьте её на себя. Это необходимо для предотвращения конфликтов.",
      "smallIssues": "Для небольших изменений вы можете пугить в ветку `develop` напрямую при добавлении (`close #123`) в сообщение коммита.",
      "singlePrPerIssue": "Создавайте один PR для одной проблемы. Если у нас несколько PR - переместите весь код в один, а остальные закройте. Если один PR охватывает несколько вопросов - либо разделите его на несколько PR, либо отметьте одну из проблем как повторяющуюся.",
      "onePersonPerIssue": "Убедитесь, что на каждую проблему назначен только один человек.",
      "checkYourCode": "Проверьте свой код: [соглашения](../packages/old-docs/conventions.md).",
      "weUseYarn": "Мы используем [yarn](https://yarnpkg.com/lang/en/) для управления пакетами.",
      "beProactive": "Будьте инициативными. Если вы считаете, что что-то не так - создайте вопрос (issue) или обсужденеи (discuss).",
      "recommendedTools": "Рекомендуемые инструменты: [GitKraken](https://www.gitkraken.com/), [WebStorm](https://www.jetbrains.com/webstorm/), [ShareX](https://getsharex.com/).",
      "workInBook": "Если вы работаете над UI компонентами - работайте book environment (`yarn serve:book`). Мы хотим исключить глобальные материалы из компонентов."
    },
    "componentFolderStructure": {
      "title": "Структура папки компонента"
    },
    "beforeReleaseWorkflow": {
      "title": "Действия перед релизом",
      "description": "Обновите версии пакетов до новейших. Обновите lock файлы (для обоих `npm` и `yarn`)\n"
    },
    "npmScripts": {
      "title": "Часто используемые сценарии NPM:"
    },
    "credits": {
      "title": "Credits",
      "description": "<a href=\"https://github.com/epicmaxco/vuestic-ui/graphs/contributors\">Зал славы!</a>"
    }
  },
  "globalConfig": {
    "title": "Глобальная конфигурация",
    "subtitle": "С помощью глобальной конфигурации мы можем настроить цвета, иконки и любое свойство для любого компонента.",
    "structure": "Глобальная конфигурация состоит из иконок, цветов и конфигураций компонентов.",
    "setupExampleTitle": "Мы можем предоставить нашу настраиваемую конфигурацию с помощью VuesticPlugin, если мы хотим:",
    "reactiveUpdateExampleTitle": "Или мы можем обновить нашу конфигурацию во время выполнения:",
    "reactiveSetExampleTitle": "Или мы можем установить новую конфигурацию во время выполнения:",
    "links": {
      "readMore": "Подробнее",
      "icons": "Конфигурация иконок",
      "components": "Конфигурация компонентов",
      "colors": "Конфигурация цветов"
    },
    "useInRuntime": "Использовать глобальную конфигурацию как реактивный Proxy:",
    "api": {
      "icons": "Используется для настройки шрифтов и псевдонимов иконок.",
      "components": "Используется для глобальной перезаписи свойств определенных компонентов.",
      "colors": "Используется для определения цветов темы, которые будут использовать компоненты. Здесь мы можем переопределить цвет темы vuestic по умолчанию."
    }
  },
  "iconsConfig": {
    "title": "Конфигурация иконок",
    "about": "По умолчанию в Vuestic UI используется `Material Design Icons`. Если вы хотите использовать другие библиотеки шрифтов, вы можете настроить VaIcon для их использования.",
    "readMore": "Подробнее",
    "readBeforeStart": "Подробнее про компонент иконок",
    "example": "Пример",
    "problem": {
      "definition": "Есть проблема с библиотеками иконок: они обычно используют разные интерфейсы для отображения иконок.",
      "materialIcons": "Например, material-icons требует, чтобы мы установили класс `material-icons` и подставили имя значка внутри тега `span`.",
      "fontAwesome": "Если мы хотим использовать `FontAwesome5`, нам нужно подставить класс `fas`, а затем подставить класс с именем значка и префиксом `fa-` в теге `i`.",
      "summary": "С помощью конфигурации иконок мы можем просто указать имя значка в желаемом стиле. Нам нужно настроить, как указанное имя будет обрабатываться только один раз."
    },
    "fonts": {
      "title": "Шрифты",
      "about": "Мы хотим использовать шаблон `<va-icon name='icon-name' />`. Мы можем настроить конфигурацию для определенного шаблона имени иконки.  В этой конфигурации мы можем поставить класс иконки, контент (innerHTML) или компонент Vue относительно имени иконки.",
      "fontNamePattern": {
        "title": "Шаблон названия шрифта",
        "about": "Шаблон имени шрифта похож на динамические маршруты vue. Мы можем использовать динамические сегменты для динамической генерации класса иконки, контента или свойства. Динамические сегменты следует записывать в фигурные скобки."
      },
      "example": {
        "title": "Пример конфигурации шрифтов",
        "about": "Давайте посмотрим на несколько примеров:",
        "explain": "Ниже мы видим, как преобразится иконка:"
      },
      "readMore": "Подробнее про",
      "advancedFontsUsage": "расширенное использование шрифтов"
    },
    "aliases": {
      "title": "Псевдонимы (Aliases)",
      "about": "Чтобы упростить код, мы можем использовать псевдонимы. Псевдоним имеет свойство `to`, которое изменит имя текущего значка на строку `to`, а затем будет искать соответствующую конфигурацию шрифта. Все свойства найденного шрифта будут применены к текущему значку, если они не были определены в конфигурации псевдонима.",
      "example": {
        "title": "Пример конфигурации псевдонимов",
        "about": "Ниже мы видим, как трансформируется иконка:",
        "explain": "Как видите, конфигурация псевдонима более значимая, чем конфигурация шрифта. И свойства `va-icon` более значимые, чем конфигурация псевдонима и шрифта."
      }
    },
    "setup": {
      "title": "Давайте создадим наш конфиг",
      "about": "Нам нужно обновить конфигурацию иконок в нашей глобальной конфигурации. Конфигурация иконок - это плоский массив со шрифтом и псевдонимами Vuestic по умолчанию. Мы можем использовать хелпер `createIconsConfig()` для создания новой конфигурации со значениями по умолчанию Veustic и нашими пользовательскими шрифтами и псевдонимами. Например:"
    },
    "api": {
      "title": "API конфигурации иконок",
      "name": "Строка или регулярное выражение. Может быть строкой с динамическим сегментом или регулярным выражением, чтобы использовать эту конфигурацию в качестве шрифта.",
      "iconClass": "Класс, который будет применен к иконке. Может быть строкой или функцией, которая принимает значение динамического сегмента и возвращает строку.",
      "content": "Контент, который будет внутри иконки. Может быть строкой или функцией, которая принимает значение динамического сегмента и возвращает строку.",
      "component": "VueComponent, который будет использоваться вместо тега.",
      "componentProps": "Свойства, которые будут привязаны к `component`. Может быть объектом или функцией, которая принимает значение динамического сегмента и возвращает объект.",
      "to": "Здесь вы можете указать имя конфигурации, значения которой будут объединены в эту конфигурацию.",
      "tag": "Тег, который будет использоваться. По умолчанию - `i`.",
      "color": "Цвет, который будет установлен как цвет css стиля",
      "rotation": "Поворачивает иконку под определенным углом.",
      "spin": "Применяет анимацию вращения к иконке."
    }
  },
  "advancedIconsConfig": {
    "title": "Advanced icons config",
    "subtitle": "Icons config is a flat array. VaIcon looks for first appropriate name (strict string, regex or dynamic segment). Then, if config has a `to` prop it looks for additional config that appropriate for `to`.",
    "priority": "Here you can see how its works"
  },
  "componentsConfig": {
    "title": "Конфигурация компонентов",
    "subtitle": "С помощью конфигурации компонента мы можем переопределить свойства по умолчанию для любого компонента vuestic, который мы хотим. Конфигурация компонентов - это объект, ключ которого - имя компонента, а значение - свойства компонента, который мы хотим перезаписать. Например:",
    "demoTitle": "В примере ниже мы можем изменить глобальный стиль всех кнопок на всем сайте документации Vuestic. Не стесняйтесь перейти на страницу документации `Button` и посмотреть, как это выглядит.",
    "resetConfig": "Сбросить конфигурацию",
    "vaConfig": {
      "title": "Scoped конфигурация",
      "subtitle": "Мы можем использовать VaConfig для переопределения свойств компонентов внутри `<va-config></va-config>`. Конфигурация компонентов для всех компонентов внутри тега `va-config` будет перезаписана на значение свойства `components`. Давайте посмотрим на демонстрацию ниже:",
      "explain": "Посмотрите на код. В этой демонстрации мы изменили цвет по умолчанию для всех наших компонентов `VaButton` и `VaIcons`. Также мы передаем свойство третьей кнопке, значение которой имеет более высокий приоритет, чем в scoped конфигурации."
    },
    "api": {
      "title": "API конфигурации компонентов",
      "types": "Типы",
      "ComponentConfig": "Объект, где ключ - это имя компонента Vuestic, а значение - свойства компонента"
    }
  },
  "colorsConfig": {
    "title": "Конфигурация цветов",
    "about": "Вы можете персонализировать цвета, которые используются в нашем приложении. Вы можете динамически переопределять цвета, которые используются в компонентах Vuestic. Кроме того, вы можете добавить свои собственные цвета, которые мы хотим использовать в вашем приложении.",
    "example": {
      "about": "Например, мы можем изменить цвет `primary`, который используется почти во всех компонентах Vuestic.",
      "demo": "Вы можете ознакомиться с демонстрацией ниже и увидеть, как меняются цвета по всей странице."
    },
    "reactivity": {
      "subtitle": "Реактивность",
      "about": "Как видите, такие методы, как `getColor`, `getColors`, не возвращают `Proxy`. Если вы хотите использовать цвет в качестве реактивного `Proxy`, используйте вычисляемые свойства, как в примере выше."
    },
    "otherServices": {
      "subtitle": "Конфигурация цветов с другими конфигурациями",
      "components": "Вы можете использовать свой цвет в конфигурации компонентов:",
      "icons": "Также в конфигурации иконок вы можете использовать собственный цвет в качестве цвета иконки:",
      "css": "Также переменные CSS имеют те же цветовые переменные, которые вы определяете в конфигурации цвета, которые динамически меняются вместе с конфигурацией цветов:"
    },
    "api": {
      "title": "API конфигурации иконок",
      "types": "Типы",
      "ColorConfig": "Объект, где ключ - это имя цвета, а значение - валидный цвет CSS",
      "ColorInput": " Валидный цвет CSS",
      "methods": "Методы",
      "setColors": "Используется для объединения новых цветов в конфигурацию или обновления существующих цветов",
      "getColors": "Возвращает текущую конфигурацию цветов",
      "getColor": "Возвращает цвет по имени",
      "getBoxShadowColor": "Возвращает цвет, который вы можете использовать как цвет для `box-shadow`",
      "getHoverColor": "Возвращает цвет, который вы можете использовать как цвет для `hover`",
      "getFocusColor": "Возвращает цвет, который вы можете использовать как цвет для `focus`",
      "getGradientBackground": "Возвращает цвет, который вы можете использовать как цвет для css атрибута `background`",
      "hookMethods": "хук"
    }
  },
  "cssVariables": {
    "title": "Переменные CSS",
    "description": "Vuestic UI выделяет `CSS` как [переменные CSS (пользовательские свойства)](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties). Нет необходимости устанавливать какие-либо загрузчики или дополнительные пакеты для переопределения стилей компонентов. Вы можете глубоко настраивать компоненты, используя простой синтаксис для изменения CSS в вашем проекте.",
    "convention": {
      "title": "Соглашения",
      "description": "В Vuestic UI применяются следующие соглашения для организации переменных CSS для более удобного использования:"
    },
    "overriding": {
      "title": "Переопределение",
      "description": "Вам не нужны какие-либо специальные знания или пакеты. Просто создайте файл наподобие `overrides.css`, импортируйте его в свой файл main.js (ts) и начните переопределение так же просто, как написание переменных CSS:"
    }
  },
  "navbar": {
    "title": "Navbar",
    "examples": {
      "default": {
        "title": "Default",
        "text": "You can use left, center and right slots to pass items to navbar. "
      },
      "colors": {
        "title": "Colors",
        "text": "By default navbar uses `secondary` color. You can pass `color` props to change navbar background color. Also, text color depends on navbar background color. But you can pass own color if you want."
      },
      "shape": {
        "title": "Shape",
        "text": "You can add the shape to navbar background. Shape color will be taken automatic from `color` prop."
      }
    }
  },
  "buttonDropdown": {
    "title": "Кнопка с меню",
    "summaryText": "Кнопка, при нажатии на которую отображается раскрывающееся содержимое",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию, обернет ваш контент в компонент `va-button-dropdown`"
      },
      "split": {
        "title": "Разделение",
        "text": "Свойство `split` разделяет элемент на 2 отдельные кнопки"
      },
      "colors": {
        "title": "Цвет",
        "text": "Свойство `color` применяет цвет к кнопке"
      },
      "sizes": {
        "title": "Размер",
        "text": "Свойство `size` задает размер кнопке"
      },
      "styles": {
        "title": "Стили",
        "text": "Применяются те же стили, что и для компонента [va-button](https://vuestic.dev/ui-elements/button)"
      },
      "disabled": {
        "title": "Недоступная кнопка",
        "text": "Свойство `disabled` применяет стиль неактивной кнопки и отменяет любый действия с ней"
      },
      "icons": {
        "title": "Иконки",
        "text": "Свойства `icon`, `left-icon` и `opened-icon` применяют иконки к кнопке"
      },
      "events": {
        "title": "События",
        "text": "Компонент `va-dropdown-button` может обрабатывать события клика"
      },
      "clickInside": {
        "title": "Внутренний клик (контент)",
        "text": "Свойство `close-on-content-click` позволяет настроить закрытие или отменить его по клику на контент"
      }
    }
  },
  "VaPopover": {
    "props": {
      "title": "Sets the title of the popover",
      "message": "Message which showed in a popover",
      "trigger": "Event on which popover is triggered",
      "open": "Shows popover",
      "placement": "Sets a popover position",
      "autoHide": "Adds the ability to hide popover when clicked outside"
    },
    "events": {},
    "methods": {},
    "slots": {}
  },
  "popover": {
    "title": "Popover",
    "summaryText": "A `va-popover` can be used to display some text on top of the component.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "Wrap your component in a `va-popover` tag and provide a message property with text."
      },
      "color": {
        "title": "Color",
        "text": "You can set different background colors to the component."
      },
      "placement": {
        "title": "Placement",
        "text": "A component can be set in a different position. Use a position property to set it: `top`, `left`, `right` and `bottom` are available."
      },
      "icon": {
        "title": "Icon",
        "text": "You can set an icon to the component."
      },
      "title": {
        "title": "Title",
        "text": "You can set a title to the popover."
      },
      "trigger": {
        "title": "Trigger",
        "text": "Events triggering the popover separated with spaces: `hover`, `click` or `focus`."
      }
    }
  },
  "typography": {
    "title": "Типографика",
    "description": "В Vuestic UI применяются следующие стили типографики.",
    "headings": "Заголовки",
    "display1": "`class=\"display-1\"`",
    "display2": "`class=\"display-2\"`",
    "display3": "`class=\"display-3\"`",
    "display4": "`class=\"display-4\"`",
    "display5": "`class=\"display-5\"`",
    "titled": "`class=\"title\"`",
    "primary": "Стиль текста по умолчанию",
    "secondary": "`class=\"text--secondary\"`",
    "codeSnippet": "`class=\"code-snippet\"`",
    "textCode": "`class=\"text--code\"`",
    "other": "Другие типографические стили",
    "orderedLists": "`class=\"va-ordered\"`",
    "unorderedLists": "`class=\"va-unordered\"`",
    "link": "`class=\"link\"`",
    "linkSecondary": "`class=\"link-secondary\"`",
    "textHighlighted": "`class=\"text--highlighted\"`",
    "blockquote": "`class=\"va-blockquote\"`",
    "textBlock": "`class=\"text-block\"`"
  },
  "ag-grid-wrapper": {
    "title": "AG Grid Wrapper",
    "description": "Работа в прогрессе",
    "related": "Связанные материалы",
    "styledTablesLink": "Стилизованные таблицы"
  },
  "dataTable": {
    "title": "Таблица данных",
    "description": "Работа в прогрессе",
    "related": "Связанные материалы",
    "styledTablesLink": "Стилизованные таблицы"
  }
}
