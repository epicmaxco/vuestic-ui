{
  "landing": {
    "header": {
      "buttons": {
        "overview": "Обзор",
        "docs": "Документация",
        "discord": "Зайти в Discord",
        "translation": "Добавить перевод...",
        "language": "Язык"
      }
    },
    "preview": {
      "title": "Vue.js 3.0 UI Framework",
      "buttons": {
        "start": "Начать",
        "github": "Открыть на GitHub",
        "askForStars": "Звезда на Github поможет людям узнать о Vuestic"
      },
      "features": {
        "components": {
          "title": "52 Адаптивных Компонента",
          "text": "Документация компонентов"
        },
        "keyboard": {
          "title": "Навигация Клавиатурой",
          "text": "Руководство по навигации"
        },
        "browsers": {
          "title": "Поддержка Современных Браузеров",
          "text": "Список поддерживаемых браузеров"
        }
      }
    },
    "seamless": {
      "title": "Полная интеграция",
      "text": "Используйте Vuestic UI с другими библиотеками компонентов без конфликтов.",
      "compare": {
        "vuestic": "Компоненты Vuestic UI",
        "other": "Другие компоненты"
      }
    },
    "customize": {
      "title": "Полная настройка",
      "text": "Обеспечьте соответствие компонентов Vuestic UI вашему дизайну с помощью мощных динамических конфигураций.",
      "tabs": [
        "Адаптивность",
        "Стили",
        "Темы Оформления"
      ],
      "copy": "Скопировано",
      "configuration": "Посмотрите наше руководство по конфигурации"
    },
    "opensource": {
      "title": "Открытый исходный код",
      "text": [
        "Vuestic UI навсегда бесплатен и открыт для разработки. Можете ознакомиться с нашими",
        "открытыми вопросами",
        "руководством по разработке",
        "и",
        "сервером в discord,",
        "чтобы помочь нам сделать Vuestic UI еще лучше."
      ]
    },
    "admin": {
      "title": "Vuestic Admin",
      "text": "Попробуйте Vuestic UI Framework в действии.",
      "buttons": {
        "github": "Открыть на GitHub",
        "demo": "Демонстрация"
      },
      "features": {
        "opensource": "Открытая лицензия MIT",
        "themes": "Две встроенные цветовые схемы",
        "responsive": "Кросс-браузерная и адаптивная верстка",
        "i18n": "Поддержка i18n"
      }
    },
    "footer": {
      "text": "Открытый исходный код, бесплатно для использования. Предложения о сотрудничестве:",
      "buttons": {
        "epicmax": "Про Epicmax",
        "admin": "Vuestic Admin",
        "spinners": "Epic Spinners"
      }
    }
  },
  "api": {
    "all": {
      "events": {
        "validation": "Событие вызывается при валидации",
        "blur": "Событие вызывается при потере фокуса элемента",
        "focus": "Событие вызывается при фокусировке на элементе",
        "input": "Событие вызывается при изменении значения",
        "click": "Событие вызывается при клике",
        "clickPrepend": "Событие вызывается при клике по слоту `prepend`",
        "clickPrependInner": "Событие вызывается при клике по слоту `prependInner`",
        "clickAppend": "Событие вызывается при клике по слоту `append`",
        "clickAppendInner": "Событие вызывается при клике по слоту `appendInner`",
        "updateModelValue": "Событие запускается, когда компоненту необходимо изменить модель. Также используется `v-model`",
        "updateFocused": "Событие запускается, когда компоненту необходимо переключить `focus`"
      },
      "props": {
        "align": "Задает горизонтальное позиционирование (основано на `flex`), доступны следующие опции: `left`, `center`, `right`, `between`, `around` и `stretch`",
        "id": "Применяет `id` к внутреннему компоненту ввода, полезно для нативных форм",
        "name": "Применяет `name` к внутреннему компоненту ввода, полезно для нативных форм",
        "tag": "Заменяет тег html. Это полезно для семантики, а также для обеспечения корректной разметки в некоторых случаях (`ul > li` и `tr > td`, etc)",
        "size": "Изменяет размер компонента. Доступны следющие опции: `\"small\"`, `\"medium\"`, `\"large\"`. Если вам нужна более тонкая настройка, вы можете указать число (будет использовано как `px`) или строковое значение (поддерживаются `rem` и `px`).",
        "disabled": "Применяется стиль `disabled` и удаляются все эффекты взаимодействия с пользователем",
        "readonly": "Выглядит как активный элемент, но ведет себя как неактивный (`disabled`). В основном используется для компонентов оберток",
        "success": "Отображение компонента в состоянии `success`",
        "error": "Отображение компонента в состоянии `error`",
        "messages": "Описание сообщений для компонента",
        "errorMessages": "Сообщения об ошибках для компонента",
        "errorCount": "Количество отображаемых сообщений об ошибках",
        "stateful": "Добавляет возможность работы с компонентом без настройки `v-model`",
        "color": "Цвет компонента (поддерживаемый темой опции или `HEX`)",
        "textColor": "Цвет текста (поддерживаемый темой опции или `HEX`)",
        "rules": "Правила валидации <!-- TODO Add link -->",
        "to": "Целевой маршрут ссылки, [подробнее](https://router.vuejs.org/api/#to \"Vue router docs\")[[target=_blank]]",
        "replace": "Если установлено, при навигации вызывается `router.replace()` вместо `router.push()`, поэтому запись в истории не сохраняется. [Подробнее](https://router.vuejs.org/api/#replace \"Vue router docs\")[[target=_blank]]",
        "append": "Если установлено, всегда добавляется относительный путь к текущему, [подробнее](https://router.vuejs.org/api/#append \"Vue router docs\")[[target=_blank]]",
        "exact": "Проверяет точное соотвествие ссылки. Без знака `'/'` будет соответствовать каждому маршруту, [подробнее](https://router.vuejs.org/api/#exact \"Vue router docs\")[[target=_blank]]",
        "activeClass": "Применяется к активной ссылке, [подробнее](https://router.vuejs.org/api/#active-class \"Vue router docs\")[[target=_blank]]",
        "exactActiveClass": "Применяется к активной ссылке c точным соотвествием, [подробнее](https://router.vuejs.org/api/#exact-active-class \"Vue router docs\")[[target=_blank]]",
        "href": "Определяет компонент как привязку и применяет атрибут href, [подробнее](https://router.vuejs.org/api/#href \"Vue router docs\")[[target=_blank]].",
        "target": "Целевой указатель навигации, [подробнее](https://developer.mozilla.org/docs/Web/HTML/Element/A)[[target=_blank]].",
        "src": "Исходный URL",
        "arrayValue": "То же, что и нативный `value`, используется с массивом в `v-model`",
        "label": "То же, что и нативный `label`",
        "leftLabel": "Перемещает название в левую часть компонента",
        "loading": "Индикатор загрузки (иконка спиннера)",
        "trueValue": "Переопределяет возвращаемое значение, когда оно выбрано (`checked`)",
        "falseValue": "Переопределяет возвращаемое значение, когда оно не выбрано",
        "square": "Убирает закругления углов",
        "indicator": "Устанавливает стиль индикатора",
        "icon": "Устанавливает иконку",
        "rounded": "Добавляет закругления углов",
        "flat": "Убирает границы и фон",
        "outline": "Убирает фон",
        "gradient": "Добавляет градиент фона",
        "modelValue": "Значение биндинга `v-model`",
        "activeButtonTextColor": "Цвет текста активной кнопки (поддерживаемые темой опции или `HEX`)",
        "indeterminate": "Добавляет состояние, в котором невозможно сказать, в состоянии `on` или `off` находится компонент",
        "indeterminateValue": "Переопределяет не установленное значение состояния",
        "borderColor": "Цвет css стиля `border` (поддерживаемые темой опции или `HEX`)",
        "clearableIcon": "Устанавливает иконку кнопки очистки",
        "tabindex": "Устанавливает кастомный `tabindex`"
      }
    },
    "VaBadge": {
      "props": {
        "text": "Текст бэйджа",
        "overlap": "Позволяет бейджу перекрывать элемент",
        "transparent": "Задает бейджу полупрозрачным",
        "multiLine": "Задает возможность переноса текста на следующую строку",
        "visibleEmpty": "Задает отображение при отсутствии текста",
        "dot": "Задает отображение компонента в виде точки. Полезно если мы не хотим сильно отвлекать пользователя",
        "bottom": "Задает позиционирование вниз",
        "left": "Задает позиционирование влево"
      }
    },
    "VaButton": {
      "props": {
        "outline": "Добавляет границу - `outline` стиль",
        "flat": "Убирает границу - (`flat`) стиль",
        "icon": "Иконка, отображаемая слева от заголовка",
        "iconRight": "Иконка, отображаемая справа от заголовка",
        "type": "Значение html атрибута `type`",
        "block": "Применяет стиль `block` (элемент будет занимать 100% ширины контейнера)",
        "rounded": "Делает закругления углов",
        "round": "Делает кнопку круглой",
        "spaceBetweenItems": "Устанавливает расстояние между несколькими кнопками",
        "gradient": "Применяет градиент к цвету кнопки",
        "href": "Будет использоваться как значение html атрибута `href` (если используется `<button />`, будет заменено на `<a>`)",
        "target": "Будет использоваться как значение html атрибута `target` (если используется `<button />`, будет заменено на `<a>`)"
      },
      "slots": {
        "default": "Контент кнопки"
      },
      "events": {
        "click": "Событие вызывается когда пользователь кликает на кнопку"
      },
      "methods": {
        "focus": "Устанавливает фокус на кнопку",
        "blur": "Удаляет фокус с кнопки"
      }
    },
    "VaForm": {
      "props": {
        "autofocus": "Установит фокус на первый элемент <!-- TODO Add link --> при отрисовке"
      },
      "events": {
        "validation": "Triggered on validation update"
      },
      "methods": {
        "validate": "Выполняет проверку и обновляет состояние ошибки для каждого компонента формы. Работает с вложенными формами",
        "focus": "Устанавливает фокус на превый доступный для этого элемент формы",
        "focusInvalid": "Устанавливает фокус на первый невалидный элемент формы. Это полезно для более длинных форм и позволяет привлечь внимание пользователя к недопустимому полю.",
        "resetValidation": "Сбрасывает валидацию для всех проверяемых элементов <!-- TODO Add link -->",
        "reset": "Сбрасывает значения и валидацию для всех элементов формы"
      }
    },
    "VaSlider": {
      "props": {
        "range": "Задает возможность выбора диапазона значений",
        "value": "Значение компонента",
        "trackLabel": "Задает название ползунка",
        "color": "Задает цвет",
        "trackColor": "Задает цвет дорожки слайдера",
        "labelColor": "Задает цвет названия слайдера",
        "trackLabelVisible": "Задает видимость названия слайдера",
        "min": "Минимальное значение",
        "max": "Максимальное значение",
        "step": "Шаг изменения значения компонента",
        "label": "Название слайдера",
        "invertLabel": "Перемещает название слайдера направо",
        "disabled": "Делает слайдер неактивным",
        "readonly": "Делает слайдер доступным только для чтения",
        "pins": "Добавляет отображение меток на слайдере",
        "iconPrepend": "Иконка перед слайдером",
        "iconAppend": "Иконка после слайдера",
        "vertical": "Включает вертикальное отображение слайдера",
        "showTrack": "Включает / отключает отображение дорожки слайдера"
      },
      "events": {
        "dragStart": "Событие вызывается при начале перемещения ползунка",
        "dragEnd": "Событие вызывается при окончании перемещения ползунка",
        "change": "Событие вызывается при изменении значения после потери фокуса",
        "input": "Событие вызывается при изменении значения"
      },
      "slots": {
        "append": "Поле ввода до слайдера",
        "prepend": "Поле ввода после слайдера",
        "label": "Название слайдера",
        "trackLabel": "Контент `track-label`. В скоупе слота есть доступ к переменным `value` и `order` (для типа `range`)"
      }
    },
    "VaAffix": {
      "props": {
        "offsetTop": "Расстояние от верха целевого элемента до верха прикрепленного элемента",
        "offsetBottom": "Расстояние от низа целевого элемента до низа прикрепленного элемента",
        "target": "Элемент, относительно которого закреплен компонент"
      },
      "events": {
        "change": "Событие вызывается при изменении значения компонента"
      }
    },
    "VaBreadcrumbs": {
      "props": {
        "activeColor": "Цвет активного элемента (поддерживаемые темой опции или `HEX`)",
        "separator": "Задает разделитель элементов",
        "separatorColor": "Цвет разделителя (поддерживаемые темой опции или `HEX`)"
      },
      "slots": {
        "default": "Тело компонента (элементы `va-breadcrumbs-item`)",
        "separator": "Разделитель элементов (может быть строкой или другим компонентом)"
      }
    },
    "VaBreadcrumbsItem": {
      "props": {
        "label": "Component content (string)."
      },
      "slots": {
        "default": "Component content."
      }
    },
    "VaModal": {
      "props": {
        "value": "Текущее значение состояния видимости",
        "title": "Текст заголовка",
        "message": "Контент",
        "attachElement": "Валидный селектор элемента, ребенком которого модальное окно будет рендериться",
        "disableAttachment": "Игнорирует `attach-element` prop. Модальное окно будет рендерериться непосредственно в родительском элементе",
        "size": "Размер окна по ширине: `\"small\"`, `\"medium\"` (по умолчанию) или `\"large\"`",
        "okText": "Текст кнопки **Ok**",
        "cancelText": "Текст кнопки **Cancel**",
        "hideDefaultActions": "Скрытие кнопок **Ok** и **Cancel**",
        "fullscreen": "Отображение модального окна на всю область отображения",
        "mobileFullscreen": "Отображение модального окна на всю область отображения для мобильны устройств `mobile-fullscreen` (по умолчанию: `true`)",
        "noDismiss": "Отмена закрытия по клику на оверлей или клавишу **Esc**",
        "noOutsideDismiss": "Отмена закрытия по клику на оверлей",
        "noEscDismiss": "Отмена закрытия по клику на клавишу **Esc**",
        "maxWidth": "Максимальная ширина модального окна",
        "maxHeight": "Максимальная высота `max-height` модального окна, если контент больше, отобразится полоса вертикальной прокрутки",
        "fixedLayout": "Применение вертикальной полосы прокрутки только к содержимому, заголовок и футор останутся зафиксированными",
        "withoutTransitions": "Отлкючение анимации открытия/закрытия",
        "overlay": "Отображение оверлея",
        "overlayOpacity": "Прозрачность оверлея",
        "zIndex": " CSS свойство `z-index`"
      },
      "events": {
        "clickOutside": "Событие вызывается при клике на оверлей",
        "input": "Событие вызывается при открытии модального окна",
        "ok": "Событие вызывается при клике на кнопку **Ok**",
        "beforeOpen": "Событие вызывается до открытия модального окна, но после начала анимации",
        "open": "Событие вызывается при открытии модального окна после окончания анимации",
        "beforeClose": "Событие вызывается до закрытия модального окна, но после начала анимации",
        "close": "Событие вызывается при закрытии модального окна после окончания анимации",
        "cancel": "Событие вызывается при закрытии модального окна пользователем без побочных действий"
      },
      "methods": {
        "hide": "Закрытие модального окна. Для `stateless` режима происходит только эммит `input`",
        "open": "Открытие модального окна. Для `stateless` режима происходит только эммит `input`",
        "toggle": "Переключение видимости модального окна. Для `stateless` режима происходит только эммит `input`"
      },
      "slots": {
        "default": "Контент",
        "header": "Заголовок",
        "footer": "Футер"
      }
    },
    "VaRating": {
      "props": {
        "value": "Значение компонента",
        "icon": "Иконка, отображаемая при заполненном значении",
        "halfIcon": "Иконка, отображаемая при наполовину заполненном значении (обязательно свойство **`halves`**)",
        "emptyIcon": "Иконка, отображаемая при незаполненном значении",
        "readonly": "Делает компонент доступным только для чтения (отменяет действия: `pointer` и `hover`)",
        "numbers": "Заеменяет иконки рейтинга на числа",
        "halves": "Позволяет выбирать значения с шагом `0.5`",
        "max": "Количество отображаемых элементов",
        "clearable": "Позволяет установить значение компонента на `0`, срабатывает при клике по уже выбранному значению",
        "hover": "Добавляет визуальный отклик при наведении курсора на элементы",
        "texts": "Массив заголовков, который будет применене к каждому значению. Длина массива должна быть равна свойству `max`",
        "textColor": "Цвет текстовых надписей",
        "unselectedColor": "Определяет цвет невыделенных элементов (по умолчанию используется свойство `color`)"
      }
    },
    "VaPagination": {
      "props": {
        "value": "Значение компонента (текущая страница или элемент (если используется свойство `total`))",
        "visiblePages": "Задает количество отображаемых страниц. (При значении 0 отображаются все страницы)",
        "pages": "Задает количество страниц",
        "boundaryLinks": "Задает отображение элементов управления для перехода к первой и последней странице",
        "boundaryNumbers": "Задает постоянное отображение первой и последней страницы (заменяет свойство `boundary-links`, если используются)",
        "directionLinks": "Задает отображение кнопок для перемещения вперед и назад",
        "input": "Использовать поле ввода HTML вместо кнопок для управления состоянием `va-pagination`",
        "hideOnSinglePage": "Задает скрытие компонента, если имеентся всего 1 страница",
        "flat": "Применяет стиль `flat`",
        "total": "Задает количество данных, которые должны повторяться при разбиении на страницы. Это свойство не должно использоваться со свойством `pages`.",
        "pageSize": "Задает количество данных, отображаемых на 1 странице. Используется для расчета длины нумерации страниц. Это свойство не должно использоваться со свойством `pages`.",
        "boundaryIconLeft": "Задает имя для иконки левой границы",
        "boundaryIconRight": "Задает имя для иконки правой границы",
        "directionIconLeft": "Задает имя для иконки перемещения влево",
        "directionIconRight": "Задает имя для иконки перемещения вправо",
        "size": "Задает размер компонента, доступные опции: `small`, `medium` (по умолчанию) и `large`"
      }
    },
    "VaTabs": {
      "props": {
        "value": "Значение `name` выбранной вкладки или ее `index` (если свойство `name` не указано)",
        "left": "Задает выравнивание элементов по левому краю",
        "right": "Задает выравнивание элементов по правому краю",
        "center": "Задает выравнивание элементов по центру",
        "grow": "Задает выравнивание элементов по всей ширине контейнера",
        "hideSlider": "Убирает подчеркивание выбранной вкладки",
        "vertical": "Устанавливает вертикальную ориентацию вкладок",
        "prevIcon": "Иконка, используемая для кнопки пагинации назад",
        "nextIcon": "Иконка, используемая для кнопки пагинации вперед"
      },
      "events": {
        "clickNext": "Событие вызывается при клике на **next** пагинации",
        "clickPrev": "Событие вызывается при клике на **prev** пагинации"
      },
      "slots": {
        "default": "Для контента компонента",
        "tabs": "Для списка вкладок"
      }
    },
    "VaSwitch": {
      "props": {
        "color": "Цвет переключателя",
        "size": "Размер компонента, возможные варианты: `\"small\"`, `\"medium\"` (по умолчанию), `\"large\"`",
        "label": "Название переключателя",
        "leftLabel": "Перемещает название налево",
        "readonly": "Делает переключатель доступным только для чтения",
        "trueLabel": "Название при значении `true`",
        "falseLabel": "Название при значении `false`",
        "trueInnerLabel": "Название внутри переключателя при значении `true`",
        "falseInnerLabel": "Название внутри переключателя при значении `false`",
        "value": "Значение переключателя",
        "trueValue": "Значение включенного переключателя",
        "falseValue": "Значение выключенного переключателя",
        "arrayValue": "Переключает возвращаемое значение в тип `Array`"
      },
      "slots": {
        "default": "Название переключателя",
        "innerLabel": "Название внутри переключателя"
      }
    },
    "VaFileUpload": {
      "props": {
        "type": "Устанавливает тип компонента, поддерживаемые типы: `single`, `list` и `gallery`",
        "fileTypes": "Устанавливает поддерживаемые форматы файлов",
        "dropzone": "Включает Drag&Drop",
        "value": "Массив с загруженными файлами",
        "dropZoneText": "Текст, заменяющий стандартную надпись на drop zone",
        "uploadButtonText": "Текст, заменяющий стандартную надпись кнопки загрузки"
      }
    },
    "VaHover": {
      "props": {
        "value": "Hover state."
      },
      "events": {
        "input": "Событие вызывается при изменении значения компонента"
      },
      "slots": {
        "default": "Содержимое компонента"
      }
    },
    "VaDivider": {
      "props": {
        "vertical": "Вертикальное отображение разделителя",
        "dashed": "Пунктирный разделитель",
        "inset": "Добавляет внутренние отсупы",
        "orientation": "Позиция контента внутри разделителя, доступны опции (только для горизонтального разделителя): `left`, `center` (по умолчанию) и `right`"
      },
      "slots": {
        "default": "Содержимое разделителя (только для горизонтального разделителя)"
      }
    },
    "VaToast": {
      "props": {
        "title": "Задает заголовок уведомления",
        "offsetY": "Задает смещение по оси Y",
        "offsetX": "Задает смещение по оси X",
        "message": "Сообщение уведомления",
        "icon": "Задает инонку закрытия",
        "customClass": "Применяет пользовательский класс к компоненту",
        "duration": "Задает продолжительность отображения уведомления",
        "closeable": "Задает возможность закрытия уведомления по клику",
        "onClose": "Коллбэк закрытия уведомления",
        "onClick": "Коллбэк клика по уведомлению",
        "position": "Задает позиционирование уведомления",
        "render": "Функция рендеринга для использования настраиваемого содержимого",
        "multiLine": "Делает уведомление с большим пространством",
        "html": "Устанавливает возможность использовать `message` как innerHtml. **Обратите внимание, что это может привести к XSS-атакам**, поэтому убедитесь, что вы обезопасили `message` самостоятельно"
      },
      "events": {
        "onClick": "Событие вызывается при клике по уведомлению",
        "onClose": "Событие вызывается при клике на кнопку закрытия уведомления"
      },
      "methods": {},
      "slots": {}
    },
    "VaCard": {
      "props": {
        "stripe": "Включает отображени полоски над заголовком карточки",
        "stripeColor": "Задает цвет полоски (предопределенные опции цвета или `HEX`)",
        "gradient": "Добавляет градиент в тело компонента",
        "bordered": "Включает контур компонента",
        "outlined": "Включает тень компонента",
        "dark": "Применяет темные color и background к карточке"
      }
    },
    "VaSidebar": {
      "props": {
        "minimized": "Минифицированная боковая панель",
        "hoverable": "Открытие боковой панели при наведении (не работает при активном свойстве `minimized`)",
        "position": "Задает расположение боковой панели, доступные опции: `left` (по умолчанию) и `right`",
        "width": "Задает ширину в раскрытом состоянии",
        "minimizedWidth": "Задает ширину в закрытом состоянии",
        "value": "Значение состояни видимости боковой панели"
      }
    },
    "VaImage": {
      "props": {
        "ratio": "Соотношение ширины к высоте",
        "contain": "Масштабирует изображение, сохраняя пропорции, чтобы все изображение поместилось внутри блока"
      },
      "events": {
        "loaded": "Событие вызывается когда загрузка изображения окончена",
        "error": "Событие вызывается при ошибке загрузки"
      },
      "slots": {
        "loading": "Отображается при загрузке изображения",
        "error": "Отображается при ошибке загрузки изображения",
        "default": "Ваше содержимое изображения, не отображается при загрузке или ошибке"
      }
    },
    "VaOptionList": {
      "props": {
        "value": "Массив выделенных элементов",
        "disabledBy": "Ключ в объекте, который будет использоваться как свойство `disabled`. Может быть строкой (путь к ключу) или функцией типа: `(option) => option.disabled`",
        "valueBy": "Ключ в объекте, который будет использоваться как свойство `value`. Может быть строкой (путь к ключу) или функцией типа: `(option) => option.value`",
        "trackBy": "Ключ в объекте, который будет использоваться как свойство `key`. Может быть строкой (путь к ключу) или функцией типа: `(option) => option.track`",
        "textBy": "Ключ в объекте, который будет использоваться как свойство `text`. Может быть строкой (путь к ключу) или функцией типа: `(option) => option.text`",
        "options": "Массив отображаемых элементов",
        "type": "Тип компонента, возможные опции: `radio`, `checkbox` и `switch`",
        "defaultValue": "Выбираемое по умолчанию значение при монтировании компонента",
        "leftLabel": "Пермещает название влево"
      },
      "events": {
        "input": "Событие вызывается при изменении значения"
      },
      "slots": {
        "default": "Используется для отображения элементов. Доступные свойства:\n`option: String `&#124;` Object`,\n`isDisabled: Boolean`,\n`name: String`,\n`color: String`,\n`leftLabel: Boolean`,\n`getText: (option: String `&#124;` Object) => String`,\n`selectedValue: Array<String `&#124;` Object>`,\n`index: Number`"
      }
    },
    "VaAvatar": {
      "props": {
        "icon": "Иконка, которая будет отображаться внутри контейнера",
        "src": "URL-адрес изображения (будет помещен в атрибут `src` тега изображения)",
        "fontSize": "Размер текста внутри аватара",
        "email": "Будет отображать `gravatar` для предоставленного email"
      },
      "slots": {
        "default": "Используйте этот слот для замены содержимого по умолчанию, отображаемого внутри компонента"
      }
    },
    "VaCheckbox": {
      "props": {
        "value": "Значение чекбокса",
        "checkedIcon": "Заменяет иконку `checked`",
        "indeterminateIcon": "Заменяет иконку `indeterminate`"
      },
      "events": {
        "input": "Событие вызывается при изменении значения компонента"
      }
    },
    "VaProgressBar": {
      "props": {
        "value": "The progress value",
        "indeterminate": "Бесконечная анимация прогресса",
        "buffer": "Создает полосу загрузки с буфером. Обычно используется в видео",
        "reverse": "Измените направление индикатора прогресса",
        "rounded": "Добавляет закругления (`border-radius`, включено по умолчанию)"
      },
      "slots": {
        "default": "Отображение любой дополнительной информации"
      }
    },
    "VaProgressCircle": {
      "props": {
        "value": "Значение компонента",
        "indeterminate": "Бесконечная анимация прогресса",
        "thickness": "Размер контура между 0 и 1"
      },
      "slots": {
        "default": "Отображение любой дополнительной информации"
      }
    },
    "VaInfiniteScroll": {
      "props": {
        "offset": "Число пикселей до конца зоны прокрутки, после которой компонент наченет процесс загрузки",
        "reverse": "Вместо низа верхняя часть контейнера вызовет загрузку",
        "disabled": "Отключение триггера загрузки. Удобно если нужно остановить дальнейшую загрузку, когда больше нет элементов в списке",
        "scrollTarget": "Элемент, который будет использоваться в качестве контейнера прокрутки вместо контейнера по умолчанию. Может быть селектором CSS или HTML элементом. Если не задано - в качестве контейнера прокрутки будет использоваться текущий контейнер.",
        "debounce": "Применяться для отложенного запуска процесса загрузки. Полезно, чтобы пользователь не запускал загрузку несколько раз.",
        "load": "Коллбэк для вызова при окончании зоны прокрутки, должен возвращать `Promise`",
        "tag": "Заменяет тег HTML. Это полезно для семантики, а также для обеспечения валидной разметки в некоторых случаях (`ul > li` и `tr > td`, etc)"
      },
      "events": {
        "onload": "Событие вызывается, когда `load` функция успешно завершается",
        "onerror": "Событие вызывается, когда `load` функция завершается с ошибкой"
      },
      "slots": {
        "loading": "Отображается во время загрузки",
        "default": "Контент в области прокрутки"
      }
    },
    "VaAlert": {
      "props": {
        "value": "Текущее состояние видимости `alert`",
        "title": "Текст заголовка",
        "description": "Текст сообщения",
        "icon": "Отображает иконку перед содержанием",
        "closeIcon": "Заменить иконку закрытия по умолчанию на собственную",
        "closeText": "Текст вместо иконки закрытия",
        "closeable": "Добавляет зону закрытия",
        "center": "Центрирование заголовка и сообщения",
        "borderColor": "Цвет для border",
        "border": "Полоса border. Доступные опции расположения: `top`, `right`, `bottom`, `left`",
        "dense": "Уменьшает отступы вокруг сообщения"
      },
      "methods": {
        "hide": "Скрывает alert. Для stateless только эммитит `input`"
      },
      "slots": {
        "default": "Тело компонента",
        "title": "Заголовок",
        "icon": "Иконка",
        "close": "Иконка закрытия"
      }
    },
    "VaIcon": {
      "props": {
        "component": "Позволяет использовать компонент `svg` в качестве иконки",
        "rotation": "Поворачивает компонент на указанный градус",
        "spin": "Запускает анимацию вращения",
        "flip": "Задает зеркальное отображение относительно горизонтальной и вертикальной плоскостей. Доступны следующие значения: `\"off\"`, `\"horizontal\"`, `\"vertical\"` и `\"both\"`.",
        "iconsConfig": "Позволяет настроить набор иконок"
      }
    },
    "VaRadio": {
      "props": {
        "value": "Модель компонента",
        "option": "Значение, которое установится в модель при выборе опции",
        "tabindex": "Определяет tabindex"
      }
    },
    "VaCollapse": {
      "props": {
        "value": "Значение компонента",
        "header": "Текст заголовка",
        "icon": "Иконка в заголовке",
        "solid": "Включает обводку компонента",
        "colorAll": "Применяет цвет ко всему компоненту"
      },
      "events": {
        "input": "Событие вызывается при изменении значения компонента (клик по панели)"
      },
      "methods": {},
      "slots": {
        "default": "Тело компонента",
        "header": "Заголовок компонента"
      }
    },
    "VaAccordion": {
      "props": {
        "value": "Массив значений открытых панелей",
        "multiply": "Позволяет оставлять открытыми множество панелей",
        "inset": "Активная панель будет уменьшена",
        "popout": "Активная панель будет увеличена"
      },
      "events": {
        "input": "Событие вызывается при изменении значения компонента (клик по панели)"
      },
      "methods": {},
      "slots": {
        "default": "Раскрываемые панели (тело аккордеона)"
      }
    },
    "VaChip": {
      "props": {
        "closeable": "Предоставляет возможность закрыть тег",
        "outline": "Применяет контур, убирает фон",
        "flat": "Убирает фон и контур",
        "icon": "Отображаемая внутри компонента иконка",
        "shadow": "Применяет box-shadow к компоненту"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaInput": {
      "props": {
        "value": "Значение поля ввода",
        "type": "Устанавливает тип",
        "label": "Устанавливает название",
        "placeholder": "Устанавливает плейсхолдер",
        "mask": "Устанавливает маску поля ввода при использовании в качестве строки или параметра маски",
        "color": "Цвет поля ввода",
        "removable": "Добавляет кнопку для сброса значения",
        "returnRaw": "Устанавливает возможность возврата необработанного значения",
        "autosize": "Устанавливает возможность авторасширения `textarea` и отключает эту возможность для юзера (устанавливает css `resize: none`)",
        "minRows": "Минимальное количество строк",
        "maxRows": "Максимальное количество строк",
        "rules": "Принимает массив функций у которых `input value` это аргумент и возвращают true / false либо строку с ошибкой",
        "disabled": "Делает поле ввода неактивным",
        "readonly": "Делает поле ввода доступным только для чтения",
        "success": "Отображение поля ввода в состоянии `success`",
        "messages": "Отображает сообщения или сообщение, если используются данные типа `String`",
        "error": "Отображение поля ввода в состоянии `error`",
        "errorMessages": "Отображает сообщения или сообщение об ошибке, если используются данные типа `String`",
        "errorCount": "Количество отображаемых сообщений об ошибках",
        "clearable": "Добавляет кнопку сброса значения поля ввода",
        "clearValue": "Значение, которое установится после сброса",
        "bordered": "Применяет подчеркивание",
        "tabindex": "Устанавливает `tabindex`",
        "focused": "Применяет `focus` стиль",
        "canBeFocused": "Если `false`, тогда компонент не может получить фокус, используя мышь или клавиатуру",
        "immediateValidation": "Устанавливает выполнение валидации при монтировании компонента"

      },
      "events": {
        "input": "Событие вызывается при изменении значения компонента",
        "change": "Событие вызывается при изменении значения пользователем",
        "blur": "Событие вызывается при потере фокуса",
        "focus": "Событие вызывается при установка фокуса",
        "click": "Событие вызывается при клике по полю ввода",
        "clickIcon": "Событие вызывается при клике по иконке",
        "keyup": "Событие вызывается когда пользователь отпустил кнопку на клавиатуре",
        "keydown": "Событие вызывается когда пользователь нажал кнопку на клавиатуре",
        "clear": "Событие вызывается когда пользователь нажал на кнопку `clear`"
      },
      "methods": {
        "blur": "Убирает фокус с поля ввода",
        "focus": "Устанавливает фокус в поле ввода",
        "reset": "Очищает значение поля ввода"
      },
      "slots": {
        "prepend": "Добавляет элемент за пределами поля ввода и перед его содержимым",
        "prependInner": "Добавляет элемент внутри поля ввода и перед его содержимым",
        "append": "Добавляет элемент за пределами поля ввода и после его содержимого",
        "appendInner": "Добавляет элемент внутри поля ввода и после его содержимого",
        "messages": "Замещает сообщения под полем содержимым слота"
      }
    },
    "VaList": {
      "props": {
        "fit": "Растягивает список по ширине содержимого"
      },
      "slots": {
        "default": "Содержимое списка"
      }
    },
    "VaListLabel": {
      "slots": {
        "default": "Название"
      }
    },
    "VaListSeparator": {
      "props": {
        "fit": "Добавляет место с левой стороны",
        "spaced": "Добавляет место над и под разделителем"
      }
    },
    "VaListItem": {
      "events": {
        "focus": "Событие вызывается когда элемент получает фокус",
        "click": "Событие вызывается при клике мышкой на элемент"
      },
      "slots": {
        "default": "Сожержимое компонента"
      }
    },
    "VaListItemLabel": {
      "props": {
        "caption": "Добавляет к тексту другой стиль",
        "lines": "Разделяет содержимое элемента списка на заданное количество строк"
      },
      "slots": {
        "default": "Название"
      }
    },
    "VaListItemSection": {
      "props": {
        "icon": "Добавляет секцию иконки",
        "avatar": "Добавляет секцию аватара"
      },
      "slots": {
        "default": "Содержимое компонента"
      }
    },
    "VaSelect": {
      "props": {
        "value": "Значение компонента. При использование свойства 'multiple' привязанное значение должно иметь тип `Array`",
        "clearValue": "Значение, которое установится после сброса",
        "options": "Опции, которые может выбрать пользователь",
        "disabledBy": "Ключ в объекте, который будет использоваться как свойство `disabled`. Может быть строкой (путь к ключу) или функцией: `(option) => option.disabled`",
        "valueBy": "Ключ в объекте, который будет использоваться как свойство `value`. Может быть строкой (путь к ключу) или функцией: `(option) => option.value`",
        "trackBy": "Ключ в объекте, который будет использоваться как свойство `key`. Может быть строкой (путь к ключу) или функцией: `(option) => option.track`",
        "textBy": "Ключ в объекте, который будет использоваться как свойство `text`. Может быть строкой (путь к ключу) или функцией: `(option) => option.text`",
        "placeholder": "Задает текст плейсхолдера",
        "position": "Задает позиционирование выпадающего меню",
        "tagMax": "Задает максимальное количество тегов, после которого элементы перестанут выбираться",
        "tags": "Задает отображение выбранных значений как тегов",
        "deletableTags": "Задает возможность удаление тегов",
        "searchable": "Задает возможность фильтрации по набранному тексту",
        "multiple": "Задает возможность выбора нескольких значений",
        "maxSelections": "Ограничивает максимальное количество выбранных опций",
        "width": "Задает ширину выпадающего меню",
        "maxHeight": "Задает максимальную высоту выпадающего меню",
        "noOptionsText": "Задает текст, отображаемый при отсутствии опций",
        "fixed": "Задает стратегию раскрывающегося списка",
        "clearable": "Задает возможность очистки значения компонента",
        "hideSelected": "Задает возможность скрытия выбранных значений",
        "allowCreate": "Разрешает добавление отсутствующих значений. Можно установить значение `unique`, если вам необходимо создавать только уникальные значения",
        "clearIcon": "Задает иконку кнопки сброса значения",
        "dropdownIcon": "Задает иконку выпадающего меню. Может быть значением типа `Object`, если вы хотите задать различные иконки для отображения `open/close`",
        "bordered": "Применяет подчеркивание",
        "separator": "Текст для разделения выбранных значений"
      },
      "events": {
        "clear": "Событие вызывается при сбросе значения компонента",
        "updateSearch": "Событие вызывается при изменении значения поиска (фильтра)",
        "createNew": "Событие вызывается при создании нового значения в поле ввода"
      },
      "methods": {
        "reset": "Сбрасывает значение компонента"
      },
      "slots": {
        "prepend": "Добавляет элемент за пределами компонента и перед его содержимым",
        "prependInner": "Добавляет элемент внутри компонента и перед его содержимым",
        "append": "Добавляет элемент за пределами компонента и после его содержимого",
        "appendInner": "Добавляет элемент внутри компонента и после его содержимого",
        "content": "Добавляет элемент вместо `input`"
      }
    },
    "VaParallax": {
      "props": {
        "target": "Элемент, относительно которого закреплен компонент",
        "src": "URL изображения",
        "alt": "Альтернативный текст, если недоступно изображение",
        "height": "Задает выосту",
        "reversed": "Инвертирует прокрутку",
        "speed": "Задает скорость прокрутки"
      },
      "slots": {
        "default": "Контент внутри компонента"
      }
    },
    "VaBacktop": {
      "props": {
        "target": "Задает селектор, к которому привязан компонент",
        "visibilityHeight": "Задает минимальную высоту, после которой отображается компонент",
        "speed": "Задает скорость прокрутки",
        "horizontalPosition": "Задает горизонтальное положение компонента",
        "verticalPosition": "Задает вертикальное положение компонента",
        "horizontalOffset": "Задает горизонтальное смещение компонента от границы области просмотра",
        "verticalOffset": "Задает вертикальное смещение компонента от границы области просмотра"
      },
      "events": {
        "click": "Событие вызывается при клике по компоненту"
      },
      "methods": {},
      "slots": {
        "default": "Содержимое компонента"
      }
    },
    "VaButtonDropdown": {
      "props": {
        "size": "Задает размер кнопки. Возможные опции: `\"small\"`, `\"medium\"` и `\"large\"`",
        "disableDropdown": "Применяет `disabled` к выпадающему меню",
        "disableButton": "Применяет `disabled` к кнопке",
        "round": "Устанавливает квадратный стиль для кнопки",
        "split": "Разделяет элемент на 2 кнопки. Это полезно, когда у вас есть основное действие (кнопка) и ряд второстепенных действий (иконка + раскрывающийся список)",
        "splitTo": "Устанавливает ссылку навигации vue-router в компоненте при применении опции `split`",
        "splitHref": "Sets a native navigation link in a split component.",
        "icon": "Применяет кастомную иконку к раскрывающемуся муню",
        "leftIcon": "Устанавливает иконку с левой стороны",
        "hideIcon": "Убирает иконку (когда `split = false`)",
        "openedIcon": "Применяет кастомную иконку в выпадающем меню, когда оно открыто",
        "position": "Устанавливает расположение выпадающего меню",
        "keepAnchorWidth": "Сохраняет положение кнопки прежним",
        "offset": "Устанавливает расстояние между выпадающим меню и кнопкой",
        "modelValue": "Устанавливет значение опции `model` для компонента",
        "closeOnContentClick": "Устанавливает закрытие или отменияет его по клику на контент"
      },
      "events": {
        "click": "Событие вызывается при клике на кнопку",
        "mainButtonClick": "Событие вызывается при клике на основную кнопку в `split` компоненте"
      },
      "methods": {},
      "slots": {
        "default": "Контент выпадающего меню",
        "label": "Контент кнопки выпадающего меню"
      }
    },
    "VaColorInput": {
      "props": {
        "value": "Текущий цвет.",
        "selected": "Выбирает индикатор."
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaColorPalette": {
      "props": {
        "value": "Текущее значение компонента",
        "palette": "Список цветов для выбора"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaDataTable": {
      "props": {
        "columns": "Свойство `columns` должно быть массивом, который настраивает столбцы таблицы. При этом:\n\n `ITableColumn` &#123; `key: string;` `label?: string;` `headerTitle?: string;` `sortable?: boolean;` `sortingFn?: (a: any, b: any) => number;` `alignHead?: TAlignOptions;` `verticalAlignHead?: TVerticalAlignOptions;` `align?: TAlignOptions;` `verticalAlign?: TVerticalAlignOptions;` `width?: string`&#124;`number;` `classes?: TClassesOptions;` `headerClasses?: TClassesOptions;` `style?: TStyleOptions;` `headerStyle?: TStyleOptions;` &#125;;\n\n `TAlignOptions: 'left'`&#124;`'center'`&#124;`'right'`;\n\n `TVerticalAlignOptions: 'top'`&#124;`'middle'`&#124;`'bottom'`;\n\n `TClassesOptions: string`&#124;`string[]`&#124;`(() => string`&#124;`string[])`;\n\n `TStyleOptions: Record<string, any>`&#124;`(() => Record<string, any>)`",
        "items": "Массив объектов с табличными данными (`ITableItem: Record<string, any>`). Таблица `va-data-table` автоматически вычисляет количество и заголовки столбцов (если не указано иное с помощью свойства `columns`) на основе ключей этих объектов. При вычислении имен столбцов на основе ключей объектов элемента `va-data-table` внутренне использует [Lodash's startCase](https://lodash.com/docs/4.17.15#startCase)[[target=_blank]]. Ошибочные значения заменяются пустой строкой",
        "filter": "Если предоставляется `filter`, будут отображаться только те строки, в которых хотя бы одна ячейка содержит указанное значение. Чтобы отключить фильтрацию во время выполнения (очистить `filter`), укажите пустую строку",
        "filterMethod": "Пользовательская функция фильтрации. Функция принимает начальное значение текущей проверяемой ячейки (`source` является формальным параметром) и должна возвращать `boolean` значение, указывающее, включать ли строку, содержащую эту ячейку, или нет",
        "sortBy": "Устанавливает столбец, по которому выполнять сортировку. Работает через `v-model`",
        "sortingOrder": "Устанавливает направление сортировки. Работает через `v-model`",
        "selectable": "Устанавливает, должна ли `va-data-table` иметь выбираемые строки или нет",
        "clickable": "Устанавливает, должна ли таблица `va-data-table` иметь интерактивные (будут генерироваться события щелчка) строки или нет",
        "selectMode": "Устанавливает режим выбора. Режим `'single'` позволяет выбирать только одну строку за раз, в то время как режим `'multiple'` позволяет выбирать несколько строк, выбирая чекбоксы или используя клавиши **ctrl**/**shift** при щелчке по строкам",
        "selectedColor": "Устанавливает цвет выделенной строки",
        "perPage": "Устанавливает максимальное количество строк, отображаемых в `<tbody>` таблицы",
        "currentPage": "Устанавливает номер текущей страницы таблицы",
        "loading": "Устанавливает состояние загрузки для таблицы (отображая вращающийся индикатор загрузки)",
        "loadingColor": "Устанавливает цвет вращающегося индикатора загрузки",
        "noDataHtml": "Устанавливает html-контент для случаев, когда вообще нет элементов, переданных в опции `items`",
        "noDataFilteredHtml": "Устанавливает html-контент для случаев, когда при фильтрации таблицы с помощью свойства `filter` не найдено никаких элементов",
        "hideDefaultHeader": "Устанавливает, показывать ли заголовки по умолчанию для столбцов",
        "footerClone": "Устанавливает, следует ли клонировать `<thead>` в `<tfoot>`. Не действует, если `<thead>` по умолчанию скрыт с помощью свойства `hide-default-header`",
        "allowFooterSorting": "Позволяет кликать заголовки столбцов `<tfoot>` для сортировки (и для отображения состояния сортировки) строк",
        "striped": "Устанавливает полосатый стиль для строк `<tbody>` (выделяет каждую вторую строку)",
        "hoverable": "Разрешает наведение курсора на строки таблицы внутри `<tbody>`. Цвет выделения при наведении курсора берется из свойства `selected-color`",
        "animated": "Устанавливает css `transition` для строк таблицы",
        "stickyHeader": "Включает закрепление `thead` таблицы (путем установки CSS свойства `position: sticky`)",
        "height": "Устанавливает высоту таблицы и включает прокрутку"
      },
      "events": {
        "updateSortBy": "Событие генерируется при изменении `sort-by`",
        "updateSortingOrder": "Событие генерируется при изменении `sorting-order`",
        "filtered": "`va-data-table` генерирует событие `filtered` каждый раз, когда применяется фильтрация (и когда фильтр очищается), со следующим параметром: `FilteredEmit` = \n &#123;\n &nbsp; `items: ITableItem[]`,\n &nbsp; `itemsIndexes: number[]`\n &#125;",
        "sorted": "Каждый раз, когда сортировка таблицы изменяется, генерируется событие `sorted` со следующим параметром: `SortedEmit` = \n &#123;\n &nbsp; `sortBy: string`,\n &nbsp; `sortingOrder: TSortingOrder`,\n &nbsp; `items: ITableItem[]`,\n &nbsp; `itemsIndexes: number[]`\n &#125;",
        "rowClick": "При щелчке по строке возникает событие со следующим параметром: `RowClickEmit` = \n &#123;\n &nbsp; `event: Event`,\n &nbsp; `item: ITableItem`,\n &nbsp; `itemIndex: number`\n &#125;",
        "rowDblclick": "Двойной щелчок по строке вызывает событие с параметром `RowClickEmit`",
        "rowContextmenu": "При щелчке контекстного меню по строке возникает событие с параметром `RowClickEmit`",
        "selectionChange": "Событие `selectionChange` генерируется каждый раз при изменении выделения строк. Он предоставляет следующий объект: `SelectionChangeEmit` = \n&#123;\n &nbsp; `currentSelectedItems: ITableItem[]`,\n &nbsp; `previousSelectedItems: ITableItem[]`\n &#125;"
      },
      "methods": {},
      "slots": {
        "colgroup": "Содержимое этого слота обернуто (если предусмотрено) внутри тега `<colgroup>`, что позволяет указать определенные параметры столбца. Привязан к столбцам таблицы (не к свойству `columns`, а к их внутреннему представлению)",
        "headerPrepend": "Позволяет добавлять в начало заголовка (`<thead>`) таблицы произвольные строки. Ни к чему не привязан",
        "header": "Устанавливаются заголовки таблицы. Привязан к столбцам (к их внутреннему представлению) таблицы",
        "headerKey": "Нацеливается на конкретный заголовок таблицы по ключу (`key`) столбца. Привязан к столбцу таблицы",
        "headerAppend": "Добавляет пользовательские строки после заголовка (`<thead>`) таблицы",
        "bodyPrepend": "Добавляет в начало `<tbody>` настраиваемые строки",
        "cell": "Нацеливается на все ячейки. Привязан к текущей ячейке (к ее внутреннему представлению)",
        "cellKey": "Позволяет настраивать таргетинг только на ячейки указанного (`key`) столбца. Привязан к текущей ячейке",
        "bodyAppend": "Добавляет строки в `<tbody>` таблицы",
        "footerPrepend": "Добавляет строки перед `<tfoot>`",
        "footer": "Нацелен на все заголовки внутри `<tfoot>`. Работает, если для свойства `footer-clone` установлено значение `true`",
        "footerKey": "Нацеливается на конкретный заголовок таблицы по ключу (`key`) столбца. Привязан к столбцу (к его внутреннему представлению) таблицы. Работает, если для свойства `footer-clone` установлено значение `true`",
        "footerAppend": "Добавляет строки после `<tfoot>`"
      }
    },
    "VaDatePicker": {
      "props": {
        "modelValue": "Дата, массив дат или период",
        "monthNames": "Массив из названий 12 месяцев года",
        "weekdayNames": "Массив из названий 7 дней недели",
        "firstWeekday": "Название первого дня недели. Может быть `Monday` или `Sunday`",
        "hideWeekDays": "Скрывает название дней недели сверху day picker",
        "view": "Это свойство указывает, какой год и месяц будут показаны пользователю. Кроме того, вы можете указать тип и показать выбор года, месяца или дня",
        "type": "Это свойство указывает, какое значение следует выбрать пользователю",
        "showOtherMonths": "Если `true`, дни другого месяца будут показаны в day picker",
        "highlightWeekend": "Если `true` выходные дни будут выделены цветом",
        "highlightToday": "Если `true` текущий день будет выделен цветом",
        "allowedDays": "Функция, которая принимает дату и возвращает `false`, если день не разрешен",
        "allowedMonths": "Функция, которая принимает дату и возвращает `false`, если месяц не разрешен",
        "allowedYears": "Функция, которая принимает дату и возвращает `false`, если год не разрешен",
        "weekends": "Функция, которая принимает дату и возвращает `true`, если дата является выходным днем",
        "startYear": "Первый год, который пользователь может выбрать. По умолчаниюю: 1970",
        "endYear": "Последний год, который пользователь может выбрать. По умолчанию: текущий год + 50 лет",
        "weekendsColor": "Цвет ячеек выходных дней (theme string or HEX string).",
        "mode": "Устанавливает режим date picker: один день, массив дней или период"
      },
      "events": {
        "updateView": "Вызывается при изменении \"типа представления (view)\" компонента. Типы представлений компонента: `\"year\"`, `\"month\"`, `\"day\"`.",
        "hoverYear": "Событие срабатывает при наведении курсора мыши на ячейку года",
        "clickYear": "Событие запускается при нажатии на ячейку года",
        "hoverDay": "Событие срабатывает при наведении курсора мыши на ячейку дня",
        "clickDay": "Событие запускается при нажатии на ячейку дня",
        "hoverMonth": "Событие срабатывает при наведении курсора мыши на ячейку месяца",
        "clickMonth": "Событие запускается при нажатии на ячейку месяца"
      },
      "methods": {},
      "slots": {
        "buttonPrev": "Кнопка для отображения предыдущего месяца или года.",
        "buttonNext": "Кнопка для отображения следующего месяца или года.",
        "header": "Слот отображает год или месяц между кнопками в header.",
        "year": "Используется для изменения способа отображения года в заголовке и ячейке выбора.",
        "month": "Используется для изменения способа отображения месяца в заголовке и ячейке выбора.",
        "weekday": "Используется для изменения способа отображения дня недели в ячейке выбора.",
        "day": "Используется для изменения способа отображения для в ячейке выбора."
      }
    },
    "VaDateInput": {
      "props": {
        "modelValue": "Дата, массив дат или период",
        "weekDays": "Добавляет дни в таблицу",
        "placeholder": "Устанавливает placeholder",
        "config": "Объект с настройками для date picker",
        "monthNames": "Массив из названий 12 месяцев года",
        "weekdayNames": "Массив из названий 7 дней недели",
        "firstWeekday": "Название первого дня недели. Может быть `Monday` или `Sunday`",
        "hideWeekDays": "Скрывает название дней недели сверху day picker",
        "view": "Это свойство указывает, какой год и месяц будут показаны пользователю. Кроме того, вы можете указать тип и показать выбор года, месяца или дня",
        "type": "Это свойство указывает, какое значение следует выбрать пользователю",
        "showOtherMonths": "Если `true`, дни другого месяца будут показаны в day picker",
        "highlightWeekend": "Если `true` выходные дни будут выделены цветом",
        "highlightToday": "Если `true` текущий день будет выделен цветом",
        "allowedDays": "Функция, которая принимает дату и возвращает `false`, если день не разрешен",
        "allowedMonths": "Функция, которая принимает дату и возвращает `false`, если месяц не разрешен",
        "allowedYears": "Функция, которая принимает дату и возвращает `false`, если год не разрешен",
        "weekends": "Функция, которая принимает дату и возвращает `true`, если дата является выходным днем",
        "startYear": "Первый год, который пользователь может выбрать. По умолчаниюю: 1970",
        "endYear": "Последний год, который пользователь может выбрать. По умолчанию: текущий год + 50 лет",
        "weekendsColor": "Цвет ячеек выходных дней (theme string or HEX string).",
        "mode": "Устанавливает режим date picker: один день, массив дней или период",
        "clearable": "Добавляет кнопку сброса значения поля ввода",
        "format": "Функция, которая принимает выбранное значение и должна преобразовывать его в текст для ввода",
        "isOpen": "Значение для dropdown. Если `true`, тогда dropdown отображается раскрытым",
        "resetOnClose": "Если `true`, значение диапазона диапазона будет сброшено до предыдущего разрешенного значения",
        "bordered": "Применяет подчеркивание",
        "label": "Устанавливает название",
        "mask": "Устанавливает маску ввода при использовании в качестве строки или параметры маски",
        "color": "Цвет поля ввода",
        "removable": "Добавляет кнопку для сброса значения",
        "tabindex": "Устанавливает tabindex",
        "returnRaw": "Устанавливает возможность возврата необработанного значения",
        "autosize": "Устанавливает возможность автоматического увеличения текстового поля",
        "minRows": "Минимальное количество строк",
        "maxRows": "Максимальное количество строк",
        "rules": "Принимает массив функций, которые принимают входное значение в качестве аргумента и возвращают либо `true` / `false`, либо строку с сообщением об ошибке.",
        "disabled": "Делает поле ввода неактивным",
        "readonly": "Делает поле ввода доступным только для чтения",
        "success": "Отображение поля ввода в состоянии `success`",
        "messages": "Отображает сообщения или сообщение, если используются данные типа `String`",
        "error": "Отображение поля ввода в состоянии `error`",
        "errorMessages": "Отображает сообщения или сообщение об ошибке, если используются данные типа `String`",
        "errorCount": "Количество отображаемых сообщений об ошибках"
      },
      "events": {
        "updateView": "Событие запускается, когда компоненту необходимо изменить `view`",
        "updateMonth": "Событие запускается, когда компоненту необходимо изменить месяц",
        "updateYear": "Событие запускается, когда компоненту необходимо изменить год",
        "updateIsOpen": "Событие запускается, когда компоненту необходимо переключить состояние `is-open`",
        "updateText": "Событие запускается, когда компоненту необходимо изменить текст поля ввода",
        "hoverDay": "Событие срабатывает при наведении курсора мыши на ячейку дня",
        "hoverMonth": "Событие срабатывает при наведении курсора мыши на ячейку месяца",
        "clickDay": "Событие запускается при нажатии на ячейку дня",
        "clickMonth": "Событие запускается при нажатии на ячейку месяца"
      },
      "methods": {},
      "slots": {}
    },
    "VaButtonGroup": {
      "slots": {
        "default": "Кнопки"
      }
    },
    "VaButtonToggle": {
      "props": {
        "options": "Массив объектов со свойствами label и value",
        "value": "Текущее значение переключателя",
        "size": "Изменяет размер компонента. Доступны следющие опции: 'small', 'medium', 'large'",
        "toggleColor": "Цвет кнопки-переключателя",
        "activeButtonTextColor": "Цвет текста кнопки с выбранным значением"
      },
      "events": {
        "input": "Событие вызывается при переключении между кнопками"
      },
      "methods": {},
      "slots": {}
    },
    "VaAppBar": {
      "props": {
        "gradient": "Применяет градиент к фону",
        "bottom": "Закрепляет панель приложения внизу",
        "hideOnScroll": "Скрывает панель приложения при прокрутке",
        "shadowOnScroll": "Применяет к компоненту стиль `box-shadow` при прокрутке",
        "shadowColor": "Задает цвет тени компонента",
        "target": "Цель для прокрутки"
      },
      "events": {},
      "methods": {},
      "slots": {
        "default": "Содержимое компонента"
      }
    },
    "VaInnerLoading": {
      "props": {},
      "events": {},
      "methods": {},
      "slots": {
        "default": "Обертываемый компонент"
      }
    },
    "VaNuxtIntegration": {
      "props": {},
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaTable": {
      "props": {},
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaSidebarItem": {
      "props": {
        "activeColor": "Задает активный цвет (поддерживаемые темой опции или `HEX`)",
        "hoverColor": "Задает цвет при наведении (поддерживаемые темой опции или `HEX`)",
        "active": "Задает выделение элемента, как активной ссылки"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaNavbar": {
      "props": {
        "shape": "Задает отображение фигуры на фоне"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaPopover": {
      "props": {
        "title": "Устанавливает заголовок всплывающего окна",
        "message": "Сообщение, отображаемое во всплывающем окне",
        "trigger": "Событие, при котором запускается всплывающее окно",
        "open": "Показывает всплывающее окно",
        "placement": "Устанавливает позицию всплывающего окна",
        "autoHide": "Добавляет возможность скрывать всплывающее окно при нажатии снаружи",
        "hoverOverTimeout": "Задержка перед открытием",
        "hoverOutTimeout": "Задержка перед закрытием"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaTimePicker": {
      "props": {},
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaTimeInput": {
      "props": {},
      "events": {},
      "methods": {},
      "slots": {}
    }
  },
  "menu": {
    "badges": {
      "wip": {
        "text": "wip",
        "title": "Работа в процессе"
      },
      "new": {
        "text": "new",
        "title": "Недавно добавленный"
      }
    },
    "categories": {
      "view": "Отображение",
      "form": "Форма",
      "layout": "Расположение",
      "navigation": "Навигация",
      "color": "Цвет",
      "other": "Другое"
    },
    "introduction": "Введение",
    "gettingStarted": "Начало работы",
    "styles": "Стили",
    "reset": "Сброс CSS",
    "uiElements": "Элементы UI",
    "contribution": "Помощь в разработке",
    "extensions": "Расширения",
    "documentationPage": "Документация",
    "affix": "Affix",
    "avatar": "Avatar",
    "breadcrumbs": "Breadcrumbs",
    "badge": "Badge",
    "card": "Card",
    "sidebar": "Sidebar",
    "rating": "Rating",
    "modal": "Modal",
    "tabs": "Tabs",
    "slider": "Slider",
    "switch": "Switch",
    "pagination": "Pagination",
    "fileUpload": "File Upload",
    "form": "Form",
    "hover": "Hover",
    "image": "Image",
    "optionList": "Option List",
    "divider": "Divider",
    "checkbox": "Checkbox",
    "button": "Button",
    "progressBar": "Progress Bar",
    "progressCircle": "Progress Circle",
    "infiniteScroll": "Infinite Scroll",
    "alert": "Alert",
    "icon": "Icon",
    "radio": "Radio",
    "collapse": "Collapse",
    "accordion": "Accordion",
    "chip": "Chip",
    "grid": "Grid",
    "input": "Input",
    "list": "List",
    "select": "Select",
    "parallax": "Parallax",
    "popover": "Popover",
    "backtop": "Backtop",
    "colorPicker": "Color Picker",
    "colorInput": "Color Input",
    "colorSlider": "Color Slider",
    "colorPalette": "Color Palette",
    "datePicker": "Date Picker",
    "dateInput": "Date Input",
    "buttonGroup": "Button Group",
    "buttonToggle": "Button Toggle",
    "buttonDropdown": "Button Dropdown",
    "appBar": "App Bar",
    "innerLoading": "Inner Loading",
    "installation": "Установка",
    "roadmap": "План развития",
    "accessibilityGuide": "Навигация",
    "configurationGuide": "Настройки",
    "overview": "Обзор",
    "github": "GitHub",
    "translation": "Перевод",
    "browserSupport": "Поддрежка браузеров",
    "table": "Таблицы",
    "guide": "Контрибьюторам",
    "iconsConfig": "Иконки",
    "services": "Настройка",
    "globalConfig": "Глобальные настройки",
    "advancedIconsConfig": "Advanced Icons Config",
    "componentsConfig": "Компоненты",
    "colorsConfig": "Цвета",
    "cssVariables": "Переменные CSS",
    "sidebarItem": "Sidebar Item",
    "navbar": "Navbar",
    "toast": "Toast",
    "typography": "Типографика",
    "agGrid": "Тема для AG Grid",
    "dataTable": "Data Table",
    "uiElementGuide": "Разработка элементов UI",
    "colors": "Цвета",
    "timePicker": "Time Picker",
    "timeInput": "Time Input",
    "treeShakingRequirements": "Tree Shaking Requirements"
  },
  "all": {
    "examples": "Примеры",
    "api": "API",
    "faq": "FAQ",
    "code": {
      "or": "или"
    },
    "examplesTexts": {
      "button": "Ваша кнопка"
    }
  },
  "docsNavigation": {
    "copyCode": "Скопировать код",
    "copyCopied": "Скопировано",
    "copyFailure": "Ошибка копирования!",
    "openGithub": "Открыть на GitHub",
    "openCodeSandbox": "Открыть на CodeSandbox"
  },
  "docsExample": {
    "showCode": "Показать код",
    "hideCode": "Скрыть код"
  },
  "documentationPage": {
    "compilesTo": "Компилируется в:",
    "title": "Документация",
    "description": "Эта страница предназначена для контрибьюторов `vuestic-ui`, на ней объясняется, как создавать и изменять документацию.",
    "introduction": {
      "title": "Введение",
      "description": "Вместо использования готовой системы документации, такой как [vue-press](https://vuepress.vuejs.org/)[[target=_blank]] или [docsify](https://docsify.js.org/#/)[[target=_blank]], мы решили создать систему, специально предназначенную для Vuestic. Она призвана обеспечить отличную гибкость для будущего развития."
    },
    "pageConfig": {
      "title": "Конфигурация страницы",
      "descriptionStructure": "Конфигурация страницы должна находиться по определенному пути, который схож с URL страницы. В папку с конфигурацией страницы обязательно должны входить папки `components` для блоков с компонентами и `examples` для блоков с примерами. В этих папках должны находиться `*.vue` файлы. Пример того, какую структуру и директорию имеет папка с конфигурацией для текущей страницы:",
      "descriptionFile": "Файл с конфигурацией содержит в себе `config`, который представляет из себя массив блоков страницы, выполняющих определенные функции."
    },
    "generators": {
      "title": "Генераторы",
      "description": "Мы создали специальные генераторы, чтобы облегчить и автоматизировать создание новых страниц.",
      "generateDocsPage": "* Команда `yarn generate:docspage` сгенерирует страницу с указанным названием в выбранной из списка категории.",
      "generateComponent": "* Команда `yarn generate:component` сгенерирует полную структуру для нового компонента: создаст компонент, подключит его к библиотеке, сделает ему файл конфигурации и добавит чистый пример в папку с примерами."
    },
    "blocktypes": {
      "title": "Типы блоков",
      "descriptionHelper": "Документация имеет плоскую структуру - список блоков. Для использования блоков необходимо создать объект класса  `PageGenerationHelper`, передав в конструктор путь к текущей папке. После создания объекта, вызывайте методы, которые будут возвращать нужный блок.",
      "description": "Markdown поддерживается во всех текстовых блоках. Вот блоки, которые вы можете использовать:",
      "titleBlock": {
        "title": "Заголовок",
        "text": "Заголовок страницы является обязательным для страниц документации.",
        "example": "Заголовок (пример)"
      },
      "subtitle": {
        "title": "Подзаголовок",
        "text": "Используется для: Примеров, API, FAQ. Тэг `h2`.",
        "example": "Подзаголовок (пример)"
      },
      "headline": {
        "title": "Второстепенный заголовок (headline)",
        "text": "Блок используется для обозначения заголовков примеров или FAQ questions. Тэг `h3`.",
        "example": "Второстепенный заголовок (пример)"
      },
      "paragraph": {
        "title": "Параграф",
        "text": "Следует использовать для всех неспециальных текстовых блоков. Для ссылок, ведущих на внешние ресурсы, в markdown-разметке можно указать атрибут **target** следующим образом: `[name](href)[[target=_blank]]`.",
        "example": "Параграф (пример). Ссылка в тексте, ведущая на внешний ресурс: [markdown-it-attrs](https://github.com/arve0/markdown-it-attrs)[[target=_blank]]."
      },
      "list": {
        "title": "Список",
        "text": "Следует использовать для блоков списка.",
        "inCode": "Результирующий код будет выглядеть так:",
        "listExample1": "Значение элемента списка 1",
        "listExample2": "Значение элемента списка 2"
      },
      "code": {
        "title": "Код",
        "text": "Предварительный просмотр кода. Мы используем [prism](https://prismjs.com/)[[target=_blank]]."
      },
      "example": {
        "title": "Пример",
        "text": "Показывает компонент с предварительным просмотром кода. Компонент может использовать все глобальные сервисы: классы css, цвета, и т.д. В основном используется для описания примеров в разделе с элементами UI."
      },
      "component": {
        "title": "Компонент",
        "text": "Показывает компонент, который наделен определенной логикой и не является примером использования."
      },
      "api": {
        "title": "API",
        "text": "Документация API для компонента. Сочетает параметры компонентов с объявлениями вручную."
      },
      "table": {
        "title": "Таблица",
        "text": "Используется для отображения табличных данных."
      },
      "link": {
        "title": "Ссылка",
        "text": "Используется для относительных (локальных) ссылок, обрабатываемых маршрутизатором (с *options* и без).",
        "exampleWithOptions": "Ссылка с options (пример)",
        "example": "Ссылка (пример)"
      },
      "alert": {
        "title": "Предупреждение",
        "text": "Используется для отображения важного сообщения.",
        "example": "Предупреждение (пример)"
      }
    },
    "apiOptionsTitle": "Параметры API",
    "apiOptions": {
      "text": "Мы не можем сделать глубокий автоматический анализ кода. Большая часть документации API должна быть объявлена явно. Параметры API позволяют настраивать такие опции, как: `version`, `props`, `events`, `methods` и `slots`.",
      "version": "`version` - указывает, в какой версии vuestic был реализован этот компонент или функция.",
      "types": "`types` - более простой механизм документирования типов свойств может быть определен из параметров компонентов (`String`, `Number`, etc). Почти для всего остального это должно быть определено.",
      "hidden": "`hidden` - позволяет скрыть свойство из раздела API на странице документации. Так как некоторые свойства могут быть предназначены для внутреннего использования."
    }
  },
  "avatar": {
    "title": "Avatar",
    "summaryText": "Компонент `va-avatar` обычно используется для изображений профиля пользователя. Компонент помогает вам последовательно отображать его в разных размерах во всем веб-приложении.",
    "examples": {
      "default": {
        "title": "По умолчанию",
        "text": "По умолчанию `va-avatar` отображается в виде круглого контейнера."
      },
      "size": {
        "title": "Разные размеры",
        "text": "Свойство `size` позволяет указать нестандартный размер аватара. По умолчанию размер шрифта будет масштабироваться в зависимости от значения свойства `size`. Но вы можете использовать свойство `font-size`, чтобы задать нужный вам размер текста."
      },
      "color": {
        "title": "Разные цвета"
      },
      "withImage": {
        "title": "Изображения",
        "text": "Свойство `src` используется для добавления пользовательских изображений к компоненту."
      },
      "withIcon": {
        "title": "Иконки",
        "text": "Свойство `icon` используется для отображения иконок внутри аватара."
      }
    }
  },
  "affix": {
    "title": "Affix",
    "summaryText": "Компонент `va-affix` создается для фиксации любого содержимого в подходящем положении относительно контейнера.",
    "examples": {
      "top": {
        "title": "Фиксированная позиция свеху"
      },
      "bottom": {
        "title": "Фиксированная позиция снизу"
      },
      "target": {
        "title": "Фиксирует элемент относительно настраиваемого контейнера"
      }
    }
  },
  "breadcrumbs": {
    "title": "Breadcrumbs",
    "text": "Компонент `va-breadcrumbs` используется для навигации по приложению. Он показывает расположение текущей страницы в иерархии навигации, используется с компонентами `va-breadcrumb-item`.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Базовое использование компонента `va-breadcrumbs`."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "align": {
        "title": "Позиционирование",
        "text": "Свойство `align` позволяет настроить горизонтальное позиционирование компонента на странице."
      },
      "separator": {
        "title": "Разделитель",
        "text": "Свойство `separator` позволяет настроить отображаемый разделитель, изменить его цвет можно с помощью свойства `separator-color`."
      },
      "activeColor": {
        "title": "Активный цвет",
        "text": "Цвет активного элемента `va-breadcrumb-item`."
      },
      "item": {
        "title": "Элемент",
        "text": "Элемент в иерархии навигации `va-breadcrumbs-item`."
      }
    },
    "api": {
      "item": {
        "title": "Item API",
        "text": "API для компонента `va-breadcrumb-item`."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "Может ли свойство `separator` работать совместно со слотом `separator`?",
          "answer": "Нет, слот имеет высший приоритет, свойства игнорируются при использовании слотов. То же самое справедливо и для свойства `label` компонента `va-breadcrumbs-item`, оно игнорируется, когда вы используете слот `default`."
        }
      ]
    }
  },
  "badge": {
    "title": "Badge",
    "summaryText": "Компонент `va-badge` используется для выделения информации, относящейся к другому элементу, например, пропущенных уведомлений поверх аватара.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Полезно для отображения информации и таблиц."
      },
      "withAvatar": {
        "title": "Использование с аватаром"
      },
      "withCard": {
        "title": "Использование с карточкой"
      },
      "position": {
        "title": "Позиционирование"
      },
      "dot": {
        "title": "Точка"
      },
      "transparent": {
        "title": "Прозрачность"
      },
      "color": {
        "title": "Цвет"
      }
    }
  },
  "button": {
    "title": "Button",
    "summaryText": "Компонент `va-button` заменяет стандартную кнопку HTML. Он предлагает несколько встроенных стилей и позволяет пользователю вручную изменять цвет и размер.",
    "examples": {
      "default": {
        "title": "По умолчанию",
        "text": "Простая кнопка."
      },
      "withColor": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "withGradient": {
        "title": "Градиент",
        "text": "Свойство `gradient` используется для применения стиля градиента к фону."
      },
      "withTextColor": {
        "title": "Цвет текста",
        "text": "Свойство `text-color` используется для изменения цвета текста кнопки."
      },
      "withSize": {
        "title": "Размер",
        "text": "Свойство `size` используется для изменения размера кнопки."
      },
      "withStyle": {
        "title": "Разные стили",
        "text": "Для компонента `va-button` доступно 3 стиля: `outlined`, `flat` и `square`."
      },
      "withIcon": {
        "title": "Иконки",
        "text": "Вы можете добавить иконки в компонент `va-button` с 2 разными свойствами: `icon` и `icon-right`"
      },
      "withConfig": {
        "title": "Слот иконки с настройкой",
        "text": "Вы можете обернуть кнопки компонентом `VaConfig` и использовать иконки как слоты."
      },
      "withLoading": {
        "title": "Состояние загрузки",
        "text": "Свойство `loading` используется для отображения спиннера загрузки."
      },
      "disabled": {
        "title": "Недоступная кнопка",
        "text": "Свойство `disabled` запрещает любые действия с кнопкой."
      }
    }
  },
  "slider": {
    "title": "Slider",
    "summaryText": "Компонента `va-slider` визуализирует поле ввода для числа. Пользователь может перетащить ползунок в фиксированном диапазоне, чтобы получить необходимое значение.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Базовое использование компонента `va-slider`."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "minmax": {
        "title": "Диапазон значений",
        "text": "Свойства `min` и `max` позволяют установить минимальное и максимальное значения."
      },
      "state": {
        "title": "Сотстояние",
        "text": "Свойство `disabled` делает слайдер неактивным как визуально, так и отменяет все виды действий с ним, свойство `readonly` работает схожим образом, но не применяет визуальных изменений."
      },
      "range": {
        "title": "Диапазон значений",
        "text": "Свойство `range` добавляет возможность выбора диапазона значений."
      },
      "step": {
        "title": "Шаг",
        "text": "Свойство `step` добавляет возможность ограничения шага перемещения селектора на определенное значение."
      },
      "pins": {
        "title": "Метки",
        "text": "Свойство `pins` добавляет отображение меток на слайдере."
      },
      "label": {
        "title": "Название",
        "text": "Свойство `label` добавляет название слайдеру и имеет две дополнительные настройки: `invert-label` - перемещает название вправо, `label-color` - изменяет цвет названия."
      },
      "slots": {
        "title": "Слоты",
        "text": "Вы можете добавить поля ввода до и после компонента используя слоты `append` и `prepend` соотвественно. Так же название слайдера можно кастомизировать через слот `label`."
      },
      "icon": {
        "title": "Иконка",
        "text": "Свойства `icon-append` и `icon-prepend` позовляют добавить иконку до и после слайдера."
      },
      "track": {
        "title": "Дорожка слайдера",
        "text": "Свойство `show-track` позволяет скрыть дорожку слайдера, свойство `track-color` позволяет изменить её цвет."
      },
      "trackLabel": {
        "title": "Название ползунка",
        "text": "Свойство `track-label-visible` включает отображения названия ползунка. Его отображение можно настроить при помощи свойства `track-label`."
      },
      "vertical": {
        "title": "Вертикальный слайдер",
        "text": "Свойство `vertical` изменяет отображение слайдера на вертикальное."
      }
    }
  },
  "switch": {
    "title": "Switch",
    "summaryText": "Компонент `va-switch` изменяет состояние вашего свойства на `true/false`.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Базовое использование компонента `va-switch`."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "state": {
        "title": "Состояние",
        "text": "Свойство `disabled` делает переключатель неактивным как визуально, так и отменяет все виды действий с ним, свойство `readonly` работает схожим образом, но не применяет визуальных изменений."
      },
      "label": {
        "title": "Название",
        "text": "Свойство `label` добавляет название переключателю. Свойство `left-label` - перемещает название влево."
      },
      "customLabel": {
        "title": "Название по значению",
        "text": "Свойства `true-label` и `false-label` задают названия для значений `true` и `false` соответственно."
      },
      "innerLabel": {
        "title": "Название внутри переключателя",
        "text": "Свойства `true-inner-label` и `false-inner-label` задают названия для значений `true` и `false` внутри переключателя. Слот `innerLabel` позволяет кастомизировать эти значения."
      },
      "size": {
        "title": "Размер",
        "text": "Свойство `size` изменяет размер переключателя, доступны 3 варианта: `small`, `medium` (по умолчанию) и `large`."
      },
      "loading": {
        "title": "Спиннер закрузки",
        "text": "Свойство `loading` включает спиннер загрузки переключателя."
      },
      "customValue": {
        "title": "Кастомные значения",
        "text": "Свойства `true-value` и `false-value` позволяют устанавливать пользовательские значения модели для соответствующих состояний компонента."
      },
      "indeterminate": {
        "title": "Неустановленное значение"
      },
      "error": {
        "title": "Ошибка",
        "text": "Свойство `error` стилизует переключатель информируя об ошибке. Свойство `error-messages` добавляет сообщение об ошибке."
      }
    }
  },
  "rating": {
    "title": "Rating",
    "summaryText": "Компонент `va-rating` это простой, но мощный элемент для сбора отзывов пользователей. Всего в нескольких строках кода он может предоставить вам оценку пользователей о вашем продукте или приложении.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компонент `va-rating` предоставляет простой интерфейс для сбора отзывов пользователей."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "size": {
        "title": "Размер",
        "text": "Свойство `size` используется для изменения размера."
      },
      "hover": {
        "title": "Наведение",
        "text": "Свойство `hover` предоставляет возможность увидеть виузальные изменения при наведении до клика."
      },
      "halves": {
        "title": "Половинки",
        "text": "Свойство `halves` позволяет использовать значения с шагом в `0.5`."
      },
      "texts": {
        "title": "Текст",
        "text": "Свойство `texts` позволяет задать текст для каждого значения в рейтинге."
      },
      "clearable": {
        "title": "Сброс значения",
        "text": "Повторный выбор текущего значения очистит компонент."
      },
      "numbers": {
        "title": "Числа вместо иконок",
        "text": "Свойство `numbers` заменит иконки рейтинга на числа."
      },
      "customIcons": {
        "title": "Иконки",
        "text": "Свойства `icon` и `empty-icon` позволяеют заменить иконки для выбранного и невыбранного значения соотвественно."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "Работает ли компонент `va-rating` с клавиатурой?",
          "answer": "Да, вы можете использовать `Tab` `(Shift+Tab)` для перемещения между иконками рейтинга, нажмите `Enter` для подтверждения выбора. Так же вы можете использовать клавиши со стрелками (`влево` и `вправо`), чтобы изменить значение рейтинга."
        },
        {
          "question": "Могу ли я использовать свойство `numbers` в сочетании с остальными свойствами?",
          "answer": "Да, все свойства компонента `va-rating` совместимы друг с другом."
        }
      ]
    }
  },
  "toast": {
    "title": "Toast",
    "summaryText": "Компонент для отправки уведомлении пользователю.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию этот компонент запускается с помощью метода `init` с объектом настройки."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "offset": {
        "title": "Смещение",
        "text": "Свойства `offsetX` и `offsetY` задают смещение уведомления."
      },
      "position": {
        "title": "Позиционирование",
        "text": "Свойство `position` устанавливает расположение уведомления, доступные опции: `top-right`, `top-left`, `bottom-right` и `bottom-left`."
      },
      "close": {
        "title": "Закрытие",
        "text": "Вы можете использовать метод `close`, чтобы закрыть уведомление или вы можете установить собственное событие `onClose`."
      },
      "click": {
        "title": "Клик по уведомлению",
        "text": "Вы можете установить собственное событие `onClick` для обработки нажатия на уведомление."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "В чем разница между компонентом и сервисом?",
          "answer": "Разница в реализации. Сервис ведет себя более гибко, и его легче привязать к определенным событиям, чем отображать весь элемент. Каждое свойство, которое вы предоставляете компоненту, вы также можете предоставить сервису, используя объект настройки."
        }
      ]
    }
  },
  "modal": {
    "title": "Modal",
    "summaryText": "Классический модальный оверлей, который представляет собой диалоговое окно или другой интерактивный компонент, такой как отклоняемый alert, подокно и т.д.",
    "overview": {
      "title": "Обзор",
      "text": "По умолчанию `<va-modal>` содержит в футере кнопки **OK** and **Cancel**. Вы можете указать собственное сообщение и заголовок с помощью параметров `message` и `title`.\n\nКомпонент `<va-modal>` поддерживает закрытие по клику **Esc** (включено по умолчанию) и клику по оверлею (включено по умолчанию). Эти функции можно отключить, используя параметры `no-esc-dismiss` и `no-external-dismiss` соответственно или `no-dismiss` в качестве сокращения, чтобы отключить обе функции."
    },
    "stateful": {
      "title": "Сохранение состояния (stateful)",
      "text": "По умолчанию компонент `va-modal` не сохраняет состояние. Вы можете изменить это установив параметр `stateful`."
    },
    "fullscreen": {
      "title": "Отображение на весь экран",
      "text": "Свойство `fullscreen` включает отображение модального окна на весь экран.\n\nИмейте ввиду, что компонент `va-modal` на мобильных устройствах включает свойство `fullscreen` по умолчанию. Вы можете изменить это установив свойство `mobile-fullscreen` в `false`."
    },
    "modalSizing": {
      "title": "Размер",
      "text": "Свойство `size` позволяет изменить размер модального окна, имеется три опциональных размера. Эти размеры действуют в определенных брейкпоинтах, чтобы избежать горизонтальных полос прокрутки на более узких окнах просмотра. Доступные опции: `small`, `medium` (по умолчанию) и `large`."
    },
    "toggleVisibility": {
      "title": "Переключение видимости",
      "text": "Есть несколько методов, которые вы можете использовать для переключения видимости модального окна.",
      "sections": [
        {
          "title": "Использование свойства `v-model`",
          "text": "Свойство `v-model` всегда автоматически синхронизировано с состоянием отображения компонентом `<va-modal>` и вы можете управлять видимостью при помощи `v-model`."
        },
        {
          "title": "Использование методов `show()`, `hide()`, и `toggle()`",
          "text": "Вы можете получить доступ к компоненту используя атрибут `ref` и вызвать методы `show()`, `hide()` или `toggle()`."
        }
      ]
    },
    "disableAnimation": {
      "title": "Отмена анимации открытия/закрытия",
      "text": "Свойство `without-transitions` позволяет отключить анимации открытия/закрытия модального окна."
    },
    "hidingOverlay": {
      "title": "Скрытие оверлея",
      "text": "Свойство `overlay` позволяет скрыть оверелей модального окна, для этого его необходимо установит в `false`.\n\nИмейте ввиду, что клик по скрытому оверлею все еще будет приводить к закрытию модального окна. Вы можете отменить это действие при помощи свойства `no-outside-dismiss`."
    },
    "scrollingLongContent": {
      "title": "Прокрутка длинного контента",
      "text": "Когда модальное окно становится слишком длинным для области просмотра, то появляется полоса прокрутки для скроллинга тела модального окна.\n\nСвойство `fixed-layout` позволяет включить прокрутку только для контента внутри модального окна, тогда заголовок и футер с кнопками останутся зафиксированными."
    },
    "customization": {
      "title": "Кастомизация",
      "text": "Компонент `<va-modal>` предоставляет несколько слотов (`default`, `header` и `footer`), которые вы можете использовать для кастомизации контента в соответствующих секциях.\n\nВы можете задать кастомный текст для кнопок **Cancel** и **Ok** используя свойства `ok-text` и `cancel-text`, или вы можете скрыть их используя свойство `hide-default-actions`.\n\nКомпонент `va-modal` также поддерживает свойство `overlay-opacity` и такие свойства, как `z-index`, `max-width` и `max-height`."
    },
    "nestedModals": {
      "title": "Вложенные модальные окна",
      "text": "Модальные окна могут быть вложенными, то есть вы можете открыть модальное окно из другого."
    }
  },
  "pagination": {
    "title": "Pagination",
    "summaryText": "Компонент `va-pagination` используется для разделения больших наборов данных на фрагменты, чтобы пользователям было проще использовать предоставленную информацию.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компонент `va-pagination` отображается в виде списка страниц, длина которого равна значению свойства `pages`."
      },
      "colors": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "sizes": {
        "title": "Размер",
        "text": "Свойство `size` изменяет размер переключателя, доступны 3 варианта: `small`, `medium` (по умолчанию) и `large`."
      },
      "icons": {
        "title": "Иконки",
        "text": "Чувствуете необходимость поменять значки стрелок? У нас есть 4 свойства для полной настройки компонента `va-pagination`."
      },
      "limitVisible": {
        "title": "Ограничение длины",
        "text": "Свойство `visible-pages` задает количество страниц, отображаемых на экране."
      },
      "withInput": {
        "title": "Использование поля ввода HTML вместо страниц",
        "text": "Свойство `input` включает отображения поля ввода с кнопоками со стрелками вместо разбиения на страницы по умолчанию."
      },
      "totalAndPageSize": {
        "title": "Вычисляемая длина элементов",
        "text": "Свойства `total` и `page-size` позволяют компоненту вычислить длину отображаемых элементов. Значение компонента в этом случае будет равно номеру первого элемента на выбранной странице."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "Что произойдет, если будут установлены оба свойства `pages` и `total`?",
          "answer": "В консоль будет выведено сообщение об ошибке. Компонент предназначен для использования только в одном из этих режимов."
        },
        {
          "question": "Могу ли я использовать свойства `total` и `input` вместе?",
          "answer": "Да. В `v-model` вы получите номер элемента вместо номера страницы."
        }
      ]
    }
  },
  "tabs": {
    "title": "Tabs",
    "summaryText": "Компонент `va-tabs` можно использовать в качестве навигации на странице с богатым набором визуальных настроек и гибкостью использования.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компонент `va-tabs` используется как горизонтальный список элементов `va-tab`."
      },
      "pagination": {
        "title": "Стрелки пагинации",
        "text": "Когда ширина отображения меньше ширины вкладок, отображаются стрелки пагинации."
      },
      "vertical": {
        "title": "Вертикальное отображение",
        "text": "Свойство `vertical` включает вертикальное отображение компонента `va-tabs`."
      },
      "stateful": {
        "title": "Исользование без значения `v-model`",
        "text": "Иногда использование `v-model` бывает избыточным, и в этом случае, используя свойство `stateful`, вы можете делегировать обработку состояния самому компоненту."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента, `text-color` изменяет цвет текста (предопределенные опции цвета или `HEX`)."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "Как я могу контролировать отображения контента во вкладках?",
          "answer": "У нас есть эта функция в наших ближайших планах, но пока вы можете использовать значение `v-model` для самостоятельного сопоставления содержимого."
        }
      ]
    }
  },
  "fileUpload": {
    "title": "File Upload",
    "summaryText": "Компонент `va-file-upload` это поле для выбора и загрузки файлов с более расширенным интерфейсом, чем по умолчанию.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию это простая кнопка для загрузки файлов."
      },
      "dragAndDrop": {
        "title": "Drag & Drop",
        "text": "Свойство `dropzone` используется для добавления возможности перетаскивания файла в компонент `va-file-upload`.",
        "exampleText": "Это слот, кликните или перенесите файл для загрузки"
      },
      "slots": {
        "title": "Slot",
        "text": "Позволяет передать кастомизированную область для загрузки файла."
      },
      "validation": {
        "title": "Допустимые типы файлов",
        "text": "Свойство `file-types` используется для установки допустимых типов файлов."
      },
      "gallery": {
        "title": "Превью",
        "text": "Свойство `type` со значением `gallery` включит отображение превью загружаемого файла."
      }
    }
  },
  "divider": {
    "title": "Divider",
    "summaryText": "Компонент `va-divider` используется для разделения разделов списков или макетов.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компонента `va-divider` представляет собой горизонтальную линию."
      },
      "customContent": {
        "title": "Кастомизация содержимого",
        "text": "Вы можете кастомизировать контент компонента. Также вы можете установить положение контента, используя свойство `orientation` в значении: `left`, `center` или `right`."
      },
      "inset": {
        "title": "Вставляемый разделитель",
        "text": "Свойство `inset` стилизует разделитель как вставляемые (применяет внутренние отступы)."
      },
      "vertical": {
        "title": "Вертикальный разделитель",
        "text": "Свойство `vertical` устанавливают вертикальную ориентацию разделителя."
      },
      "dashed": {
        "title": "Пунктирный разделитель",
        "text": "Свойство `dashed` стилизует разделитель пунктиром."
      },
      "withList": {
        "title": "Разделитель списков",
        "text": "Разделитель отлично работает с компонентом [va-list](https://vuestic.dev/en/ui-elements/list)[[target=_blank]]."
      }
    }
  },
  "form": {
    "title": "Form",
    "summaryText": "Для ваших полей ввода нужна более продвинутая система валидации, чем просто `type=\"email\"`? В компоненте **`va-form`** имееются инструменты для решения этой задачи.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "У всех элементов имеется свойство `rules`, которое предлагает гибкие решения, когда дело доходит до валидации элементов. Используя это свойство, вы сможете указать точные правила, когда поле является *valid* или *invalid*."
      },
      "advanced": {
        "title": "Триггер валидации",
        "text": "Вы можете запустить проверку из родительского компонента, используя метод `validate()` компонента `va-form`."
      },
      "submit": {
        "title": "Отправка формы",
        "text": "Вы можете вызывать событие `submit` компонента формы: для этого вам нужно установить `tag=\"form\"` компоненту `va-form` и иметь внутри формы кнопку с `type=\"submit\"`."
      }
    }
  },
  "hover": {
    "title": "Hover",
    "summaryText": "Компонент `va-hover` обеспечивает легкий доступ к состояниям наведения для любого компонента. Для работы с состояниями наведения вы можете использовать либо директиву `v-model`, либо свойство `hover` в области видимости слота.",
    "examples": {
      "slot": {
        "title": "Доступ через слот",
        "text": "Вы также можете использовать слот Vue по умолчанию."
      },
      "vModel": {
        "title": "Базовое использование",
        "text": "Вы можете использовать директиву `v-model`, чтобы получить доступ к состоянию."
      },
      "disabled": {
        "title": "Неактивная обертка",
        "text": "Свойство `disabled` отлкючает поведение компонентов."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "Могу ли я обернуть несколько элементов компонентом `va-hover`?",
          "answer": "Да, но у них будет общее значение состояния."
        }
      ]
    }
  },
  "card": {
    "title": "Card",
    "summaryText": "Компонент `va-card` представляет собой многоцелевой репрезентативный компонент, который можно использовать для чего угодно, от ссылок до статей. В нем есть несколько вспомогательных компонентов, облегчающих разметку.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компонент `va-card` реализуется при помощи вспомогательных компонентов `va-card-title`, `va-card-content` и `va-card-actions`."
      },
      "tag": {
        "title": "Тег-обертка",
        "text": "Свойство `tag` обернет компонент в соответствующий тег."
      },
      "borderAndShape": {
        "title": "Контур, тень и форма"
      },
      "disabled": {
        "title": "Неактивная карточка"
      },
      "link": {
        "title": "Карточка-ссылка"
      },
      "stripe": {
        "title": "Полоса"
      },
      "colorAndGradient": {
        "title": "Цвет и градиент"
      },
      "image": {
        "title": "Изображение"
      },
      "actions": {
        "title": "Действия",
        "purpose": "Компонент `VaCardActions` предназначен для применения margins к контенту и выравнивания содержимого (ожидаются` VaButtons`).",
        "props": "Могут быть переданы два свойства: `align` (**string**, определяет выравнивание) и` vertical` (**boolean**, отображать действия одно под другим).",
        "values": "Допустимые значения для `align`: left, center, right, between, around, stretch."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "Могу ли я использовть компонент `va-card` без вспомогательных компонентов?",
          "answer": "Да, если вам не нравится наш пресет, то вы можете сделать свой."
        },
        {
          "question": "Нужно ли мне вручную выставлять тег, если я использую карточку как ссылку?",
          "answer": "Нет, мы сделаем это за вас. Если тег не установлен, но имеется атрибут `href`, тегом компонента будет `<a>`, если используется свойство `router-link`, то компонент будет обернут в `<router-link>`."
        }
      ]
    }
  },
  "sidebar": {
    "title": "Sidebar",
    "summaryText": "Компонет `va-sidebar` - это колонка для хранения навигации или дополнительной информации о вашем приложении.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Базовое использование компонента `va-sidebar`."
      },
      "minimized": {
        "title": "Минимизация",
        "text": "Свойство `minimized` позволяет минимизировать (схлопнуть) боковую панель."
      },
      "hoverable": {
        "title": "Открытие при наведении",
        "text": "Свойство `hoverable` включает открытие бооковой панели при наведени курсора."
      },
      "position": {
        "title": "Позиционирование",
        "text": "Свойство `position` задает позиционирование компонента, доступные опции: `left` (по умолчанию) и `right`."
      },
      "width": {
        "title": "Ширина",
        "text": "Свойство `width` задает ширину боковой панель в раскрытом сотоянии."
      },
      "vModel": {
        "title": "Отображение",
        "text": "Используйте `v-model` для контроля отображения компонента."
      },
      "minimizedWidth": {
        "title": "Ширина в закрытом состоянии",
        "text": "Свойство `minimized-width` задает ширину боковой панель в закрытом состоянии."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента, `text-color` изменяет цвет текста (предопределенные опции цвета или `HEX`)."
      },
      "gradient": {
        "title": "Градиент",
        "text": "Свойство `gradient` задает градиент фону."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "Что делать, если свойства `minimized` и `hoverable` конфликтуют?",
          "answer": "Никаких конфликтов нет, свойство `minimized` имеет более высокий приоритет. Если его значение установлено в `true`, то боковая панель не будет раскрываться при наведении."
        }
      ]
    }
  },
  "sidebarItem": {
    "title": "Sidebar Item",
    "summaryText": "Компонент `va-sidebar-item` используется как ссылка в компоненте `va-sidebar`.",
    "examples": {
      "simple": {
        "title": "Базовое использование",
        "text": "Компонент `va-sidebar-item` используется с компонентом `va-sidebar-content` (для создания отступов) и `va-sidebar-title` (чтобы заполнить всю оставшуюся ширину `va-sidebar-item`)."
      },
      "colors": {
        "title": "Цвет",
        "text": "Свойство `hover-color` используется для изменения цвета при наведении, `text-color` определяет цвет текста, `active-color` задает цвет активного элемента (предопределенные опции цвета или `HEX`)."
      },
      "active": {
        "title": "Выделение активного элемента",
        "text": "Возможно несколько активных элементов. Вы можете выбрать свой способ выделения активного элемента. Даже если вы хотите активировать несколько элементов."
      },
      "icons": {
        "title": "Компоненты `va-sidebar-title` и `va-icon`",
        "text": "`va-sidebar-title` используется для заполнения всего оставшегося свободного места в `va-sidebar-item`. Вы также можете добавить любые другие компоненты (например `va-icon`, `va-chip` или `va-button`)."
      },
      "components": {
        "title": "Продвинутый пример с `va-accordion`",
        "text": "Компонент `va-sidebar-item` может быть использован с компонентами `va-accordion` и `va-сollapse`."
      }
    }
  },
  "image": {
    "title": "Image",
    "summaryText": "Компонент `va-image` используется для отображения адаптивных изображений, в нем есть функции, облегчающие работу с изображениями.",
    "examples": {
      "default": {
        "title": "Базовое использование"
      },
      "contain": {
        "title": "Содержание",
        "text": "Свойство `contain` используется для отображения полного изображения, игнорируя его исходное соотношение сторон и размер."
      },
      "ratio": {
        "title": "Соотношение",
        "text": "Свойство `ratio` изменяет исходное соотношение сторон."
      },
      "defaultSlot": {
        "title": "Слот по умолчанию",
        "text": "Всегда отображается по умолчанию."
      },
      "loaderSlot": {
        "title": "Слот закгрузки",
        "text": "Виден при загрузке изображения."
      },
      "errorSlot": {
        "title": "Слот ошибки",
        "text": "Виден, когда путь `src` неверен."
      }
    }
  },
  "optionList": {
    "title": "Option List",
    "summaryText": "Компонент `va-option-list` component используется для группировки входных данных формы (например чекбоксов) в список для лучшего контроля над данными.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компонент `va-option-list` отобразит список чекбоксов, предоставленных свойством `options`."
      },
      "withRadio": {
        "title": "Радиокнопка",
        "text": "Свойство `type` со значением `radio` включит отображение списка radio кнопок."
      },
      "withSwitch": {
        "title": "Переключатель",
        "text": "Свойство `type` со значением `switch` включит отображение списка переключателей."
      },
      "withComplexData": {
        "title": "Массив объектов",
        "text": "Вместо массива строк вы можете использовать массив объектов и указать, какой ключ используется для каждого параметра."
      }
    }
  },
  "checkbox": {
    "title": "Checkbox",
    "summaryText": "Чекбоксы позволяют пользователю выбрать несколько вариантов из набора опций.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию отлично работает с `v-model`."
      },
      "label": {
        "title": "Название",
        "text": "Свойство `label` добавляет текст в название элемента. Если вы примените свойство `left-label`, то название будет размещено слева от чекбокса."
      },
      "indeterminate": {
        "title": "Неустановленное значение"
      },
      "coloring": {
        "title": "Цвет"
      },
      "array": {
        "title": "Группа (Array)",
        "text": "Просто установить в значение `v-model` одинаковое свойство с типом `array` для группы чекбоксов и добавьте свойство `array-value`."
      },
      "error": {
        "title": "Ошибка",
        "text": "Свойство `error` включает стиль ошибки для чекбокса, свойство `error-messages` добавит сообщение с текстом ошибки."
      }
    }
  },
  "progressBar": {
    "title": "Progress Bar",
    "summaryText": "Компонент `va-progress-bar` используется для отображения индикатора загрузки содержимого приложения. Так же ознакомьтесь с компонентом [va-progress-circle](/ui-elements/progress-circle).",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компонент `va-progress-bar` отображает горизонтальную линию прогресса. Используйте свойство `value` для контороля заполнения индикатора."
      },
      "indeterminate": {
        "title": "Постоянная анимация",
        "text": "Свойство `indeterminate` включает непрерывную анимацию."
      },
      "coloring": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "sizing": {
        "title": "Размер",
        "text": "Свойство `size` изменяет размер индикатора прогресса."
      },
      "slots": {
        "title": "Слоты",
        "text": "Также есть `slot` по умолчанию, если вы хотите отображать дополнительную информацию о прогрессе."
      },
      "buffer": {
        "title": "Буфер",
        "text": "При работе с мультимедийным контентом, таким как потоковое видео, вы можете использовать компонент, чтобы показать индикатор выполнения буферизации на видео."
      }
    }
  },
  "progressCircle": {
    "title": "Progress Circle",
    "summaryText": "Компонент `va-progress-circle` используется для отображения индикатора загрузки содержимого приложения. Так же ознакомьтесь с компонентом [va-progress-bar](/ui-elements/progress-bar).",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компонент `va-progress-circle` отображает горизонтальную линию прогресса. Используйте свойство `value` для контроля заполнения индикатора."
      },
      "indeterminate": {
        "title": "Постоянная анимация",
        "text": "Свойство `indeterminate` включает непрерывную анимацию."
      },
      "coloring": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "sizing": {
        "title": "Размер",
        "text": "Свойство `size` изменяет размер индикатора прогресса."
      },
      "slots": {
        "title": "Слоты",
        "text": "Также есть `slot` по умолчанию, если вы хотите отображать дополнительную информацию о прогрессе."
      },
      "thickness": {
        "title": "Ширина полосы индикатора",
        "text": "Свойство `thickness` задает ширину полосы индикатора."
      }
    }
  },
  "infiniteScroll": {
    "title": "Infinite Scroll",
    "summaryText": "Компонент `va-infinite-scroll` это обертка, которая предназначена для создания списков с динамически добавляемым содержимым. Он предоставляет богатый функционал для настройки поведения прокрутки и многого другого.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Просто оберните ваш контент в компонент `va-infinite-scroll` и передайте коллбэк `load`, и вы увидите, как он вызывается каждый раз, когда прокрутка доходит вниз."
      },
      "reverse": {
        "title": "Изменение области триггера загрузки",
        "text": "Свойство `reverse` позволяет добавлять контент в список. Может быть полезно в окнах мессенджера."
      },
      "disabled": {
        "title": "Недоступная прокрутка",
        "text": "Свойство `disabled` позволяет сделать прокрутку неактивной."
      },
      "customTarget": {
        "title": "Кастомный целевой контейнер прокрутки",
        "text": "Предоставьте элемент DOM или селектор CSS для использования вместо контейнера прокрутки по умолчанию."
      }
    }
  },
  "input": {
    "title": "Input",
    "summaryText": "Компонент `va-input` предназначен для использования вместо стандартного элемента HTMl `input` или `textarea`.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компонент `va-input` не имеет атрибутов, но его можно комбинировать с атрибутами `placeholder` и/или `label`. Его также можно сделать неактивным или доступным только для чтения."
      },
      "hint": {
        "title": "Подсказка",
        "text": "Поддерживаются -одно или -много строчные сообщения, чтобы отобразить подсказку для улучшения UX."
      },
      "validate": {
        "title": "Проверка и состояния (ошибка / успех)",
        "text": "Поддерживает простые проверки используя `rules` свойство. Данное свойство принимает массив колбэков. Во время проверки rules, текущее значение v-model будет передано в колбэк. Данный колбэк должен вернуть true или String - сообщение об ошибке. Также можно вручную передавать `error/success` свойства чтобы контролировать input состояние."
      },
      "slots": {
        "title": "Слоты",
        "text": "Вы можете использовать слоты для передачи пользовательских элементов в поле ввода (`inner` или `outer`), таких, как иконки, кнопки и т.д."
      },
      "textarea": {
        "title": "Textarea",
        "text": "Свойство `type` установленное в значение `textarea` переведет компонент `va-input` в режим HTML элемента `textarea`, полезно для ввода большего количества текста. Вы можете оставить поле ввода авторасширяемым или настроить значение `min-rows` и `max-rows` вручную."
      },
      "mask": {
        "title": "Маска",
        "text": "Свойство `mask` добавляет возможность помочь пользователю ввести определенный формат данных с помощью маски. Вы можете использовать некоторые пресеты масок или пользовательские параметры на основе [cleave.js](https://nosir.github.io/cleave.js/)[[target=_blank]]. По умолчанию возвращается необработанное значение."
      },
      "styles": {
        "title": "Стили",
        "text": "Поддерживаются три свойства для стилизации компонента: `solid` (по умолчанию), `outline`, `bordered`."
      }
    }
  },
  "alert": {
    "title": "Alert",
    "summaryText": "Алерт отображает важное сообщение для привлечения внимания пользователя.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Базовое использование компонента `va-alert`.",
        "prop": "Вы читаете важное сообщение.",
        "slot": "Вы читаете важное сообщение в слоте."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "styles": {
        "title": "Стили компонента",
        "text": "Для компонента `va-alert` доступно 3 стиля: `color`, `outlined` и `border`."
      },
      "border": {
        "title": "Контур (border)",
        "text": "Свойство `border` используется, чтобы добавить полосу, а свойство `border-color`, чтобы изменить её цвет."
      },
      "title": {
        "title": "Заголовок",
        "text": "Свойство `title` позволяет писать текст поверх содержания. Используйте слот `title` для кастомизации заголовка."
      },
      "dense": {
        "title": "Уменьшение отступов",
        "text": "Свойство `dense` уменьшает отступы компонента."
      },
      "icon": {
        "title": "Иконка",
        "text": "Свойство `icon` позволяет добавить иконку перед областью описания. Используйте слот `icon` для кастомизации иконки."
      },
      "closeable": {
        "title": "Закрываемость",
        "text": "Свойство `closeable` позволяет добавить иконку для закрытия компонента. Используйте свойство `close-text`, чтобы заменить иконку на текст."
      },
      "center": {
        "title": "Центрирование",
        "text": "Свойство `center` позволяет центрировать заголовок и описание."
      }
    },
    "misc": {
      "title": "Заголовок",
      "close": "закрыть",
      "slottedTitle": "Заголовок в слоте",
      "dense": "Сжатый компонент.",
      "color": "Алерт с цветом.",
      "outlined": "Алерт с контуром.",
      "border": "Алерт с границами.",
      "primary": "Вы читаете это важное сообщение.",
      "primarySlotted": "Вы читаете это важное сообщение в слоте.",
      "success": "Вы успешно прочитали это важное сообщение.",
      "info": "Это сообщение требует вашего внимания, но оно не особо важное.",
      "warning": "Что-то не то.",
      "danger": "Исправьте некоторые вещи и повторите отправку.",
      "centered": "Вы читаете это важное центрированное сообщение.",
      "toggleVisibility": "Переключить видимость",
      "icon": "Вы читаете это важное сообщение с иконкой.",
      "slottedIcon": "Вы читаете это важное сообщение с иконкой в слоте.",
      "defaultCloseIcon": "Вы читаете это важное сообщение с базовой иконкой закрытия.",
      "customCloseIcon": "Вы читаете это важное сообщение с пользовательской иконкой закрытия.",
      "messageInsteadIcon": "Вы читаете это важное сообщение с текстом вместо иконки закрытия.",
      "slottedTextInsteadIcon": "Вы читаете это важное сообщение с текстом в слоте вместо иконки закрытия."
    }
  },
  "icon": {
    "title": "Icon",
    "summaryText": "Компонент `va-icon` позволяет использовать различные шрифты иконок. По умолчанию Vuestic UI предоставляет иконки [Material Design Icons](https://fonts.google.com/icons)[[target=_blank]].",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Базовое использование компонента `va-icon` с разными шрифтами значков."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "size": {
        "title": "Размер",
        "text": "Свойство `size` задает размер иконкам."
      },
      "rotation": {
        "title": "Поворот и отражение",
        "text": "Свойство `rotation` используется для поворота иконки, свойство `flip` - для зеркального отражения."
      },
      "spin": {
        "title": "Вращение",
        "text": "Свойство `spin` добавляет анимацию вращения иконки."
      },
      "text": {
        "title": "Текста вместо иконки",
        "text": "Свойство `text` используется для отображения иконки как текста."
      },
      "tag": {
        "title": "Произвольный тег",
        "text": "Свойство `tag` позволяет обернуть иконку в произвольный тег."
      }
    }
  },
  "radio": {
    "title": "Radio",
    "summaryText": "Компонент `va-radio` позволяет пользователю выбрать один вариант из набора опций.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Базовое использование компонента `va-radio`."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента."
      },
      "customLabels": {
        "title": "Название",
        "text": "Свойство `label` добавляет текст в название элемента. Если вы примените свойство `left-label`, то название будет размещено слева от чекбокса."
      },
      "disabled": {
        "title": "Недоступная опция",
        "text": "Свойство `disabled` запрещает любые действия с компонентом `va-radio`."
      }
    }
  },
  "collapse": {
    "title": "Collapse",
    "summaryText": "Компонент `va-collapse` переключает видимость контента.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Базовое использование компонента `va-collapse`."
      },
      "solid": {
        "title": "Обводка",
        "text": "Свойство `solid` добавляет обводку компоненту."
      },
      "icon": {
        "title": "Иконка",
        "text": "Свойство `icon` добавляет иконку в заголовок."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      }
    }
  },
  "accordion": {
    "title": "Accordion",
    "summaryText": "Позволяет управлять группой [раскрываемых панелей](ui-elements/collapse).",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Базовое использование компонента `va-accordion`."
      },
      "multiply": {
        "title": "Несколько открытых панелей",
        "text": "Свойство `multiply` позволяет оставить открытыми множество раскрываемых панелей."
      },
      "inset": {
        "title": "Уменьшение активной панели",
        "text": "Свойство `inset` уменьшает активную панель."
      },
      "popout": {
        "title": "Увеличение активной панели",
        "text": "Свойство `popout` увеличивает активную панель."
      }
    }
  },
  "chip": {
    "title": "Chip",
    "summaryText": "Chip - это компактный элемент для отображения данных или выполнения действия.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Базовое использование компонента `va-chip`."
      },
      "outline": {
        "title": "Контур",
        "text": "Свойство `outline` убирает заливку фону, оставляя только контур."
      },
      "flat": {
        "title": "Только текст",
        "text": "Свойство `flat` убирает контур и заливку фишки, оставляя только текст."
      },
      "square": {
        "title": "Квадратные углы",
        "text": "Свойство `square` добавляет фишке квадратные углы."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "size": {
        "title": "Размер",
        "text": "Свойство `size` используется для изменения размера фишки."
      },
      "icon": {
        "title": "Иконка",
        "text": "Свойство `icon` добавляет иконку в фишку."
      },
      "closeable": {
        "title": "Закрываемость",
        "text": "Свойство `closeable` добавляет действие закрытия."
      },
      "link": {
        "title": "Ссылка",
        "text": "Свойство `to` делает фишку кликабельной ссылкой."
      },
      "shadow": {
        "title": "Тень",
        "text": "Вы можете установить тень."
      }
    }
  },
  "grid": {
    "title": "Grid Layout",
    "summaryText": "Мы предоставляем вам вспомогательные классы для [flex](https://developer.mozilla.org/ru/docs/Web/CSS/flex)[[target=_blank]]. Для [css grid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout)[[target=_blank]] встроенных классов не предоставляется. Это не означает, что вам *нужно* использовать `flex`, но он остается мощным инструментом.",
    "examples": {
      "default": {
        "title": "Включение flexbox",
        "example": "Теперь я подвижный"
      },
      "breakpoints": {
        "title": "Breakpoints",
        "text": "Вы можете использовать наши `breakpoints`, чтобы установить длину вашего контейнера.",
        "sizes": {
          "xs": "`.xs` - (< 576px ) - для очень маленьких устройств",
          "sm": "`.sm` - (≥ 576px ) - для маленьких устройств",
          "md": "`.md` - (≥ 768px ) - для средних устройств",
          "lg": "`.lg` - (≥ 992px ) - для больших устройств",
          "xl": "`.xl` - (≥ 1200px) - для очень больших устройств"
        }
      },
      "offsets": {
        "title": "Смещения (offsets)",
        "text": "Вы можете использовать класс `offset`, чтобы установить расстояние между левым и текущим элементами вашего контейнера.",
        "sizes": {
          "xs": "`.offset--xs` - для очень маленьких устройств",
          "sm": "`.offset--sm` - для маленьких устройств",
          "md": "`.offset--md` - для средних устройств",
          "lg": "`.offset--lg` - для больших устройств",
          "xl": "`.offset--xl` - для очень больших устройств"
        },
        "first": "Первый",
        "second": "Второй",
        "last": "Крайний"
      },
      "gutters": {
        "title": "Поля отступа (gutters)",
        "text": "Управление компоновкой `layout` при помощи `gutter`.",
        "sizes": {
          "xs": "`.gutter--xs` - Самый маленький отступ между ячейками",
          "sm": "`.gutter--sm` - Маленький отступ между ячейками",
          "md": "`.gutter--md` - Отступ между ячейками по умолчанию",
          "lg": "`.gutter--lg` - Большой отступ между ячейками",
          "xl": "`.gutter--xl` - Самый большой отступ между ячейками"
        }
      }
    },
    "api": {
      "align": {
        "title": "`align`:",
        "variants": [
          "`.align--start` - край поля элемента помещается на линию начала поперечной оси (cross-start)",
          "`.align--end` - край поля элемента помещается на линию конца поперечной оси (cross-end)",
          "`.align--center` - элементы центрируются по поперечной оси (cross-axis)",
          "`.align--baseline` - элементы выравниваются согласно их базовых линий (baselines)"
        ]
      },
      "alignSelf": {
        "title": "`align-self`:",
        "variants": [
          "`.align-self--start` - край поля элемента помещается на линию начала поперечной оси (cross-start)",
          "`.align-self--end` - край поля элемента помещается на линию конца поперечной оси (cross-end)",
          "`.align-self--center` - элементы центрируются по поперечной оси (cross-axis)",
          "`.align-self--baseline` - элементы выравниваются согласно их базовых линий (baselines)"
        ]
      },
      "alignContent": {
        "title": "`align-content`:",
        "variants": [
          "`.align-content--start` - строки расположены в начале контейнера",
          "`.align-content--end` - строки расположены в конце контейнера",
          "`.align-content--center` - строки расположены по центру контейнера",
          "`.align-content--space-between` - строки равномерно распределены: первая строка находится в начале контейнера, а последняя - в конце",
          "`.align-content--space-around` - строки равномерно распределены с равным пространством между ними"
        ]
      },
      "justify": {
        "title": "`justify`:",
        "variants": [
          "`.justify--start` - элементы расположены в начале контейнера",
          "`.justify--end` - элементы расположены в конце контейнера",
          "`.justify--center` - элементы расположены по центру контейнера",
          "`.justify--space-around` - элементы равномерно распределены по строке с равным пространством вокруг них. Пустое пространство перед первым и после последнего элементов равно половине пространства между двумя соседними элементами",
          "`.justify--space-between` - элементы равномерно распределены: первый элемент находится в начале контейнера, а последний - в конце",
          "`.justify--space-evenly` - элементы распределяются так, что расстояние между любыми двумя соседними элементами, а также перед первым и после последнего, было одинаковым"
        ]
      },
      "justifySelf": {
        "title": "`justify-self`:",
        "variants": [
          "`.justify-self--start` - элементы расположены на одном уровне друг с другом в начале выравнивающего контейнера по соответствующей оси",
          "`.justify-self--end` - элементы расположены на одном уровне друг с другом в конце выравнивающего контейнера по соответствующей оси",
          "`.justify-self--center` - для элементов, которые не являются дочерними по отношению к flex контейнеру, это значение обрабатывается как начало (start)",
          "`.justify-self--baseline` - элементы выравниваются согласно базовых линий (baselines)"
        ]
      }
    }
  },
  "list": {
    "title": "List",
    "summaryText": "Компонент `va-list` используется для отображения информации в виде списка.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компонент `va-list` реализуется при помощи вспомогательных компонентов `va-list-label`, `va-list-separator`, `va-list-item` и т.д."
      },
      "disabled": {
        "title": "Неактивный список",
        "text": "Свойство `disabled` делает список неактивным."
      },
      "clickable": {
        "title": "Элемент-ссылка",
        "text": "Свойство `to` делает элемент списка кликабельной ссылкой."
      },
      "fit": {
        "title": "Заполнение",
        "text": "Свойство `fit` ограничивает ширину списка шириной контента."
      },
      "lines": {
        "title": "Строки",
        "text": "Свойство `lines` позовляет разделить содержимое элемента списка на произвольное количество строк."
      }
    },
    "api": {
      "list": {
        "text": "API for `va-list` component."
      },
      "listLabel": {
        "title": "`va-list-label` API",
        "text": "API для компонета `va-list-label`."
      },
      "listSeparator": {
        "title": "`va-list-separator` API",
        "text": "API для компонета `va-list-separator`."
      },
      "listItem": {
        "title": "`va-list-item` API",
        "text": "API для компонета `va-list-item`."
      },
      "listItemLabel": {
        "title": "`va-list-item-label` API",
        "text": "API для компонета `va-list-item-label`."
      },
      "listItemSection": {
        "title": "`va-list-item-section` API",
        "text": "API для компонета `va-list-item-section`."
      }
    }
  },
  "select": {
    "title": "Select",
    "summaryText": "Компонент `va-select` используется для выбора значения из списка опций. Этот компонент открывает меню с вариантами выбора.",
    "examples": {
      "default": "Базовое использование",
      "variations": {
        "title": "Выбор нескольких значений",
        "text": "Свойство `multiple` включает возможность выбора нескольких значений"
      },
      "decorators": {
        "title": "Декораторы"
      },
      "objectOptions": {
        "title": "Объекты в качестве опций"
      },
      "trackBy": {
        "title": "Выбор опций с одинаковыми значениями",
        "text": "Свойство `track-by` можно использовать, если у вас есть несколько вариантов с одинаковым значением."
      },
      "slots": {
        "title": "Слоты",
        "text": [
          "Поддерживаемые слоты: `content`, `prepend`, `prepend-inner`, `append` и `append-inner`.",
          "Содержимое слота `content` заменяет собой элемент `input` в компоненте."
        ]
      },
      "state": {
        "title": "Состояния",
        "text": "Поддерживаемые состояния: `error`, `success`, `disabled` и `loading`."
      },
      "searchable": {
        "title": "Поиск",
        "text": "Свойство `searchable` включает возможность фильтрации списка опций путем ввода."
      },
      "allowCreate": {
        "title": "Создание отсутствующих опций",
        "text": "Свойство `allowCreate` позволяет добавить опции, которые не содержатся в изначальном наборе опций."
      },
      "validation": {
        "title": "Правила валидации",
        "text": "Компонент `va-select` принимает массив функций, которые принимают входное значение в качестве аргумента и возвращают либо `true/false`, либо строку с сообщением об ошибке."
      },
      "keyboardNavigation": {
        "title": "Навигация клавиатурой",
        "moves": "Используя кнопки со стрелками `вверх` и `вниз` вы можете перемещаться межды опциями.",
        "selects": "Выбор опции возможен по клику `ENTER` и `SPACE`.",
        "hints": "Если вы начнете вводить текст в открытом списке опции, он создаст буфер поиска (будет сброшен, если не печатать в течение 1 секунды), который будет использоваться для поиска в названиях опций."
      },
      "styles": {
        "title": "Стили",
        "text": "Применяются стили, унаследованные от стилей поля ввода."
      }
    }
  },
  "parallax": {
    "title": "Parallax",
    "summaryText": "Компонент `va-parallax`, в котором фоновое изображение перемещается с другой скоростью, чем содержимое переднего плана при прокрутке.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию отображается блок с фоновым изображением. Вам нужно передать свойство `src`."
      },
      "custom": {
        "title": "Настраиваемая высота и скорость",
        "text": "Свойства `height` и `speed` позволят вам настроить высоту параллакса и скорость прокрутки. Внимание, скорость прокрутки зависит от отношения высоты параллакса к высоте изображения."
      },
      "reversed": {
        "title": "Инверсия прокрутки",
        "text": "Свойство `reversed` позволит вам перевернуть прокрутку параллакса."
      },
      "slot": {
        "title": "Слот",
        "text": "Вы можете добавить любой контент поверх параллакса."
      }
    }
  },
  "backtop": {
    "title": "Backtop",
    "summaryText": "Компонент `va-backtop` предоставляет собой кнопку, используемую для возврата к началу контейнера.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компонент `va-backtop` следит за значением `offset-height` тела документа. Вы можете изменить целевой элемент, положение и скорость прокрутки."
      }
    }
  },
  "reset": {
    "title": "Сброс CSS",
    "description": "Мы используем `reset.scss` чтобы сбросить и нормализовать базовые `CSS` стили",
    "features": {
      "title": "Reset возможности",
      "info": "Ниже находится список возможностей, которые предоставляет reset.scss:",
      "list": "* Margin и padding reset. \n * Border reset. \n * Hide quotes. \n * Font reset. \n * Hidden-attribute fix для более новых браузеров. \n * HTML5 display-role reset для более старых браузеров",
      "more": "Полный список всех примененных стилей можно посмотреть здесь [reset.scss](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/styles/global/reset.scss)[[target=_blank]] stylesheet."
    }
  },
  "colorInput": {
    "title": "Color Input",
    "summaryText": "Компонент `va-color-input` позволяет выбрать цвет.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компонент `va-color-input` обменивается значением через `v-model`."
      },
      "disabled": {
        "title": "Недоступное поле ввода",
        "text": "Свойство `disabled` запрещает любые действия с полем ввода"
      }
    }
  },
  "colorPalette": {
    "title": "Color Palette",
    "summaryText": "Компонент `va-color-palette` испоьзуется для выбора цвета из палитры цветов.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компонент `va-color-palette` обменивается значением из списка цветов через `v-model`."
      },
      "indicator": {
        "title": "Индикатор",
        "text": "Вы можете применять к индикатору разные стили, доступны: `dot` и `square`."
      }
    }
  },
  "datePicker": {
    "title": "Date Picker",
    "description": "Компонент выбора даты позволяет пользователю выбирать одну, несколько или диапазон дат, месяцев и лет. Вы можете настроить его так, как хотите. Существует возможность изменить все строки и форматы.\n\nОн основан на собственных датах js, поэтому вы можете использовать Date Picker с любой библиотекой дат, которую хотите.",
    "lookAtDateInput": "Посмотрите также Date Input",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию этот компонент используется с `v-model`."
      },
      "mode": {
        "title": "Режим",
        "text": "Вы можете использовать компонент выбора даты тремя разными способами. По умолчанию для выбора даты используется режим (`mode`) `auto`. Это означает, что режим будет выбран на основе `modelValue`. Есть три режима: `single`, `multiple` и `range`. Для разных режимов требуются разные значения `modelValue`."
      },
      "stateful": {
        "title": "С сохранением состояния",
        "text": "Date picker может иметь состояние. Начальное значение будет `undefined`, но пользователь может его изменить."
      },
      "firstWeekday": {
        "title": "Первый день недели",
        "text": "Если вы хотите всегда использовать `Monday` в качестве первого дня недели, вы можете установить эту опцию в `GlobalConfig`."
      },
      "weekends": {
        "title": "Выходные дни",
        "text": "Вы можете выделить выходные дни с помощью свойства `highlight-weekends`. Кроме того, вы можете установить свои собственные выходные дни с помощью функции `weekends`."
      },
      "otherMonths": {
        "title": "Дни других месяцев",
        "text": "Вы можете показывать дни других (смежных) месяцев, используя свойство `show-other-months`, вместо пустых ячеек в календаре."
      },
      "slots": {
        "title": "Слоты",
        "text": "На данный момент мы не поддерживаем локализацию с использованием свойства. Но у вас есть возможность локализовать компонент самостоятельно, используя слоты."
      },
      "view": {
        "title": "Вид",
        "text": "Вы можете установить конкретный вид для выбора даты. С помощью свойства `view` вы можете определить, как будет отображаться окно выбора даты, а также год и месяц, которые будут отображаться."
      },
      "type": {
        "title": "Тип",
        "text": "Если вы хотите, чтобы пользователь мог выбирать только месяц или год, вы можете сделать это с помощью свойства `type`."
      },
      "disabledDates": {
        "title": "Отключение дат",
        "text": "Вы можете отключить определенные даты, месяцы или годы, используя свойства `allowedDays`, `allowedMonth` или `allowedYear`."
      },
      "colors": {
        "title": "Цвета",
        "text": "Вы можете изменить цвета с помощью переменных `CSS` для более глубокой настройки, но также вы можете просто изменить цвета с помощью этого свойства."
      }
    }
  },
  "dateInput": {
    "title": "Date Input",
    "description": "Компонент Date Input - это комбинация компонентов Date Picker и Input. Вы можете посмотреть варианты использования по следующим ссылкам:",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": ""
      },
      "resetOnClose": {
        "title": "Reset on close",
        "text": "Свойство `resetOnClose` применяется для `mode = range`. Если пользователь выберет неполный диапазон и закроет раскрывающийся список, то будет применено последнее полное значение."
      },
      "isOpen": {
        "title": "Раскрытый",
        "text": "Свойство `IsOpen` позволяет принудительно отображать раскрывающийся список раскрытым."
      },
      "formatting": {
        "title": "Форматирование",
        "text": "Вы можете передать функцию форматирования в `VaDateInput`, которая будет форматировать вводимый текст так, как вы хотите. Таким образом, вы можете использовать любой формат, который хотите. Например, вы можете использовать [date-fns](https://date-fns.org/v2.23.0/docs/format)[[target=_blank]]"
      },
      "inputProps": {
        "title": "Передаваемые свойства",
        "text": "Вы можете передать свойства в `VaDateInput`"
      },
      "validation": {
        "title": "Валидация",
        "text": "Валидация работает подобрным образом как и валидация `VaInput`, только функции должны принимать `Date` вместо `string`."
      }
    }
  },
  "buttonGroup": {
    "title": "Button Group",
    "summaryText": "Это специальный компонент, который обертывает кнопки и применяет к ним специальные стили.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию вам необходимо обернуть ваши кнопки компонентом `va-button-group`."
      },
      "colors": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "gradient": {
        "title": "Градиент",
        "text": "Свойство `gradient` применяет градиент к цвету фона."
      },
      "sizes": {
        "title": "Размер",
        "text": "Свойство `size` задает размер кнопкам."
      },
      "styles": {
        "title": "Разные стили",
        "text": "Вы можете использовать стили компонента [va-button](https://vuestic.dev/ui-elements/button)[[target=_blank]]."
      },
      "icons": {
        "title": "Иконки",
        "text": "Вы можете кастомизировать ваши кнопки используя иконки."
      }
    }
  },
  "buttonToggle": {
    "title": "Button Toggle",
    "summaryText": "Кнопка используется для переключения между различными значениями.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию передается объект с опциями и параметр для `v-model`."
      },
      "colors": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "toggleColor": {
        "title": "Цвет активной кнопки",
        "text": "Свойство `toggle-color` используется для изменения цвета кнопки с выбранным значением."
      },
      "gradient": {
        "title": "Градиент",
        "text": "Свойство `gradient` применяет градиент к цвету фона."
      },
      "sizes": {
        "title": "Размер",
        "text": "Свойство `size` задает размер кнопкам."
      },
      "styles": {
        "title": "Разные стили",
        "text": "Вы можете использовать стили компонента [va-button](https://vuestic.dev/ui-elements/button)[[target=_blank]]."
      },
      "disabled": {
        "title": "Недоступная кнопка",
        "text": "Свойство `disabled` запрещает любые действия с кнопкой."
      }
    }
  },
  "appBar": {
    "title": "App Bar",
    "summaryText": "Компонент `va-app-bar` является частью навигации веб-сайта и является альтернативой элементу заголовка в приложениях.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компоненту `va-app-bar` нужен родительский элемент с относительной позицией."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`). Свойство `gradient` устанавливает градиент к цвету."
      },
      "bottom": {
        "title": "Отображения внизу экрана",
        "text": "Установив свойство `bottom`, вы можете сделать так, чтобы панель приложений располагалась в нижней части экрана."
      },
      "hide": {
        "title": "Скрытие при прокрутке",
        "text": "Свойство `hide-on-scroll` позволяет скрыть панель приложения при прокрутке. Вы должны определить `target`."
      },
      "shadow": {
        "title": "Тень",
        "text": "Вы можете добавить тень панели приложения при прокрутке с помощью `shadow-on-scroll`. Вы должны определить `target`."
      }
    }
  },
  "innerLoading": {
    "title": "Inner Loading",
    "summaryText": "Вы можете управлять состоянием загрузки обернутого компонента с помощью компонента `va-inner-loading`",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию компонент `va-inner-loading` оборачивает другой компонент и отображает спиннер загрузки с помощью свойства `loading`."
      },
      "color": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета иконки (предопределенные опции цвета или `HEX`)."
      },
      "size": {
        "title": "Размер",
        "text": "Свойство `size` изменяет размер иконки."
      },
      "icon": {
        "title": "Иконка",
        "text": "Свойство `icon` задает необходимую вам иконку."
      }
    }
  },
  "installation": {
    "title": "Установка",
    "description": "Начните работу с Vuestic UI, чтобы создавать многофункциональные и удобные приложения благодаря нашей гибко настраиваемой структуре. Мы максимально упростили процесс установки, чтобы сэкономить ваши усилия. Установка возможна несколькими способами.",
    "fonts": {
      "title": "Установка шрифтов",
      "description": "По умолчанию Vuestic UI использует шрифты `Source Sans Pro` и `Material Icons`. Вам необходимо вручную добавить эти шрифты в свой проект. Ниже приведены несколько примеров.",
      "htmlExampleTitle": "Вы можете включить шрифты в заголовок HTML:",
      "cssExampleTitle": "Или вы можете включить шрифты в свой CSS:"
    },
    "quickStart": {
      "title": "Быстрый старт",
      "description": "Убедитесь, что вы импортировали оба стиля и плагин в свой входной файл:"
    },
    "cli": {
      "title": "Установка через Vue CLI",
      "prepare": "Перед установкой убедитесь, что [Vue CLI](https://cli.vuejs.org/guide/installation.html)[[target=_blank]] установлен глобально и имеет версию 4+:",
      "upgrade": "Ознакомьтесь с [руководством](https://cli.vuejs.org/migrating-from-v3/#migrating-from-v3)[[target=_blank]] для Vue CLI версии 3, которое поможет вам обновить приложение.",
      "description": "Простой способ установки Vuestic UI с помощью Vue-CLI. Работает как с vite, так и с webpack.",
      "attention": "Установка Vuestic UI изменит файлы `package.json` и `main.(js`&#124;`ts)`. Убедитесь, что вы закоммитили свой код перед его установкой, чтобы избежать потери данных",
      "codeAnnotation": "Затем установите Vuestic UI как плагин Vue-CLI:"
    },
    "codesandbox": {
      "title": "CodeSandbox",
      "button": "Попробуйте Vuestic-UI на CodeSandbox"
    },
    "manual": {
      "title": "Ручная установка",
      "subtitle": "Если вы решили установить Vuestic UI вручную, все, что вам нужно сделать, это установить пакет NPM, пару других необходимых ресурсов (таких как шрифты и стили CSS) и немного изменить точку входа вашего приложения (скорее всего, `index.js` или `main.js`, в зависимости от ваших настроек).",
      "prerequisites": "Во-первых, убедитесь, что у вас установлены все необходимые зависимости:",
      "node": "[Node.js](https://nodejs.org/en/)[[target=_blank]] ( >=14.*)",
      "npm": "[npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)[[target=_blank]] версия 3+ (или [yarn](https://yarnpkg.com/lang/en/docs/install)[[target=_blank]] версия 1.16+) и [Git](https://git-scm.com/)[[target=_blank]]",
      "afterCheck": "После проверки предварительных требований установите Vuestic UI через `npm/yarn`:"
    },
    "treeShaking": {
      "title": "Tree shaking",
      "description": "Если вы планируете использовать только несколько компонентов в своем приложении и, таким образом, хотите уменьшить размер вашего пакета, вы можете использовать сборку Vuestic ESM. Webpack (vue-cli) и Vite делают это автоматически.",
      "example": {
        "title": "Во-первых, вам не нужно использовать `VuesticPlugin`, поскольку он регистрирует все компоненты `vuestic` глобально. Вместо этого вы можете импортировать определенные компоненты из пакета `vuestic-ui`.",
        "footer": "Как вариант, вы можете импортировать их прямо в ваши файлы `.vue`."
      },
      "plugins": {
        "title": "В таком случае вам также придется самостоятельно зарегистрировать плагины `Vuestic`. Рекомендуем использовать все из них:",
        "GlobalConfigPlugin": "`GlobalConfigPlugin` - используется для переназначения компонента `VaConfig` и глобальных свойств. [Подробнее](/services/global-config).",
        "ToastInstall": "`ToastInstall` - используется компонентом `VaToast`.",
        "ColorHelpersPlugin": "`ColorHelpersPlugin` - используется для создания реактивных переменных `CSS`. Требуется `GlobalConfigPlugin`. [Подробнее](/services/colors-config).",
        "DropdownPopperSubplugin": "`DropdownPopperSubplugin` - используется компонентом `VaDropdown`.",
        "example": {
          "title": "Все эти плагины также доступны через `VuesticPluginsWithoutComponents`:"
        }
      },
      "attention": {
        "cssLoader": "Поскольку код всех компонентов разделен, вам может потребоваться загрузчик `CSS` для загрузки стилей для конкретных компонентов.\nНо, вероятно, он у вас уже есть."
      }
    }
  },
  "roadmap": {
    "title": "План развития Vuestic UI",
    "description": "Наша команда постоянно улучшает существующую кодовую базу и добавляет новые функции, которые помогают еще больше упростить создание приложений.",
    "inDevelopment": {
      "title": "В разработке",
      "description": "В настоящее время разрабатываются следующие релизы:"
    },
    "1-4": {
      "title": "[v1.4](https://github.com/epicmaxco/vuestic-ui/milestone/7)",
      "description": "* Carousel компонент. \n * Stepper компонент. \n * Nuxt поддержка."
    },
    "1-3": {
      "title": "[v1.3](https://github.com/epicmaxco/vuestic-ui/releases/tag/v1.3.0)",
      "description": "* CSS таблица. \n * Data Table компонент. \n * Data Table тема для [AG grid](https://www.ag-grid.com/)[[target=_blank]]."
    },
    "1-2": {
      "title": "[v1.2](https://github.com/epicmaxco/vuestic-ui/releases/tag/v1.2.1)",
      "description": "* Date Input компонент. \n * Date Picker компонент. \n * Tree shaking (позволяет импортировать только необходимые компоненты, снижая размер пакета)."
    },
    "1-1": {
      "title": "[v1.1](https://github.com/epicmaxco/vuestic-ui/releases/tag/v1.1.0)",
      "description": "* Поддержка SSR (vite). \n * Удалена оболочка medium-editor. \n * Русский перевод. \n * Уменьшен размер пакета (482КБ)."
    },
    "1-0": {
      "title": "[v1.0](https://github.com/epicmaxco/vuestic-ui/tree/v1.0.0)",
      "description": "Начало работы над vuestic-ui. \n * Переработаны и добавлены несколько компонентов. \n * Добавлена соответствующая документация."
    },
    "0-1": {
      "title": "[v0.1](https://github.com/epicmaxco/vuestic-ui/tree/1.0.0-alpha.0)",
      "description": "Даже не альфа, мы просто выделили компоненты из [vuestic-admin](https://github.com/epicmaxco/vuestic-admin)[[target=_blank]] в отдельный репозиторий, чтобы упростить обновления."
    },
    "released": {
      "title": "Выпущено",
      "description": " Уже выпущенные версии:"
    },
    "longTimeSupport": {
      "title": "Долгосрочная поддержка (LTS)",
      "description": "Следующие версии продолжают поддерживаться на предмет исправлений обратной совместимости, серьезных ошибок и уязвимостей системы безопасности"
    },
    "archive": {
      "title": "Архив",
      "description": "Следующие выпуски являются старыми и не поддерживаются minor и major версиями:"
    }
  },
  "accessibilityGuide": {
    "title": "Навигация",
    "description": "Компоненты Vuestic UI поддерживают взаимодействие с клавиатурой для всех действий с помощью мыши и использование семантические элементов HTML5, где это применимо.",
    "keyboardInteractions": {
      "title": "Навигация с клавиатуры",
      "description": "Все интерактивные элементы вашей страницы, например текстовые поля, кнопки и т. д. могут быть доступны с клавиатуры. Это означает, что вы сможете установить на них фокус, используя клавиши `Tab` и `Shift+Tab`."
    }
  },
  "configurationGuide": {
    "title": "Конфигурация",
    "description": "Мы разработали удобный механизм, который позволяет делать глубокую настройку иконок, компонентов и цветов.",
    "readMore": "Подробнее",
    "colors": {
      "title": "Цветовые темы",
      "description": "Vuestic UI поставляется с набором цветов, которые можно легко расширить:",
      "defaultColors": "Базовые цвета",
      "customColors": "Пользовательские цвета"
    },
    "icons": {
      "title": "Иконочные шрифты",
      "description": "По умолчанию в Vuestic UI используется шрифт `material icons`, поэтому вам следует установить его заранее:",
      "subtitle": "Использование кастомных иконок",
      "subDescription": "С помощью конфигурации иконок вы можете использовать любой иконочный шрифт, который вам нужен, просто преобразовывая имя иконки в нужные свойства:"
    },
    "components": {
      "title": "Конфигурация компонентов",
      "intro": "Если вы хотите установить глобальные настройки по умолчанию для компонентов Vuestic, то у нас есть для этого конфигурация!",
      "description": "Допустим, вам нужно, чтобы все ваши кнопки были `outline` и `small` в соответствии с дизайном, но по умолчанию это не так:",
      "action": "Чтобы решить эту проблему - добавьте в свой `main.js`:",
      "result": "Теперь ваши кнопки будут выглядеть так:",
      "example": "Аналогичным образом вы можете глобально настроить любые свойства для компонентов Vuestic UI.",
      "more": "Если вам нужна более глубокая кастомизация, то вы можете переопределить [переменные css](/styles/css-variables#overriding) или свойства класса напрямую (в компонентах используется БЭМ, так что селекторы легко угадать)."
    }
  },
  "browserSupport": {
    "title": "Поддрежка браузеров",
    "description": "Мы разрабатываем Vuestic UI с расчетом на будущее. Вот почему мы поддерживаем современные браузеры, но извините, пришлось отказаться от некоторых старых браузеров, таких как IE. На это решение повлияло [прекращение его поддержки во Vue 3](https://github.com/vuejs/rfcs/discussions/296)[[target=_blank]] и [падение рейтинга использования](https://caniuse.com/usage-table)[[target=_blank]].",
    "table": {
      "browser": "Браузер",
      "supported": "Поддержка"
    }
  },
  "overview": {
    "title": "Что такое Vuestic UI",
    "description": "Мы разработали фреймворк таким образом, чтобы он удовлетворял самые изощренные дизайнерские фантазии и позволял вам их воплощать.",
    "featuresOverview": "Обзор возможностей",
    "vueThreeCompatible": "Полная **совместимость с Vue.js 3**",
    "featureRich": "Содержит более **50+ компонентов** с богатым набором функций, которые можно использовать в любом дизайнерском решении",
    "configurable": "Позволяет **настраивать компоненты** глобально через конфигурации и переменные css",
    "responsive": "Полностью **адаптивный** и **поддерживает современные браузеры** (но не IE11, извините)",
    "translatable": "Легко интегрируется с **i18n**"
  },
  "translation": {
    "title": "Перевод",
    "description": "Перевод нужен только для документации (`packages/docs/locales`) поскольку компоненты в настоящий момент не используют перевод. Закончив работу над переводом, не забудьте изменить его статус на `full` в файле `locales/index.ts`. Вот текущее состояние поддержки языков:",
    "table": {
      "language": "Язык",
      "code": "Код",
      "supported": "Статус поддержки"
    },
    "language": {
      "en": "Английский",
      "ru": "Русский",
      "es": "Испанский"
    },
    "status": {
      "part": "Частичная",
      "full": "Полная"
    },
    "sync": {
      "title": "Синхронизация файлов локалей",
      "description": "Вы можете синхронизировать файлы локалей следующей командой (исходный файл `en.json`):"
    },
    "unused": {
      "title": "Поиск неиспользуемых переводов",
      "description": "Вы можете найти неиспользуемые переводы при помощи следующей команды:"
    },
    "missed": {
      "title": "Поиск пропущенных переводов",
      "description": "Вы можете найти пропущенные переводы при помощи следующей команды:"
    },
    "code": {
      "title": "Переводы внутри блоков кода",
      "description": "Важно видеть уже переведенный текств вместо функции vue-i18n внутри блока кода, поэтому мы создали несколько хелперов, которые позволяют нам переводить текст внутри блоков кода также, как мы переводим их внутри vue шаблонов.",
      "basicTitle": "Базовый синтаксис",
      "basicText": "Просто разместите функцию vue-i18n в коде и хелпер вернет переведенный текст, обернув его в ковычки.",
      "mustacheTitle": "Усатый синтаксис",
      "mustacheText": "Оберните функцию vue-i18 в двойные фигурные скобки и хелпер вернет переведенный текст.",
      "misc": {
        "scheme": "Схема",
        "schemeText": "путь.к.переводу",
        "output": "Результат",
        "outputText": "переведенный текст"
      }
    }
  },
  "table": {
    "title": "Таблицы",
    "summaryText": "Вы можете использовать класс `va-table` для настройки стилей ваших таблиц.",
    "otherTables": {
      "text": "Если вам нужны более функциональные рещения, вы можете использовать наш компонент таблицы или нашу тему для AG-Grid:",
      "dataTable": "Data Table",
      "agGrid": "Тема для AG Grid"
    },
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Просто добавьте `va-table` к элементу `table`."
      },
      "hoverable": {
        "title": "Кастомизация :hover",
        "text": "Вы можете добавить больше интерактивности к строкам таблицы с помощью дополнительного класса `va-table--hoverable`."
      },
      "striped": {
        "title": "Выделение полосой",
        "text": "Класс `va-table--striped` позволяет выделить цветом каждую вторую строку в таблице."
      },
      "clickable": {
        "title": "Кликабельность",
        "text": "Чтобы строки при наведении выглядели как свойство `pointer`, добавьте класс `va-table-clickable`."
      }
    }
  },
  "guide": {
    "title": "Руководство для контрибьюторов",
    "description": "В этом руководстве описаны способы, с помощью которых вы можете стать частью непрерывного развития пользовательского интерфейса Vuestic. Мы очень рады, что вы хотите внести свой вклад в Vuestic UI.",
    "pullRequests": {
      "title": "Рекомендации по внесению изменений (Pull Request)",
      "description": {
        "localBranches": "Ветка `master` хранит последнюю стабильную версию + избранные (cherry-picked) хотфиксы. Вся разработка должна вестись в локальных ветках (fork проекта).",
        "dontSubmitToMaster": "**Не отправляйте ваши PR в ветку master.**",
        "checkoutFeat": "Сделайте checkout ветки `feat/` из ветки `develop`, затем создайте pull request в `develop`.",
        "multipleSmallCommits": "Совершенно нормально иметь несколько небольших коммитов, когда вы работаете над вашим PR - мы позволим GitHub сделать автоматический squash изменений перед слиянием.",
        "fixBugSteps": "В случае исправления бага:\n  * Если вы решаете особую проблему, добавьте `close #xxxx[,#xxx]` (#xxxx - id проблемы) в описание PR так что github [закроет](https://docs.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword)[[target=_blank]] проблему, как только изменения сольются в `master`.\n  * Предоставьте подробное описание ошибки в PR, если это не было сделано в вопросе (issue)."
      }
    },
    "branches": {
      "title": "Ветки",
      "publicBranches": "Публичные ветки (**epicmax/vuestic-ui**):\n  * `master` - только релизы и хотфиксы. Не выставляйте ваш PR в `master`!.\n  * `develop` - основная ветка разработки.",
      "localBranches": "Локальные ветки\n  * Для локальных веток добавьте префикс `feat/`, например для фикса комнонета `va-tabs` будет `feat/fix-tabs`. Это сделано для того, чтобы локальные ветки были визуально отделены от публичных."
    },
    "fileNaming": {
      "title": "Именование файлов",
      "camelCase": "`testIsContextableComponent.ts` - helpers and instants",
      "kebabCase": "`api-options.ts` - конфигурации",
      "pascalCase": "`DocsCode.vue` - компоненты, классы, типы"
    },
    "forCoreContributors": {
      "title": "Для core-контрибьюторов",
      "linkPr": "Всегда связывайте PR с проблемой (например `close #123`).",
      "assignYourself": "Когда вы приступите к работе над задачей - назначьте её на себя. Это необходимо для предотвращения конфликтов.",
      "smallIssues": "Для небольших изменений вы можете пушить в ветку `develop` напрямую при добавлении (`close #123`) в сообщение коммита.",
      "singlePrPerIssue": "Создавайте один PR для одной проблемы. Если у нас несколько PR - переместите весь код в один, а остальные закройте. Если один PR охватывает несколько вопросов - либо разделите его на несколько PR, либо отметьте одну из проблем как повторяющуюся.",
      "onePersonPerIssue": "Убедитесь, что на каждую проблему назначен только один человек.",
      "checkYourCode": "Проверьте свой код: [соглашения](https://github.com/epicmaxco/vuestic-ui/blob/master/packages/docs/conventions.md)[[target=_blank]].",
      "weUseYarn": "Мы используем [yarn](https://yarnpkg.com/lang/en/)[[target=_blank]] для управления пакетами.",
      "beProactive": "Будьте инициативными. Если вы считаете, что что-то не так - создайте вопрос (issue) или обсужденеи (discuss).",
      "recommendedTools": "Рекомендуемые инструменты: [GitKraken](https://www.gitkraken.com/)[[target=_blank]], [WebStorm](https://www.jetbrains.com/webstorm/)[[target=_blank]], [ShareX](https://getsharex.com/)[[target=_blank]].",
      "workInBook": "Если вы работаете над UI компонентами - работайте в book environment (`yarn serve:book`). Мы хотим исключить глобальные материалы из компонентов."
    },
    "componentFolderStructure": {
      "title": "Структура папки компонента"
    },
    "beforeReleaseWorkflow": {
      "title": "Действия перед релизом",
      "description": "Обновите версии пакетов до новейших. Обновите lock файлы (для обоих `npm` и `yarn`)\n"
    },
    "npmScripts": {
      "title": "Часто используемые сценарии NPM:"
    },
    "credits": {
      "title": "Credits",
      "description": "[Зал славы!](https://github.com/epicmaxco/vuestic-ui/graphs/contributors)[[target=_blank]]"
    }
  },
  "globalConfig": {
    "title": "Глобальная конфигурация",
    "subtitle": "С помощью глобальной конфигурации мы можем настроить цвета, иконки и любое свойство для любого компонента.",
    "structure": "Глобальная конфигурация состоит из `icons`, `colors`, `components` и `componentsAll` конфигураций.",
    "setupExampleTitle": "Мы можем предоставить нашу настраиваемую конфигурацию с помощью VuesticPlugin, если мы хотим:",
    "reactiveUpdateExampleTitle": "Или мы можем обновить нашу конфигурацию во время выполнения:",
    "reactiveSetExampleTitle": "Или мы можем установить новую конфигурацию во время выполнения:",
    "links": {
      "readMore": "Подробнее",
      "icons": "Конфигурация иконок",
      "components": "Конфигурация компонентов",
      "colors": "Конфигурация цветов"
    },
    "useInRuntime": "Использовать глобальную конфигурацию как реактивный Proxy:",
    "api": {
      "icons": "Используется для настройки шрифтов и псевдонимов иконок.",
      "components": "Используется для глобальной перезаписи свойств определенных компонентов.",
      "componentsAll": "Используется для глобальной установки свойств всех компонентов сразу. Применяется если значение свойства больше нигде не установлено.",
      "colors": "Используется для определения цветов темы, которые будут использовать компоненты. Здесь мы можем переопределить цвет темы vuestic по умолчанию."
    }
  },
  "iconsConfig": {
    "title": "Конфигурация иконок",
    "about": "По умолчанию в Vuestic UI используется `Material Design Icons`. Если вы хотите использовать другие библиотеки шрифтов, вы можете настроить VaIcon для их использования.",
    "readBeforeStart": "Подробнее про компонент иконок VaIcon",
    "problem": {
      "definition": "Есть проблема с библиотеками иконок: они обычно используют разные интерфейсы для отображения иконок.",
      "materialIcons": "Например, material-icons требует, чтобы мы установили класс `material-icons` и подставили имя значка внутри тега `span`.",
      "fontAwesome": "Если мы хотим использовать `FontAwesome5`, нам нужно подставить класс `fas`, а затем подставить класс с именем значка и префиксом `fa-` в теге `i`.",
      "summary": "С помощью конфигурации иконок мы можем просто указать имя значка в желаемом стиле. Нам нужно настроить, как указанное имя будет обрабатываться только один раз."
    },
    "fonts": {
      "title": "Шрифты",
      "about": "Мы хотим использовать шаблон `<va-icon name='icon-name' />`. Мы можем настроить конфигурацию для определенного шаблона имени иконки.  В этой конфигурации мы можем поставить класс иконки, контент (innerHTML) или компонент Vue относительно имени иконки.",
      "fontNamePattern": {
        "title": "Шаблон названия шрифта",
        "about": "Шаблон имени шрифта похож на динамические маршруты vue. Мы можем использовать динамические сегменты для динамической генерации класса иконки, контента или свойства. Динамические сегменты следует записывать в фигурные скобки."
      },
      "example": {
        "title": "Пример конфигурации шрифтов",
        "about": "Давайте посмотрим на несколько примеров:",
        "explain": "Ниже мы видим, как преобразится иконка:"
      },
      "readMore": "Подробнее про",
      "advancedFontsUsage": "расширенное использование шрифтов"
    },
    "aliases": {
      "title": "Псевдонимы (Aliases)",
      "about": "Чтобы упростить код, мы можем использовать псевдонимы. Псевдоним имеет свойство `to`, которое изменит имя текущего значка на строку `to`, а затем будет искать соответствующую конфигурацию шрифта. Все свойства найденного шрифта будут применены к текущему значку, если они не были определены в конфигурации псевдонима.",
      "example": {
        "title": "Пример конфигурации псевдонимов",
        "about": "Ниже мы видим, как трансформируется иконка:",
        "explain": "Как видите, конфигурация псевдонима более значимая, чем конфигурация шрифта. И свойства `va-icon` более значимые, чем конфигурация псевдонима и шрифта."
      }
    },
    "setup": {
      "title": "Давайте создадим наш конфиг",
      "about": "Нам нужно обновить конфигурацию иконок в нашей глобальной конфигурации. Конфигурация иконок - это плоский массив со шрифтом и псевдонимами Vuestic по умолчанию. Мы можем использовать хелпер `createIconsConfig()` для создания новой конфигурации со значениями по умолчанию Veustic и нашими пользовательскими шрифтами и псевдонимами. Например:"
    },
    "api": {
      "title": "API конфигурации иконок",
      "name": "Строка или регулярное выражение. Может быть строкой с динамическим сегментом или регулярным выражением, чтобы использовать эту конфигурацию в качестве шрифта.",
      "iconClass": "Класс, который будет применен к иконке. Может быть строкой или функцией, которая принимает значение динамического сегмента и возвращает строку.",
      "content": "Контент, который будет внутри иконки. Может быть строкой или функцией, которая принимает значение динамического сегмента и возвращает строку.",
      "component": "VueComponent, который будет использоваться вместо тега.",
      "componentProps": "Свойства, которые будут привязаны к `component`. Может быть объектом или функцией, которая принимает значение динамического сегмента и возвращает объект.",
      "to": "Здесь вы можете указать имя конфигурации, значения которой будут объединены в эту конфигурацию.",
      "tag": "Тег, который будет использоваться. По умолчанию - `i`.",
      "color": "Цвет, который будет установлен как цвет css стиля",
      "rotation": "Поворачивает иконку под определенным углом.",
      "spin": "Применяет анимацию вращения к иконке."
    }
  },
  "componentsConfig": {
    "title": "Конфигурация компонентов",
    "subtitle": "С помощью конфигурации компонента мы можем переопределить свойства по умолчанию для любого компонента vuestic, который мы хотим. Конфигурация компонентов - это объект, ключ которого - имя компонента, а значение - свойства компонента, который мы хотим перезаписать. Например:",
    "demoTitle": "В примере ниже мы можем изменить глобальный стиль всех кнопок на всем сайте документации Vuestic. Не стесняйтесь перейти на страницу документации `Button` и посмотреть, как это выглядит.",
    "resetConfig": "Сбросить конфигурацию",
    "componentAll": {
      "title": "Конфигурация всех компонентов",
      "subtitle": "Вы можете использовать `componentsAll` свойство глобальной конфигурации чтобы установить свойства всех компонентов сразу. Будет применяться если значение свойства больше нигде не установлено. Например:",
      "description": "Эти значения будут использоваться как значения по умолчанию если они больше нигде не заданы (внутри самого компонента или его конфигурации)."
    },
    "vaConfig": {
      "title": "Scoped конфигурация",
      "subtitle": "Мы можем использовать VaConfig для переопределения свойств компонентов внутри `<va-config></va-config>`. Конфигурация компонентов для всех компонентов внутри тега `va-config` будет перезаписана на значение свойства `components`. Давайте посмотрим на демонстрацию ниже:",
      "explain": "Посмотрите на код. В этой демонстрации мы изменили цвет по умолчанию для всех наших компонентов `VaButton` и `VaIcons`. Также мы передаем свойство третьей кнопке, значение которой имеет более высокий приоритет, чем в scoped конфигурации."
    },
    "defaultSizes": {
      "title": "Размер по умолчанию",
      "description": "Для переопределения размеров компонента по умолчанию можно использовать sizesConfig свойство. Пример использования можно увидеть ниже:"
    },
    "api": {
      "title": "API конфигурации компонентов",
      "types": "Типы",
      "ComponentConfig": "Объект, где ключ - это имя компонента Vuestic, а значение - свойства компонента",
      "ComponentsAllConfig": "Объект, где ключ - это любое имя свойства компонента, а значение - значение этого свойства. Применяется если значение свойства больше нигде не установлено."
    }
  },
  "colorsConfig": {
    "title": "Конфигурация цветов",
    "about": "Вы можете персонализировать цвета, которые используются в нашем приложении. Вы можете динамически переопределять цвета, которые используются в компонентах Vuestic. Кроме того, вы можете добавить свои собственные цвета, которые мы хотим использовать в вашем приложении.",
    "example": {
      "about": "Например, мы можем изменить цвет `primary`, который используется почти во всех компонентах Vuestic.",
      "demo": "Вы можете ознакомиться с демонстрацией ниже и увидеть, как меняются цвета по всей странице."
    },
    "reactivity": {
      "subtitle": "Реактивность",
      "about": "Как видите, такие методы, как `getColor`, `getColors`, не возвращают `Proxy`. Если вы хотите использовать цвет в качестве реактивного `Proxy`, используйте вычисляемые свойства, как в примере выше."
    },
    "otherServices": {
      "subtitle": "Конфигурация цветов с другими конфигурациями",
      "components": "Вы можете использовать свой цвет в конфигурации компонентов:",
      "icons": "Также в конфигурации иконок вы можете использовать собственный цвет в качестве цвета иконки:",
      "css": "Также переменные CSS имеют те же цветовые переменные, которые вы определяете в конфигурации цвета, которые динамически меняются вместе с конфигурацией цветов:"
    },
    "api": {
      "title": "API конфигурации иконок",
      "types": "Типы",
      "ColorConfig": "Объект, где ключ - это имя цвета, а значение - валидный цвет CSS",
      "ColorInput": " Валидный цвет CSS",
      "methods": "Методы",
      "useColor": "Возвращает методы для работы с цветом",
      "setColors": "Используется для объединения новых цветов в конфигурацию или обновления существующих цветов",
      "getColors": "Возвращает текущую конфигурацию цветов",
      "getColor": "Возвращает цвет по имени",
      "getBoxShadowColor": "Возвращает цвет, который вы можете использовать как цвет для `box-shadow`",
      "getHoverColor": "Возвращает цвет, который вы можете использовать как цвет для `hover`",
      "getFocusColor": "Возвращает цвет, который вы можете использовать как цвет для `focus`",
      "getGradientBackground": "Возвращает цвет, который вы можете использовать как цвет для css атрибута `background`",
      "hookMethods": "useColors хуки"
    }
  },
  "cssVariables": {
    "title": "Переменные CSS",
    "description": "Vuestic UI выделяет `CSS` как [переменные CSS (пользовательские свойства)](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties)[[target=_blank]]. Нет необходимости устанавливать какие-либо загрузчики или дополнительные пакеты для переопределения стилей компонентов. Вы можете глубоко настраивать компоненты, используя простой синтаксис для изменения CSS в вашем проекте.",
    "convention": {
      "title": "Соглашения",
      "description": "В Vuestic UI применяются следующие соглашения для организации переменных CSS для более удобного использования:",
      "scheme": "Схема",
      "example": "Пример",
      "unnecessary": "необязательная часть, нужная для определенных случаев.",
      "componentScheme": "Схема стилей компонента - для стилей на уровне компонента",
      "componentName": "имя компонента, начинающееся с префикса `va-`.",
      "state": "состояние элементов или их пресеты.",
      "nestedElement": "некоторый элемент, встроенный в корневой компонент.",
      "groupOfElements": "группа или тип HTML элементов.",
      "size": "размер указанного элемента.",
      "property": "общее CSS свойство.",
      "generalScheme": "Схема основных стилей - для стилей на уровне компонента"
    },
    "overriding": {
      "title": "Переопределение",
      "description": "Вам не нужны какие-либо специальные знания или пакеты. Просто создайте файл наподобие `overrides.css`, импортируйте его в свой файл main.js (ts) и начните переопределение так же просто, как написание переменных CSS:"
    }
  },
  "navbar": {
    "title": "Navbar",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Вы можете использовать `left`, `center` и `right` слоты для передачи элементов на панель навигации."
      },
      "colors": {
        "title": "Цвет",
        "text": "По умолчанию используется цвет `secondary`. Вы можете использовать свойство `color`, чтобы изменить цвет фона компонента. Цвет текста компонента зависит от цвета фона, но вы можете изменить его вручную, используя свойство `text-color`."
      },
      "shape": {
        "title": "Shape",
        "text": "Свойство `shape` добавляет фигуру на фон панели навигации. Цвет формы будет автоматически взят из свойства `color`."
      }
    }
  },
  "buttonDropdown": {
    "title": "Button Dropdown",
    "summaryText": "Кнопка, при нажатии на которую отображается раскрывающееся содержимое.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "По умолчанию, обернет ваш контент в компонент `va-button-dropdown`."
      },
      "split": {
        "title": "Разделение",
        "text": "Свойство `split` разделяет элемент на 2 отдельные кнопки."
      },
      "colors": {
        "title": "Цвет",
        "text": "Свойство `color` используется для изменения цвета компонента (предопределенные опции цвета или `HEX`)."
      },
      "sizes": {
        "title": "Размер",
        "text": "Свойство `size` задает размер кнопке."
      },
      "styles": {
        "title": "Стили",
        "text": "Применяются те же стили, что и для компонента [va-button](https://vuestic.dev/ui-elements/button)[[target=_blank]]."
      },
      "disabled": {
        "title": "Недоступная кнопка",
        "text": "Свойство `disabled` применяет стиль неактивной кнопки и отменяет любый действия с ней."
      },
      "icons": {
        "title": "Иконки",
        "text": "Свойства `icon`, `left-icon` и `opened-icon` применяют иконки к кнопке."
      },
      "events": {
        "title": "События",
        "text": "Компонент `va-dropdown-button` может обрабатывать события клика."
      },
      "clickInside": {
        "title": "Внутренний клик (контент)",
        "text": "Свойство `close-on-content-click` позволяет настроить закрытие или отменить его по клику на контент."
      }
    }
  },
  "popover": {
    "title": "Popover",
    "summaryText": "Компонент `va-popover` может использоваться для отображения текста поверх компонента.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Оберните компонент тегом `va-popover` и укажите свойство `message`."
      },
      "color": {
        "title": "Цвет",
        "text": "Вы можете установить компоненту разные цвета фона."
      },
      "placement": {
        "title": "Размещение",
        "text": "Компонент можно установить в разные позиции. Используйте свойство `position`, чтобы установить его: доступны `top`, `left`, `right` и `bottom`."
      },
      "icon": {
        "title": "Иконка",
        "text": "Вы можете установить компоненту иконку."
      },
      "title": {
        "title": "Заголовок",
        "text": "Вы можете установить заголовок для всплывающего окна."
      },
      "trigger": {
        "title": "Триггер",
        "text": "События, запускающие всплывающее окно, разделенные пробелами: `hover`, `click` или `focus`."
      }
    }
  },
  "typography": {
    "title": "Типографика",
    "description": "В Vuestic UI применяются следующие стили типографики.",
    "headings": "Заголовки",
    "titled": "Title заголовка",
    "textStyles": "Стили текста",
    "codeSnippet": "Фрагмент кода",
    "textCode": "Код в тексте",
    "other": "Другие типографические стили",
    "orderedList": "Нумерованный список",
    "unorderedList": "Ненумерованный список",
    "links": "Ссылки",
    "textHighlighted": "Выделенный текст",
    "blockquote": "Цитата",
    "textBlock": "Текстовый блок"
  },
  "ag-grid": {
    "title": "Тема для AG Grid",
    "description": "Если нужна более гибкая настройка отображения таблиц, то мы рекомендуем воспользоваться библиотекой [AG Grid](https://www.ag-grid.com/vue-data-grid/getting-started)[[target=_blank]]. Vuestic UI предостовляет готовую тему стилей для этой библиотеки.",
    "otherTables": {
      "text": "Также мы предоставляем стили для HTML таблицы и наш собственный компонент таблицы:",
      "htmlTable": "HTML таблица",
      "dataTable": "Data Table"
    },
    "installation": "Установка AG Grid",
    "dependencies": "Для того чтобы начать пользоваться AG Grid, установите зависимости в свой проект.",
    "importStyles": "Затем сделайте импорт стилей, которые задают каркас таблиц и примените тему `ag-theme-vuestic` на компоненте таблицы.",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Чтобы корректно отобразить таблицу с нужными стилями, следует указать размеры таблицы (`width`и`height`), набор данных (`rowData`) и определения столбцов (` columnDefs`) на основе этих данных."
      },
      "styles": {
        "title": "Стили",
        "text": "Тема поддерживает использование классов `ag-theme-vuestic--striped` для выделения строк через одну и `ag-theme-vuestic--hoverable` для выделения строки при наведении."
      },
      "filter": {
        "title": "Фильтры и сортировка",
        "text": "Есть возможность передать определенные настройки в конфигурацию столбцов для включения фильтров и сортировки."
      },
      "pinning": {
        "title": "Закрепление строк",
        "text": "Чтобы закрепить строки вверху или внизу, просто передайте массив объектов строк в свойства `pinnedTopRowData` и `pinnedBottomRowData`."
      },
      "pagination": {
        "title": "Пагинация",
        "text": "Вы можете включить пагинацию передав определенные свойства."
      },
      "editable": {
        "title": "Редактирование ячеек",
        "text": "Укажите свойство `editable` при определении столбцов, а затем стелайте двойной клик по выбранной ячейке или нажмите клавишу Enter для входа в режим редактирования."
      }
    },
    "attention": "Vuestic-UI предоставляет стили для AG-Grid Community и не вносит никаких изменений в функционал. Для большего количества примеров использования и для информации об отличиях между Community и Enterprise версиями, посетите [официальную страницу документации](https://www.ag-grid.com/vue-data-grid/column-properties/)[[target=_blank]]."
  },
  "dataTable": {
    "title": "Data Table",
    "description": "Компонент `va-data-table` используется для отображения табличных данных. Возможности включают сортировку, поиск, разбиение на страницы, выбор строки, возможность добавления дополнительных строк в заголовок (`<thead>`), тело (`<tbody>`) или футер (`<tfoot>`) таблицы и другие функции.",
    "otherTables": {
      "text": "Мы также предоставляем стили для HTML таблицы и собственную тему для AG-Grid:",
      "htmlTable": "HTML таблица",
      "agGrid": "Тема для AG Grid"
    },
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": "Стандартная таблица `va-data-table` по умолчанию отображает ваши данные в виде простых строк."
      },
      "slots": {
        "title": "Слоты",
        "text": [
          "Слоты позволяют управлять отображением данных и их представлений в разных частях таблицы. Примеры ниже демонстрирует некоторые из этих слотов и то, что вы можете делать с каждым из них.",
          "**Использование пользовательских слотов**. Пользовательские слоты (*username*, *street* и *company name*) отображают определенные данные.",
          "**Отображение добавляемых статических строк в header, body и footer**. Для добавленных (в начале и в конце) статических строк установлен дополнительный `className` с цветом фона.",
          "**Использование слота `colgroup` для установки определенных атрибутов столбцов**. Для последнего столбца установлен дополнительный `className` с цветом фона."
        ]
      },
      "filtering": {
        "title": "Фильтрация",
        "text": "`va-data-table` позволяет применять фильтр по всей таблице с помощью свойства `filter`. Чтобы использовать настраиваемую функцию фильтрации, предоставьте `va-data-table` свойство `filter-method`.\n\nВ следующем примере показано использование настраиваемой функции фильтрации (которая ищет точное совпадение, в отличие от стандартной, проверяющей включение подстроки), когда установлен соответствующий флажок."
      },
      "sorting": {
        "title": "Сортировка",
        "text": "Вы можете указать, какие столбцы следует сортировать, предоставив объект определения столбца (см. свойство `columns` ниже) с полем `sortable: true`. Включение сортировки столбца означает возможность щелкнуть заголовок столбца для переключения сортировки по значениям этого столбца.\n\nВы также можете предоставить настраиваемую функцию сортировки для данного столбца, используя поле `sortingFn` в объекте определения столбца: `sortingFn: (a: any, b: any) => number`. Функция принимает начальные значения двух ячеек (a, b) (**примечание: начальное значение** (т.е. в форме, предоставленной пользователем, а не в строковой форме)) и должна возвращать число (-1, 0, +1), которое указывает, нужно ли поменять местами две строки. Подробнее см. cтандартную функцию [Array.prototype.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)[[target=_blank]]. Если вы хотите отключить пользовательскую функцию во время выполнения и начать использовать встроенную, передайте `undefined` в `sortingFn`.\n\n`va-data-table` также опционально принимает моделируемые свойства `sort- by` и `sorting-order`, которые позволяют пользователям изменять параметры сортировки извне и моделировать изменения, внесенные в сортировку таблицы, путем взаимодействия с самой таблицей. Они также позволяют предоставить начальные значения сортировки. **Работают через `v-model`**."
      },
      "selection": {
        "title": "Выбор",
        "text": "Используйте свойство `selectable`, чтобы указать, должна ли `va-data-table` иметь выбираемые строки или нет. Цвет выделения выбранной строки можно изменить с помощью свойства `selected-color`, передав строку с одним из возможных вариантов цвета: `'primary'`, `'dangerous'` и так далее.\n\nВыбор в таблице по желанию может быть прикреплен к модели со стандартной `v-model` (с использованием свойства `:model-value` и события `update:modelValue`). Это также позволяет установить начальный выбор в таблице `va-data-table`."
      },
      "pagination": {
        "title": "Пагинация",
        "text": "Используйте свойства `per-page` и `current-page`, чтобы включить разбиение таблицы на страницы.\n\nКомпонент `va-data-table` не зависит от пагинатора. Т.е. он может работать с любым компонентом нумерации страниц, который вы хотите. В приведенном ниже примере он использует и стандартные поля ввода и компонент `va-pagination`."
      },
      "styling": {
        "title": "Стилизация",
        "text": "Должно быть указано в столбцах (см. свойство `columns` ниже). Позволяет указать разные значения (css свойства `text-align`, `vertical-align` и `width`, пользовательские `class` и `style`) для заголовков и ячеек столбцов."
      },
      "stickyHeader": {
        "title": "Липкий заголовок",
        "text": [
          "Липкий заголовок задается свойством `sticky-header`. Липкий заголовок достигается с помощью CSS установкой `position: sticky`. Это НЕ поддерживается во всех браузерах. Проверьте [caniuse.com](https://caniuse.com/?search=sticky)[[target=_blank]], прежде чем использовать этот метод.",
          "Для корректной работы важно ограничить высоту (установить значение в свойство `height` компонента или с помощью CSS свойств `height` или `max-height`) таблицы и назначить цвет фона (установить CSS `background-color`) заголовка таблицы."
        ]
      },
      "other": {
        "title": "Другое",
        "text": [
          "Компонент имеет множество разных свойств, некоторые из них показаны ниже на примере.",
          "Пример `va-data-table` с операциями **CRUD** с использованием компонента `va-modal` для редактирования каждой строки:"
        ]
      }
    }
  },
  "uiElementGuide": {
    "title": "Требования к элементам UI",
    "description": "Эта страница предназначена для контрибьюторов vuestic-ui, на ней описаны требования к элементам UI.",
    "highLevelStrategy": {
      "title": "Высокоуровневая стратегия",
      "description": {
        "userExpectations": "Компоненты должны быть такими, какими их ожидает видеть пользователь. Мы достигаем этого, изучая следующие проекты ([Vuetify](https://vuetifyjs.com)[[target=_blank]], [Quasar](https://quasar.dev)[[target=_blank]], [Ant Design](https://ant.design)[[target=_blank]], [iView](http://iview.talkingdata.com)[[target=_blank]], [Element UI](https://element.eleme.io)[[target=_blank]] и т.п.).",
        "qualityComponents": "Компоненты должны быть качественными. Мы достигаем этого путем ручного тестирования особых случаев + раннего и частого рефакторинга."
      }
    },
    "coreFeatures": {
      "title": "Основные особенности",
      "description": {
        "visualFeedback": "**Визуальная обратная связь** - когда пользователь взаимодействует с компонентом, он должен видеть результат своих действий (может быть реализован с помощью :active селектора или как-то иначе в зависимости от компонента).",
        "keyboardNavigation": "**Клавиатурная навигация** - Вы должны убедиться, что элементы пользовательского интерфейса доступны с клавиатуры, или же отключить эту функцию для элементов, которые не должны получать фокус через клавиатуру.",
        "statelessSupport": "Поддержка **внутреннего состояния** компонента (прочтите об [StatefulMixin](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/mixins/StatefulMixin/README.md)[[target=_blank]])."
      }
    }
  },
  "treeShakingRequirements": {
    "title": "Требования для работы TreeShaking",
    "description": "Данная статья для контрибьюторов описывает основные правила и ограничения, которые нужно учитывать при разработке для корректной работы TreeShaking.",
    "about": {
      "title": "Реализация TreeShaking",
      "description": "TreeShaking реализуется из-за ES-modules. Мы собираем итоговую сборку с помощью Rollup, в нескольких форматах: esm (tree-shaking / ssr-treeshaking), cjs (default nodejs), iife (browser) и scss (styles).",
      "distFormats": {
        "esm": "esm - используется для tree-shaking",
        "esmSsr": "esm-ssr - так же для tree-shaking, но используется {'@'}vue/server-side-renderer для компонентов.",
        "iife": "iife - используется для подключения в браузер, без бандлеров.",
        "cjs": "cjs - для работы с nodejs бандлерами, которые не поддерживают esm. Проще говоря для обратной совместимости.",
        "style": "styles - тут мы храним SCSS utils, которые не являются обязательным для работы компонентов."
      },
      "notice": "Заметьте, мы всё ещё используем Webpack во время разработки. Поэтому у нас есть отдельный пакет для тестирования двух сборщиков - bundlers-tests"
    },
    "requirements": {
      "title": "Требования и правила",
      "esModules": "Нужно использовать ES module (esm format) и Named Exports. Если мы будем использовать `export default` - tree shaking не будет работать для такого файла.",
      "dependencies": "TreeShaking работает только с node модулями, которые написаны в формате esm. Например, мы используем `lodash-es`, вместо `lodash`. Таким образом мы собираем в bundle только те модули, которые будем использовать, а не всю библиотеку.",
      "beforeBuild": "Перед релизом обязательно проверяйте dist с помощью `bundlers-tests`, работает ли tree-shaking. Учитывайте что в разных сборщиках результат может отличаться. Поэтому мы проверяем билд с помощью Webpack, Vite (Rollup)."
    }
  },
  "timePicker": {
    "title": "Time Picker",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": ""
      },
      "readonlyAndDisabled": {
        "title": "Только для чтения и отключение",
        "text": ""
      },
      "ampm": {
        "title": "AM PM",
        "text": "Свойство `ampm` устанавливает 12 часовой формат времени."
      },
      "periodUpdatesModelValue": {
        "title": "Смена формата обновляет model value",
        "text": ""
      },
      "view": {
        "title": "Вид",
        "text": "Свойство позволяет добавлять минуты и секунды."
      },
      "filter": {
        "title": "Фильтр",
        "text": "Свойство позволит скрыть определенное время от пользователя."
      }
    }
  },
  "timeInput": {
    "title": "Time Input",
    "description": "Компонент Time Input - это комбинация компонентов Time Picker и Input. Вы можете найти примеры использования, перейдя по следующим ссылкам:",
    "examples": {
      "default": {
        "title": "Базовое использование",
        "text": ""
      },
      "input": {
        "title": "Парсинг",
        "text": "Базовая функция парсинга должна покрыть все ваши нужны, однако вы можете использовать свою собственную функцию с помощью свойства `parseTime`.",
        "notion": "Она может парсить следующие форматы: 11, 11:00, 11:00:00, 11 pm, 23, 2300, 11.00, 11somejunk00"
      },
      "format": {
        "title": "Форматирование",
        "text": "Форматирование текста зависит от свойства `view`. Вы можете предоставить кастомную функию, которая принимает Date и возвращает строку."
      },
      "ampm": {
        "title": "AM PM",
        "text": "Time Input будет автоматически преобразовывать формат в AM PM."
      },
      "validation": {
        "title": "Валидация",
        "text": "Валидация работает подобрным образом как и валидация `VaInput`, только функции должны принимать `Date` вместо строки."
      }
    }
  },
  "colors": {
    "title": "Цвета",
    "description": "Vuestic UI определяет `Переменные CSS` цветов, которые используются в вашем приложении. Это позволит вам легко определять свои селекторы с использованием цветов определенных в [Colors Config](https://vuestic.dev/en/services/colors-config).",
    "customAlert": "Это пользовательское уведомление, использующее CSS переменные.",
    "syntax": {
      "title": "Синтаксис",
      "description": "Vuestic UI использует следующий синтаксис для определения цветовых переменных CSS:",
      "scheme": "Схема",
      "name": "название цвета, добавленного в Colors Config.",
      "example": "Пример",
      "availableCss": "Доступные CSS переменные",
      "colorsUsed": "Каждый цвет, объявленный по умолчанию в Vuestic UI  (включая и переопределенные цвета) и новые добавленные пользователем цвета имеют свои собственные `Переменные CSS`."
    },
    "defaultColorThemes": {
      "title": "Стандартные цветовые темы",
      "description": "Все объявленные по умолчанию в Vuestic UI цвета перечисленны ниже:"
    },
    "reactivity": {
      "subtitle": "Реактивность",
      "about": "Эти переменные реактивны относительно `Colors Config`. Это значит, что они будут обновляться, когда изменяется конфигурация. Читайте подробнее о том, как обновлять конфигурацию [здесь](https://vuestic.dev/en/services/colors-config#icon-config-service-api).",
      "additional": "Обратите внимание, что изменение цветовых переменных CSS напрямую, в свою очередь, не приведет к обновлению `Colors Config`."
    }
  }
}
