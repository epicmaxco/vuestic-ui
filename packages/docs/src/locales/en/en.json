{
  "landing": {
    "header": {
      "buttons": {
        "overview": "Overview",
        "docs": "Docs",
        "discord": "Join on Discord",
        "translation": "Add translation...",
        "language": "Language"
      }
    },
    "preview": {
      "title": "Vue.js 3.0 UI Framework",
      "buttons": {
        "start": "Get started",
        "github": "View on GitHub",
        "askForStars": "Star on Github will help people to discover Vuestic"
      },
      "features": {
        "components": {
          "title": "52 Responsive Components",
          "text": "Available components docs"
        },
        "keyboard": {
          "title": "Keyboard Navigation",
          "text": "Accessibility guides"
        },
        "browsers": {
          "title": "Modern Browsers Support",
          "text": "Supported browsers list"
        }
      }
    },
    "seamless": {
      "title": "Seamless Integration",
      "text": "Use Vuestic UI with other component libraries without any conflicts.",
      "compare": {
        "vuestic": "Vuestic UI components",
        "other": "Other components"
      }
    },
    "customize": {
      "title": "Customize Everything",
      "text": "Make Vuestic UI components match your designs with powerful dynamic configs.",
      "tabs": [
        "Large Modern",
        "Styles",
        "Multiple Themes"
      ],
      "copy": "Copied to clipboard",
      "configuration": "See our configuration guides"
    },
    "opensource": {
      "title": "Open Source",
      "text": [
        "Vuestic UI is forever free and open to contributions. See our",
        "issues",
        "contributing guide",
        "and",
        "discord server",
        "to help us improve Vuestic UI experience."
      ]
    },
    "admin": {
      "title": "Vuestic Admin",
      "text": "Check out Vuestic UI Framework in action.",
      "buttons": {
        "github": "View on GitHub",
        "demo": "Live Demo"
      },
      "features": {
        "opensource": "Open source MIT license",
        "themes": "Two built-in color schemes",
        "responsive": "Cross-browser & responsive",
        "i18n": "i18n-ready"
      }
    },
    "footer": {
      "text": "Open source, free to use. Development inquiries:",
      "buttons": {
        "epicmax": "About Epicmax",
        "admin": "Vuestic Admin",
        "spinners": "Epic Spinners"
      }
    }
  },
  "api": {
    "all": {
      "events": {
        "validation": "On internal validation.",
        "blur": "On blur.",
        "focus": "On focus.",
        "input": "On value change.",
        "click": "On click.",
        "clickPrepend": "The event is triggered by clicking on the `prepend` slot",
        "clickPrependInner": "The event is triggered by clicking on the `prependInner` slot",
        "clickAppend": "The event is triggered by clicking on the `append` slot",
        "clickAppendInner": "The event is triggered by clicking on the `appendInner` slot",
        "updateModelValue": "The event is triggered when the component needs to change the model. Is also used by `v-model`",
        "updateFocused": "The event is triggered when the component needs to toggle the focus"
      },
      "props": {
        "align": "Customizes horizontal position of component (flex based). Available values are strings: 'left', 'center', 'right', 'between', 'around', 'stretch'.",
        "id": "Applies `id` to internal input component. Useful for native forms.",
        "name": "Applies `name` to internal input component. Useful for native forms.",
        "tag": "Replaces html tag. This is useful for semantics and also to allow for valid markup in some cases (`ul > li` and `tr > td` etc.).",
        "size": "Specify size for component. 'small', 'medium', 'large' sizes are available. If you want more control, you can provide number (will be used as `px`) or string value (`rem` and `px` sizes are supported).",
        "disabled": "Applies `disabled` style and removes all user interaction effects.",
        "readonly": "Doesn't look disabled, but acts like one. Mostly useful for wrapper components.",
        "success": "Show component in success state.",
        "error": "Show component in error state.",
        "messages": "Description messages for the component.",
        "errorMessages": "Error messages for the component.",
        "errorCount": "Number of error messages displayed.",
        "stateful": "Add possibility to work with component without setting `v-model`.",
        "color": "Color of the component (theme string or *HEX* string).",
        "textColor": "Text color (theme string or *HEX* string).",
        "rules": "Validation rules <!-- TODO Add link -->.",
        "to": "The target route of the link. [More info here](https://router.vuejs.org/api/#to \"Vue router docs\")[[target=_blank]].",
        "replace": "When set, calls `router.replace()` instead of `router.push()` when navigated, so it will not leave a history record. [More info here](https://router.vuejs.org/api/#replace \"Vue router docs\")[[target=_blank]].",
        "append": "When set, always appends the relative path to the current path. [More info here](https://router.vuejs.org/api/#append \"Vue router docs\")[[target=_blank]].",
        "exact": "Exactly match the link. Without this, '/' will match every route. [More info here](https://router.vuejs.org/api/#exact \"Vue router docs\")[[target=_blank]].",
        "activeClass": "Applied when the link is active. [More info here](https://router.vuejs.org/api/#active-class \"Vue router docs\")[[target=_blank]].",
        "exactActiveClass": "Applied when the link is active with exact match. [More info here](https://router.vuejs.org/api/#exact-active-class \"Vue router docs\")[[target=_blank]].",
        "href": "Designates the component as anchor and applies the href attribute. [More info here](https://router.vuejs.org/api/#href \"Vue router docs\")[[target=_blank]].",
        "target": "Navigation target, [More info here](https://developer.mozilla.org/docs/Web/HTML/Element/A)[[target=_blank]].",
        "src": "Source URL.",
        "arrayValue": "Same as native `value`. It is used with `v-model` of an array type.",
        "label": "Same as native `label`.",
        "leftLabel": "Moves the label on the left of a component.",
        "loading": "Indicates that something is loading (spinner icon).",
        "trueValue": "Overrides the returned value when it's checked.",
        "falseValue": "Overrides the returned value when it's not checked.",
        "square": "Removes rounded corners.",
        "indicator": "Sets the indicator style.",
        "icon": "Sets an icon.",
        "rounded": "Adds rounded corners.",
        "flat": "Removes borders and background.",
        "outline": "Removes background.",
        "gradient": "Adds a background gradient.",
        "modelValue": "The value of the `v-model` bindings.",
        "activeButtonTextColor": "The color of the text of the active button (options supported by the theme or `HEX`).",
        "indeterminate": "Same as native `indeterminate` - a state in which it's impossible to say whether the item is toggled `on` or `off`",
        "indeterminateValue": "Overrides a state value that is not set.",
        "borderColor": "Color css style `border` (theme supported options or `HEX`).",
        "clearableIcon": "Sets the cleaning button icon.",
        "tabindex": "Sets the custom `tabindex`."
      }
    },
    "VaBadge": {
      "props": {
        "text": "Badge text",
        "overlap": "Allows badge to overlap with element.",
        "transparent": "Makes badge semi-transparent.",
        "multiLine": "Badge text will wrap to next line.",
        "visibleEmpty": "Badge will be shown even when there is no text.",
        "dot": "Shows dot instead of full badge. Useful to notify user without grabbing too much attention.",
        "bottom": "Position badge to the bottom.",
        "left": "Position badge to the left"
      }
    },
    "VaButton": {
      "props": {
        "outline": "Applies outline styling",
        "flat": "Applies `flat` styling",
        "icon": "The icon to be displayed to the left of a title",
        "iconRight": "The icon to be displayed to the right of a title",
        "type": "Will be used as value for html `type` attribute",
        "block": "Applies block styling (will take 100% of container width)",
        "rounded": "Adds rounded corners",
        "round": "Makes the button round",
        "spaceBetweenItems": "Sets margin between multiple buttons",
        "gradient": "Makes the button color a gradient",
        "href": "Will be used as value for html `href` attribute. (If used, `<button />` will be replaced with `<a>` tag)",
        "target": "Will be used as value for html `target` attribute (If used, `<button />` will be replaced with `<a>` tag)"
      },
      "slots": {
        "default": "Slot for button content"
      },
      "events": {
        "click": "Emitted when user clicks on button"
      },
      "methods": {
        "focus": "Sets focus on button",
        "blur": "Removes focus from button"
      }
    },
    "VaForm": {
      "props": {
        "autofocus": "Focus on first form-component <!-- TODO Add link --> on render"
      },
      "events": {
        "validation": "Triggered on validation update"
      },
      "methods": {
        "validate": "Performs validation and updates error state for each form component. Works with nested forms.",
        "focus": "Focus on first focusable form-component in the form.",
        "focusInvalid": "Focus on first focusable invalid form-component in the form. This is useful for longer forms and allows to bring user attention to invalid field.",
        "resetValidation": "Reset validation for all validateable <!-- TODO Add link --> form-components.",
        "reset": "Reset values and validation state for all form-components"
      }
    },
    "VaSlider": {
      "props": {
        "range": "Transforms single value slider into range slider.",
        "value": "Numeric value(s) of slider.",
        "trackLabel": "Label of slider track.",
        "color": "Color of slider.",
        "trackColor": "Color of slider base track.",
        "labelColor": "Color of slider label.",
        "trackLabelVisible": "Toggles track label visibility.",
        "min": "Minimum value.",
        "max": "Maximum value.",
        "step": "Slider value step.",
        "label": "Slider label",
        "invertLabel": "Moves label to opposite side.",
        "disabled": "Disables slider.",
        "readonly": "Makes slider read only.",
        "pins": "Adds step marks to a slider track.",
        "iconPrepend": "Icon at the start of slider.",
        "iconAppend": "Icon at the end of slider.",
        "vertical": "Makes slider vertical.",
        "showTrack": "Toggles track display."
      },
      "events": {
        "dragStart": "Emitted on drag start.",
        "dragEnd": "Emitted on drag end.",
        "change": "Emitted on value input.",
        "input": "Emitted on value change."
      },
      "slots": {
        "append": "Slot for input after slider.",
        "prepend": "Slot for input before slider.",
        "label": "Replaces the default label."
      }
    },
    "VaAffix": {
      "props": {
        "offsetTop": "Distance from the top of target element to the top of affixed element.",
        "offsetBottom": "Distance from the bottom of target element to the bottom of affixed element.",
        "target": "The element relative to which the component is fixed."
      },
      "events": {
        "change": "Emits affixed state on its' change."
      }
    },
    "VaBreadcrumbs": {
      "props": {
        "activeColor": "Color of active links (theme string or HEX string).",
        "separator": "Element to separate breadcrumbs items.",
        "separatorColor": "Color of the separator icon (theme string or HEX string)."
      },
      "slots": {
        "default": "One or more `va-breadcrumbs-item` elements.",
        "separator": "Separator element. Can be string or vue component."
      }
    },
    "VaBreadcrumbsItem": {
      "props": {
        "label": "Component content (string)."
      },
      "slots": {
        "default": "Component content."
      }
    },
    "VaModal": {
      "props": {
        "value": "The current visibility state of the modal",
        "title": "Text content to place in the title",
        "message": "Content of modal body",
        "attachElement": "A valid selector of element, where modal will be rendered",
        "disableAttachment": "Ignore `attach-element` prop and render component as it's parent child",
        "size": "Set the size of the modal's width. `small`, `medium` (default) or `large`",
        "okText": "Text string to place in the default footer **Ok** button",
        "cancelText": "Text string to place in the default footer **Cancel** button",
        "hideDefaultActions": "Use `hide-default-actions: true` to hide **Cancel** and **Ok** buttons",
        "fullscreen": "Add the `fullscreen` prop to cover the whole page",
        "mobileFullscreen": "Use `mobile-fullscreen: false` to disable fullscreen mode for mobile viewports",
        "noDismiss": "Disable both close on overlay click and close on **Esc**",
        "noOutsideDismiss": "Disable close on overlay click",
        "noEscDismiss": "Disable close on **Esc**",
        "maxWidth": "Use `max-width` to change the maximum width of the modal.",
        "maxHeight": "Use `max-height` to change the maximum height of the modal. If content is larger, scroll will appear",
        "fixedLayout": "Use `fixed-layout: true` to scroll only content in modal. Title and actions will be fixed",
        "withoutTransitions": "Use `without-transitions: true` to turn off the open and close animations on the modal",
        "overlay": "Use `overlay: false` to hide the overlay",
        "overlayOpacity": "Set the overlay's opacity",
        "zIndex": "Set the modal's `z-index`"
      },
      "events": {
        "clickOutside": "Emits when overlay is clicked",
        "input": "Emits when modal's visibility should change",
        "ok": "Emits when **Ok** button is clicked",
        "beforeOpen": "Emits before modal's open after transition started",
        "open": "Emits when modal's is open and transition is complete",
        "beforeClose": "Emits before modal's start closing after transition started",
        "close": "Emits when modal's is closed and transition is complete",
        "cancel": "Emits when the user closes the modal window without side effects"
      },
      "methods": {
        "hide": "Hide modal. On stateless modal only emits `input`",
        "open": "Show modal. On stateless modal only emits `input`",
        "toggle": "Toggle a modal's visibility. On stateless modal only emits `input`"
      },
      "slots": {
        "default": "Content of modal body",
        "header": "Modal header content",
        "footer": "Modal footer content"
      }
    },
    "VaRating": {
      "props": {
        "value": "The rating value",
        "icon": "The icon displayed when icon is filled",
        "halfIcon": "The icon displayed when icon is half-filled (requires **`halves`**)",
        "emptyIcon": "The icon displayed when icon is empty (requires **`halves`**)",
        "readonly": "Disables all user interaction effects (pointer, hover)",
        "numbers": "When `true`, numbers from 1 to **`max`** are rendered instead of icons",
        "halves": "Allow to select half of the item",
        "max": "The amount of items to display",
        "clearable": "Allows the components value to be set to 0. Triggered by clicking on currently selected icon",
        "hover": "Adds visual feedback when hovering on items",
        "texts": "The array of captions to be used with each value. The array length should be equal to **`max`** prop",
        "textColor": "Color of text captions",
        "unselectedColor": "Specifies the color of unselected items (by default **`color`** prop is used)"
      }
    },
    "VaPagination": {
      "props": {
        "value": "Current page (or item if `total` is issued) value",
        "visiblePages": "The amount of displayed pages. (When set to 0 all pages are displayed)",
        "pages": "The amount of pages",
        "boundaryLinks": "Show controls to move to first and last page",
        "boundaryNumbers": "Always show first and last page (will replace `boundary-links` if both used)",
        "directionLinks": "Show buttons to move forward and backward",
        "input": "Use HTML Input instead of buttons to control `va-pagination` state",
        "hideOnSinglePage": "Component won't be displayed if only 1 page is available",
        "flat": "Applies `flat` style",
        "total": "Set the amount of data pagination should iterate through. This prop should not be used with `pages` prop.",
        "pageSize": "Set the amount of data to be displayed at 1 page. Used to calculate the length of pagination. This prop should not be used with `pages` prop.",
        "boundaryIconLeft": "Set the icon name for left boundary icon",
        "boundaryIconRight": "Set the icon name for right boundary icon",
        "directionIconLeft": "Set the icon name for left direction icon",
        "directionIconRight": "Set the icon name for right direction icon",
        "size": "Specify size for component. \"small\", \"medium\", \"large\" sizes are available"
      }
    },
    "VaTabs": {
      "props": {
        "value": "The *name* of selected tab or *index* (if `name` prop is not specified)",
        "left": "Align all items to the left",
        "right": "Align all items to the right",
        "center": "Align all items to the center",
        "grow": "Take all container width",
        "hideSlider": "Remove slider which underlines selected item",
        "vertical": "Align all items vertically",
        "prevIcon": "Icon to be used for scrolling backward in pagination",
        "nextIcon": "Icon to be used for scrolling forward in pagination"
      }
    },
    "VaSwitch": {
      "props": {
        "color": "Color of switch",
        "size": "Specify size for component. \"small\", \"medium\", \"large\" sizes are available",
        "label": "Switch label",
        "leftLabel": "Moves label to the left",
        "readonly": "Makes switch read only",
        "trueLabel": "Label when checked",
        "falseLabel": "Label when unchecked",
        "trueInnerLabel": "Inner label when checked",
        "falseInnerLabel": "Inner label when unchecked",
        "value": "Switch value",
        "trueValue": "Value when checked",
        "falseValue": "Value when unchecked",
        "arrayValue": "Takes the value of a switch in an array of switches"
      },
      "slots": {
        "default": "Slot for label.",
        "innerLabel": "Slot for inner label."
      }
    },
    "VaFileUpload": {
      "props": {
        "type": "Specify the format of component. Supported types are `single`, `list` and `gallery`",
        "fileTypes": "Specify supported file formats",
        "dropzone": "Enables Drag&Drop",
        "value": "The array with uploaded files"
      }
    },
    "VaHover": {
      "props": {
        "value": "Hover state."
      },
      "events": {
        "input": "Emits hover state when it changes."
      },
      "slots": {
        "default": "Vue default slot."
      }
    },
    "VaDivider": {
      "props": {
        "vertical": "Displays divider vertically",
        "dashed": "If set to true, the divider line is dashed",
        "inset": "If set to true, the left and right margins will be added; reduces height for vertical divider",
        "orientation": "Position of the title inside divider (for horizontal only). `left`, `center` (default) or `right`"
      },
      "slots": {
        "default": "Insert content (for horizontal only)"
      }
    },
    "VaToast": {
      "props": {
        "title": "Sets the title for the notification",
        "offsetY": "Sets the Y offset",
        "offsetX": "Sets the X offset",
        "message": "Notification message",
        "icon": "Sets the close icon",
        "customClass": "Applies custom class to the component",
        "duration": "Sets the duration of the notification display",
        "closeable": "Provides the ability to close the component",
        "onClose": "Applies a function to use when pressed a close button",
        "onClick": "Applies a function to use when clicked",
        "position": "Sets the position of the notification",
        "render": "Render function to use a custom content",
        "multiLine": "Sets more space for the Toast component",
        "html": "Sets the ability to use `message` as innerHtml. **Please note that this can lead to XSS attacks**, so make sure that you sanitize the `message` by yourself"
      },
      "events": {
        "onClick": "Emits when toast is clicked",
        "onClose": "Emits when close button is clicked"
      },
      "methods": {},
      "slots": {}
    },
    "VaCard": {
      "props": {
        "stripe": "Displays a stripe above a card title.",
        "stripeColor": "Customize stripe color (theme string or *HEX* string).",
        "gradient": "Adds color gradient to `va-card` body.",
        "bordered": "Toggles borders of a card component.",
        "outlined": "Toggles shadow of `va-card`",
        "dark": "Applies dark color and background to card"
      }
    },
    "VaSidebar": {
      "props": {
        "minimized": "Minimized state of sidebar.",
        "hoverable": "Expand sidebar on hover.",
        "position": "Position of `va-sidebar`, can be `right` or `left`.",
        "width": "Width of component in maximized state.",
        "minimizedWidth": "Width of component in minimized state.",
        "value": "The current visibility state of `va-sidebar`."
      }
    },
    "VaImage": {
      "props": {
        "ratio": "Width to height ratio.",
        "contain": "Scales the image while maintaining the proportions so that the whole image fits inside the block."
      },
      "events": {
        "loaded": "Emitted when image loading is finished.",
        "error": "Emitted on loading error."
      },
      "slots": {
        "loading": "Shown when image is loading.",
        "error": "Is shown if loading gives an error.",
        "default": "Image overlay for you to add content. Doesn't show on loading or error."
      }
    },
    "VaOptionList": {
      "props": {
        "value": "The array of currently selected items in a list",
        "disabledBy": "Specify the key in the object to be used as item `disabled` prop. Can be string (path to the key) or function of type: `(option) => option.disabled`",
        "valueBy": "Specify the key in the object to be used as item `value` prop. Can be string (path to the key) or function of type: `(option) => option.value`",
        "trackBy": "Specify the key in the object to be used as item `key` prop. Can be string (path to the key) or function of type: `(option) => option.track`",
        "textBy": "Specify the key in the object to be used as item `text` prop. Can be string (path to the key) or function of type: `(option) => option.text`",
        "options": "The array of items to be displayed",
        "type": "Specify the format of component. Supported types are `\"radio\"`, `\"checkbox\"` and `\"switch\"`",
        "defaultValue": "This value will be pre-selected when component mounts",
        "leftLabel": "Put the labels to the left"
      },
      "events": {
        "input": "Emitted on value change."
      },
      "slots": {
        "default": "Used to render items. Available props are:\n`option: String `&#124;` Object`,\n`isDisabled: Boolean`,\n`name: String`,\n`color: String`,\n`leftLabel: Boolean`,\n`getText: (option: String `&#124;` Object) => String`,\n`selectedValue: Array<String `&#124;` Object>`,\n`index: Number`"
      }
    },
    "VaAvatar": {
      "props": {
        "icon": "The icon to be displayed inside a container",
        "src": "URL to the image (will be placed inside `src` attribute of image tag)",
        "fontSize": "The font-size of text inside avatar",
        "email": "Будет отображать `gravatar` для предоставленного email"
      },
      "slots": {
        "default": "Use this slot to replace default content to be displayed inside the component"
      }
    },
    "VaCheckbox": {
      "props": {
        "value": "The value of the checkbox",
        "checkedIcon": "Overrides the `checked` icon",
        "indeterminateIcon": "Overrides the `indeterminate` icon"
      },
      "events": {
        "input": "Emitted when the component needs to change the value"
      }
    },
    "VaProgressBar": {
      "props": {
        "value": "The progress value",
        "indeterminate": "Create a indeterminate loading bar",
        "buffer": "Create a loading bar with a buffer. Commonly used in videos",
        "reverse": "Reverse the progress bar direction",
        "rounded": "Add a border radius to the `va-progress-bar` component (default: true)"
      },
      "slots": {
        "default": "Display any additional info about the progress"
      }
    },
    "VaProgressCircle": {
      "props": {
        "value": "The progress value",
        "indeterminate": "Using the `indeterminate` prop, the `va-progress-circle` continues to  animate indefinitely.",
        "thickness": "Circle border size between 0 and 1"
      },
      "slots": {
        "default": "Display any additional info about the progress"
      }
    },
    "VaInfiniteScroll": {
      "props": {
        "offset": "Number of pixels to the end of `va-infinite-scroll` container at which the component should start loading more content in advance.",
        "reverse": "Instead of bottom, top of the container would trigger loading.",
        "disabled": "Won't trigger load even when scroll reached end. Useful to prevent further loading when there is no more items in list.",
        "scrollTarget": "The element to be used as a scroll container instead of default one. Could be CSS selector or Element. When not set - direct wrapper will be used as a scroll container.",
        "debounce": "Debounce to be applied when listening to scroll event. Useful to prevent user from triggering loading multiple times.",
        "load": "Function that loads data. Should return Promise",
        "tag": "Replaces html tag. This is useful for semantics and also to allow for valid markup in some cases (`ul > li` and `tr > td` etc.)."
      },
      "slots": {
        "loading": "Shown when content is fetching.",
        "default": "The content to be scrolled"
      }
    },
    "VaAlert": {
      "props": {
        "value": "The current visibility state of the alert",
        "title": "The text content placed in the title",
        "description": "The text content of the alert",
        "icon": "Show icon in front of alert content",
        "closeIcon": "Replace the default close icon with a custom one",
        "closeText": "Use text instead of the close icon",
        "closeable": "Add a close alert area",
        "center": "Center the title and description of the alert",
        "borderColor": "Border color of the alert",
        "border": "Stripe border for alert. `top`, `right`, `bottom`, `left` sizes are available",
        "dense": "Reduces alert paddings"
      },
      "methods": {
        "hide": "Hide alert. On stateless alert only emits `input`"
      },
      "slots": {
        "default": "Content of alert body",
        "title": "Alert title area content",
        "icon": "Alert icon area content",
        "close": "Alert close area content"
      }
    },
    "VaIcon": {
      "props": {
        "component": "Allows to use the svg component as an icon.",
        "rotation": "Rotates a component by a degree value.",
        "spin": "Starts rotation animation.",
        "iconsConfig": "Allows you to configurate iconset."
      }
    },
    "VaRadio": {
      "props": {
        "value": "Model of the component",
        "option": "Option value that model is updated to when an option is selected",
        "tabindex": "Sets a custom tabindex"
      }
    },
    "VaCollapse": {
      "props": {
        "value": "Current collapse state",
        "header": "Text content to place in the header",
        "icon": "The icon to be displayed inside a header",
        "solid": "Adds borders to the collapse",
        "colorAll": "Applies color to collapse contents background"
      },
      "events": {
        "input": "Emits when collapse is clicked"
      },
      "methods": {},
      "slots": {
        "default": "Content of the collapse component",
        "header": "Replaces content of the header to custom"
      }
    },
    "VaAccordion": {
      "props": {
        "value": "The array of currently opened collapses",
        "multiply": "Allows to expand multiply components",
        "inset": "Collapse becomes smaller when activated",
        "popout": "Collapse becomes bigger when activated"
      },
      "events": {
        "input": "Emits when any of collapses is clicked"
      },
      "methods": {},
      "slots": {
        "default": "Contains collapses"
      }
    },
    "VaChip": {
      "props": {
        "closeable": "Provides the ability to close the tag",
        "outline": "Applies outline styling",
        "flat": "Applies flat styling",
        "icon": "The icon to be displayed inside a tag",
        "shadow": "Applies box-shadow to the component"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaInput": {
      "props": {
        "value": "The input value",
        "type": "Sets input type",
        "label": "Sets input label",
        "placeholder": "Sets input placeholder",
        "mask": "Sets input mask if using as string or options for mask",
        "color": "Sets input color",
        "removable": "Adds an button that clears the value",
        "tabindex": "Sets input tabindex",
        "returnRaw": "Sets possibility to return raw value",
        "autosize": "Sets textarea possibility to grow up automatically",
        "minRows": "Minimal count of lines",
        "maxRows": "Maximum count of lines",
        "rules": "Accepts an array of functions that take an input value as an argument and return either true / false or a string with an error message",
        "disabled": "Disable the input",
        "readonly": "Puts input in readonly state",
        "success": "Sets input state to success",
        "messages": "Displays a list of messages or message if using a string",
        "error": "Sets input state to error",
        "errorMessages": "Displays a list of error messages or message if using a string",
        "errorCount": "Number of error messages displayed",
        "clearable": "Adds a button to reset the input field value",
        "bordered": "Applies underscore",
        "focused": "Applies focus style",
        "canBeFocused": "If false, then input can not be focused using mouse or keyboard."
      },
      "events": {
        "input": "Emitted when the component needs to change the model",
        "change": "Emitted when the input is changed by user interaction",
        "blur": "Emitted when the input is blurred",
        "focus": "Emitted when input is focused",
        "click": "Emitted when user clicked on input",
        "keyup": "Emitted when the user releases a key on the keyboard",
        "keydown": "Emitted when any key is pressed",
        "cleared": "Emitted if input value has been cleared",
        "click-prepend": "Событие вызывается при клике по слоту `prepend`",
        "click-prepend-inner": "Событие вызывается при клике по слоту `prependInner`",
        "click-append": "Событие вызывается при клике по слоту `append`",
        "click-append-inner": "Событие вызывается при клике по слоту `appendInner`"
      },
      "methods": {
        "focus": "Setting focus on input",
        "reset": "Clearing input value"
      },
      "slots": {
        "prepend": "Adds an item outside the input and before input content",
        "prependInner": "Adds an item inside the input and before input content",
        "append": "Adds an item outside the input and after input content",
        "appendInner": "Adds an item inside the input and after input content"
      }
    },
    "VaList": {
      "props": {
        "fit": "Stretches list by its content width"
      },
      "slots": {
        "default": "Contains list items"
      }
    },
    "VaListLabel": {
      "slots": {
        "default": "Contains the label text"
      }
    },
    "VaListSeparator": {
      "props": {
        "fit": "Adds space on the left side",
        "spaced": "Adds spaces over and under the separator"
      }
    },
    "VaListItem": {
      "events": {
        "focus": "Emitted when item is focused",
        "click": "Emitted when user clicked on item"
      },
      "slots": {
        "default": "For a list item content"
      }
    },
    "VaListItemLabel": {
      "props": {
        "caption": "Applies another style to text",
        "lines": "Divides item label content on a custom count of lines"
      },
      "slots": {
        "default": "Contains the label text"
      }
    },
    "VaListItemSection": {
      "props": {
        "icon": "Makes section for icon",
        "avatar": "Makes section for avatar"
      },
      "slots": {
        "default": "For a section content"
      }
    },
    "VaSelect": {
      "props": {
        "value": "Model of the component. Must be Array if using 'multiple' prop",
        "clearValue": "Sets value that should be setted after clearing",
        "options": "Available options that the user can select from",
        "disabledBy": "Specify the key in the object to be used as item `disabled` prop. Can be string (path to the key) or function of type: `(option) => option.disabled`",
        "valueBy": "Specify the key in the object to be used as item `value` prop. Can be string (path to the key) or function of type: `(option) => option.value`",
        "trackBy": "Specify the key in the object to be used as item `key` prop. Can be string (path to the key) or function of type: `(option) => option.track`",
        "textBy": "Specify the key in the object to be used as item `text` prop. Can be string (path to the key) or function of type: `(option) => option.text`",
        "placeholder": "Sets the input’s placeholder text",
        "position": "Sets option list position",
        "tagMax": "Sets maximum tag count after whom selection will be cropped",
        "tags": "Sets selection display as tags",
        "deletableTags": "Sets ability to delete tags",
        "searchable": "Sets ability to filter option list by typing",
        "multiple": "Sets select in multiple mode",
        "maxSelections": "Sets the maximum amount of selected options",
        "width": "Sets option list width",
        "maxHeight": "Sets option list maximum height",
        "noOptionsText": "Sets text whom displaying if list have no items",
        "fixed": "Sets dropdown position strategy",
        "clearable": "Sets ability to clear selection",
        "hideSelected": "Sets ability to hide selected options",
        "allowCreate": "Allow creating new options. Can be set to `unique` if you want to create only unique options",
        "clearIcon": "Sets the clear icon",
        "dropdownIcon": "Sets the dropdown icon. Can be object if you want to sets different open/close icons",
        "bordered": "Применяет подчеркивание",
        "separator": "Текст для разделения выбранных значений"
      },
      "events": {
        "clear": "Emitted if select value has been cleared",
        "updateSearch": "Emitted if search value has changed"
      },
      "methods": {
        "reset": "Clearing select value"
      },
      "slots": {
        "prepend": "Adds an item outside the input and before input content",
        "prependInner": "Adds an item inside the input and before input content",
        "append": "Adds an item outside the input and after input content",
        "appendInner": "Adds an item inside the input and after input content"
      }
    },
    "VaParallax": {
      "props": {
        "target": "The element relative to which the component is fixed",
        "src": "URL to the image",
        "alt": "Specifies an alternate text for an image",
        "height": "Sets a height of the parallax",
        "reversed": "Flips the parallax scrolling",
        "speed": "Sets a speed of the parallax scrolling"
      },
      "slots": {
        "default": "For a content over the parallax"
      }
    },
    "VaBacktop": {
      "props": {
        "target": "Applies the selector to which the backtop is bound",
        "visibilityHeight": "The minimum height after which the backtop is displayed",
        "speed": "Sets the scrolling speed",
        "horizontalPosition": "Sets the horizontal position of the component",
        "verticalPosition": "Sets the vertical position of the component",
        "horizontalOffset": "Sets the horizontal offset of the component from the border of the monitor",
        "verticalOffset": "Sets the vertical offset of the component from the border of the monitor"
      },
      "events": {
        "click": "Emitted when user clicked on backtop"
      },
      "methods": {},
      "slots": {
        "default": "Slot for backtop content"
      }
    },
    "VaButtonDropdown": {
      "props": {
        "size": "Specify size for component. \"small\", \"medium\", \"large\" sizes are available.",
        "disableDropdown": "Disables the dropdown menu.",
        "disableButton": "Disables the button.",
        "round": "Sets the square style for a button.",
        "split": "Divides the button into two parts. This is useful when you have main action (button) and a number of secondary actions (icon + dropdown).",
        "splitTo": "Sets a vue navigation link in a split component.",
        "splitHref": "Sets a native navigation link in a split component.",
        "icon": "Applies a custom icon in the dropdown section.",
        "leftIcon": "Applies a button left icon.",
        "openedIcon": "Applies a custom icon in the dropdown section when the dropdown is opened.",
        "position": "Sets the position of the dropdown content.",
        "keepAnchorWidth": "Keeps anchor position the same.",
        "offset": "Sets the distance between dropdown and anchor.",
        "modelValue": "Sets a dropdown state.",
        "closeOnContentClick": "Sets dropdown content on click behavior."
      },
      "events": {
        "click": "Emitted when user clicks on button.",
        "mainButtonClick": "Emitted when user clicks on main button in split component."
      },
      "methods": {},
      "slots": {
        "default": "Dropdown content slot."
      }
    },
    "VaColorInput": {
      "props": {
        "value": "Current color.",
        "selected": "Select the indicator."
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaColorPalette": {
      "props": {
        "value": "Current color",
        "palette": "An array of colors"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaDataTable": {
      "props": {
        "columns": "The property `columns` must be an array, that configures the columns of the table. In this case:\n\n `ITableColumn` &#123; `key: string;` `label?: string;` `headerTitle?: string;` `sortable?: boolean;` `sortingFn?: (a: any, b: any) => number;` `alignHead?: TAlignOptions;` `verticalAlignHead?: TVerticalAlignOptions;` `align?: TAlignOptions;` `verticalAlign?: TVerticalAlignOptions;` &#125;;\n\n `TAlignOptions: 'left'`&#124;`'center'`&#124;`'right'`;\n\n `TVerticalAlignOptions: 'top'`&#124;`'middle'`&#124;`'bottom'`",
        "items": "Array of objects with table data (`ITableItem: Record<string, any>`). The `va-data-table` automatically calculates the amount and the titles of columns (if not specified otherwise with the `columns` prop) based on these object's keys. When calculating the columns' names based on the item's objects' keys `va-data-table` uses [Lodash's startCase](https://lodash.com/docs/4.17.15#startCase)[[target=_blank]] internally. Faulty values are replaced with an empty string",
        "filter": "If a `filter` is provided, only rows in which at least one cell contains the specified value will be displayed. To disable filtering at runtime (clear `filter`), specify an empty string",
        "filterMethod": "A custom filtering function. The function takes the initial value of the currently checked cell (the `source` is a formal parameter) and should return a `boolean` value, indicating whether to include the row containing this cell or not",
        "sortBy": "Sets the column to sort by. Works through the `v-model`",
        "sortingOrder": "Sets the sorting order. Works through the `v-model`",
        "selectable": "Sets whether the `va-data-table` should have selectable rows or not",
        "selectMode": "Sets the select mode. `'single'` selection allows for only a single row to be selected at a time, while `'multiple'` mode allows to select multiple rows by clicking on checkboxes or using the **ctrl**/**shift** keys when clicking rows",
        "selectedColor": "Sets the highlighting color of the selected row",
        "perPage": "Sets the maximum number of rows displayed in the table's `<tbody>`",
        "currentPage": "Sets the number of the current table page",
        "loading": "Sets the loading state for the table (by displaying the spinning loading-indicator)",
        "loadingColor": "Sets the color of the spinning loading-indicator",
        "noDataHtml": "Sets html-content for cases where there are no items passed in the `items` option at all",
        "noDataFilteredHtml": "Sets html-content for cases where there are no items found when filtering the table using the `filter` prop",
        "hideDefaultHeader": "Sets whether to show the default headers for columns",
        "footerClone": "Sets whether to clone the `<thead>` columns into the `<tfoot>`. Has no effect if the default `<thead>` is hidden with the `hide-default-header` prop",
        "allowFooterSorting": "Allows clicks on `<tfoot>` column headers to sort (and to display the sorting status) the rows",
        "striped": "Sets the striped style to the `<tbody>` rows (highlights each 2nd row)",
        "hoverable": "Allows the a hover state on table rows within a `<tbody>`. The highlighting color of the hover state takes from `selected-color` prop",
        "animated": "Sets css `transition` to table rows"
      },
      "events": {
        "updateSortBy": "Emits when `sort-by` changed",
        "updateSortingOrder": "Emits when `sorting-order` changed",
        "filtered": "`va-data-table` emits the `filtered` event each time filtering is applied (and when the filter is cleared), passing the array of sources of filtered items",
        "sorted": "Each time the table's sorting changes, the `sorted` event is thrown, with the following param: \n &#123;\n &nbsp; `sortBy: string`,\n &nbsp; `sortingOrder: TSortingOrder`\n &#125;",
        "selectionChange": "The `selectionChange` event is thrown each time the selection changes. It provides the following object: \n&#123;\n &nbsp; `currentSelectedItems: ITableItem[]`,\n &nbsp; `previousSelectedItems: ITableItem[]`\n &#125;"
      },
      "methods": {},
      "slots": {
        "colgroup": "The contents of this slot is wrapped (if provided) inside the `<colgroup>` tag, allowing to specify certain column options. Bound to columns (not the prop, but their internal representation)",
        "headerPrepend": "Prepends custom rows in table header (`<thead>`). Isn't bound to anything",
        "header": "Targets all the table headings. Is bound to columns (to their internal representation)",
        "headerKey": "Targets a specific table header by the column's `key`. Is bound to column",
        "headerAppend": "Appends custom rows inside table header (`<thead>`)",
        "bodyPrepend": "Prepends `<tbody>` with custom rows",
        "cell": "Targets all the cells. Is bound to the current cell (to it internal representation)",
        "cellKey": "Allows to target only cells of a specified by the given `key` column. Is bound to the current cell",
        "bodyAppend": "Appends rows to the table's `<tbody>`",
        "footerPrepend": "Prepends rows to the table's `<tfoot>`",
        "footer": "Targets all the headers inside `<tfoot>`. Works if there's a `footer-clone` prop set to `true`",
        "footerKey": "A specific header in `<tfoot>`. Is bound to the column (to it internal representation) with the given `key`. Works if there's a `footer-clone` prop set to `true`",
        "footerAppend": "Appends rows to the `<tfoot>`"
      }
    },
    "VaDatePicker": {
      "props": {
        "modelValue": "Date, date array or date period",
        "monthNames": "Array of 12 month names",
        "weekdayNames": "Array of 7 weekday names",
        "firstWeekday": "Name of first weekday. Can be `Monday` or `Sunday`",
        "hideWeekDays": "Hide weekday names on top of day picker",
        "view": "This prop specify which year and month will be shown to user. Also, you can specify type and show year, month or day picker",
        "type": "This prop will specify which value user should choose",
        "showOtherMonths": "If `true`, other month days will be shown in day picker",
        "highlightWeekend": "If `true` weekend will be colored",
        "highlightToday": "If `true` today date will be colored",
        "allowedDays": "Function that accepts date and return `false` if day is not allowed",
        "allowedMonths": "Function that accepts date and return `false` if month is not allowed",
        "allowedYears": "Function that accepts date and return `false` if year is not allowed",
        "weekends": "Function that accepts date and return `true` if date is weekend",
        "startYear": "First year that user can choose. By default is 1970",
        "endYear": "Last year that user can choose. By default is current year plus 50 years",
        "weekendsColor": "Color of the weekend cells (theme string or HEX string).",
        "mode": "Specify if picker value is single date, multiple dates or date range."
      },
      "events": {
        "updateView": "Emit when DatePicker \"view type\" is changed. DatePicker view types are `\"day\"`, `\"month\"`, `\"year\"`.",
        "hoverYear": "The event is triggered when the mouse hover the year cell.",
        "clickYear": "The event is triggered when clicked the year cell.",
        "hoverDay": "The event is triggered when the mouse hover the day cell.",
        "clickDay": "The event is triggered when clicked the day cell.",
        "hoverMonth": "The event is triggered when the mouse hover the month cell.",
        "clickMonth": "The event is triggered when clicked the month cell."
      },
      "methods": {},
      "slots": {
        "buttonPrev": "Button show previous month or year.",
        "buttonNext": "Button show next month or year.",
        "header": "This slot is showing year and month between header buttons.",
        "year": "Used to change how year will be displayed in header and picker cell.",
        "month": "Used to change how month will be displayed in header and picker cell.",
        "weekday": "Used to change how weekday will be displayed in picker cell.",
        "day": "Used to change how day will be displayed in picker cell."
      }
    },
    "VaDateInput": {
      "props": {
        "modelValue": "Date, date array or date period",
        "weekDays": "Adds days to the table",
        "placeholder": "Sets input placeholder",
        "config": "Object with settings for date picker",
        "monthNames": "Array of 12 month names",
        "weekdayNames": "Array of 7 weekday names",
        "firstWeekday": "Name of first weekday. Can be `Monday` or `Sunday`",
        "hideWeekDays": "Hide weekday names on top of day picker",
        "view": "This prop specify which year and month will be shown to user. Also, you can specify type and show year, month or day picker",
        "type": "This prop will specify which value user should choose",
        "showOtherMonths": "If `true`, other month days will be shown in day picker",
        "highlightWeekend": "If `true` weekend will be colored",
        "highlightToday": "If `true` today date will be colored",
        "allowedDays": "Function that accepts date and return `false` if day is not allowed",
        "allowedMonths": "Function that accepts date and return `false` if month is not allowed",
        "allowedYears": "Function that accepts date and return `false` if year is not allowed",
        "weekends": "Function that accepts date and return `true` if date is weekend",
        "startYear": "First year that user can choose. By default is 1970",
        "endYear": "Last year that user can choose. By default is current year plus 50 years",
        "weekendsColor": "Color of the weekend cells (theme string or HEX string).",
        "mode": "Specify if picker value is single date, multiple dates or date range.",
        "clearable": "Adds a button to reset the input field value",
        "format": "Function that accepts picker value and should transform it to text for input",
        "isOpen": "Value for dropdown. If `true`, then dropdown is shown",
        "resetOnClose": "If true, range value will be reset to previous valid value",
        "bordered": "Applies underscore",
        "label": "Sets input label",
        "mask": "Sets input mask if using as string or options for mask",
        "color": "Sets input color",
        "removable": "Adds an button that clears the value",
        "tabindex": "Sets input tabindex",
        "returnRaw": "Sets possibility to return raw value",
        "autosize": "Sets textarea possibility to grow up automatically",
        "minRows": "Minimal count of lines",
        "maxRows": "Maximum count of lines",
        "rules": "Accepts an array of functions that take an input value as an argument and return either true / false or a string with an error message",
        "disabled": "Disable the input",
        "readonly": "Puts input in readonly state",
        "success": "Sets input state to success",
        "messages": "Displays a list of messages or message if using a string",
        "error": "Sets input state to error",
        "errorMessages": "Displays a list of error messages or message if using a string",
        "errorCount": "Number of error messages displayed",
        "manualInput": "Allows user to manually input date in VaInput"
      },
      "events": {
        "updateView": "The event is triggered when the component needs to change the view",
        "updateMonth": "The event is triggered when the component needs to change the month",
        "updateYear": "The event is triggered when the component needs to change the year",
        "updateIsOpen": "The event is triggered when the component needs to toggle the 'is-open'",
        "updateText": "The event is triggered when the component needs to change the input text",
        "hoverDay": "The event is triggered when the mouse hover the day cell",
        "hoverMonth": "The event is triggered when the mouse hover the month cell",
        "clickDay": "The event is triggered when clicked the day cell",
        "clickMonth": "The event is triggered when clicked the month cell"
      },
      "methods": {},
      "slots": {}
    },
    "VaButtonGroup": {
      "slots": {
        "default": "Slot for buttons"
      }
    },
    "VaButtonToggle": {
      "props": {
        "options": "The array of objects with `label` and `value` properties",
        "value": "Current toggle state",
        "size": "Specify size for component. \"small\", \"medium\", \"large\" sizes are available",
        "toggleColor": "Color of the toggle button",
        "activeButtonTextColor": "The color of the button text with the selected value"
      },
      "events": {
        "input": "Emits when toggling to the different button"
      },
      "methods": {},
      "slots": {}
    },
    "VaAppBar": {
      "props": {
        "gradient": "Applies gradient style to background",
        "bottom": "Sets the component position to the bottom",
        "hideOnScroll": "Hides component when scrolling target",
        "shadowOnScroll": "Applies box-shadow to the component when scrolling target",
        "shadowColor": "Sets color to the box-shadow",
        "target": "Target for scrolling"
      },
      "events": {},
      "methods": {},
      "slots": {
        "default": "Slot for app-bar content"
      }
    },
    "VaInnerLoading": {
      "props": {},
      "events": {},
      "methods": {},
      "slots": {
        "default": "Slot for the component to which you want to apply loading styles"
      }
    },
    "VaNuxtIntegration": {
      "props": {},
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaTable": {
      "props": {},
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaSidebarItem": {
      "props": {
        "activeColor": "Used to set accent color for active `VaSidebarItem`",
        "hoverColor": "Used to set accent color for hovered `VaSidebarItem`",
        "active": "If `true` this sidebar item will be highlighted"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaNavbar": {
      "props": {
        "shape": "If this prop true, then shape will be drawn at navbar background."
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaPopover": {
      "props": {
        "title": "Sets the title of the popover",
        "message": "Message which showed in a popover",
        "trigger": "Event on which popover is triggered",
        "open": "Shows popover",
        "placement": "Sets a popover position",
        "autoHide": "Adds the ability to hide popover when clicked outside",
        "hoverOverTimeout": "Delay before opening",
        "hoverOutTimeout": "Delay before closing"
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaTimePicker": {
      "props": {
        "ampm": "Use 12-hours time format.",
        "hoursFilter": "Function that allows you to hide some specific hours",
        "minutesFilter": "Function that allows you to hide some specific minutes",
        "secondsFilter": "Function that allows you to hide some specific seconds",
        "view": "View specifying which columns will be shown",
        "periodUpdatesModelValue": "If user will change period it will automatically update model value. You can turn off it and am/pm switch will only change view."
      },
      "events": {},
      "methods": {},
      "slots": {}
    },
    "VaTimeInput": {
      "props": {
        "ampm": "Use 12-hours time format.",
        "hoursFilter": "Function that allows you to hide some specific hours",
        "minutesFilter": "Function that allows you to hide some specific minutes",
        "secondsFilter": "Function that allows you to hide some specific seconds",
        "view": "View specifying which columns will be shown",
        "periodUpdatesModelValue": "If user will change period it will automatically update model value. You can turn off it and am/pm switch will only change view.",
        "format": "Custom function that format model value as input text",
        "parse": "Custom function that parses text from VaInput",
        "manualInput": "Allows user to manually input date in VaInput",
        "isOpen": "Value for dropdown. If `true`, then dropdown is shown",
        "value": "The input value",
        "type": "Sets input type",
        "label": "Sets input label",
        "placeholder": "Sets input placeholder",
        "mask": "Sets input mask if using as string or options for mask",
        "color": "Sets input color",
        "removable": "Adds an button that clears the value",
        "tabindex": "Sets input tabindex",
        "returnRaw": "Sets possibility to return raw value",
        "autosize": "Sets textarea possibility to grow up automatically",
        "minRows": "Minimal count of lines",
        "maxRows": "Maximum count of lines",
        "rules": "Accepts an array of functions that take an input value as an argument and return either true / false or a string with an error message",
        "disabled": "Disable the input",
        "readonly": "Puts input in readonly state",
        "success": "Sets input state to success",
        "messages": "Displays a list of messages or message if using a string",
        "error": "Sets input state to error",
        "errorMessages": "Displays a list of error messages or message if using a string",
        "errorCount": "Number of error messages displayed",
        "clearable": "Adds a button to reset the input field value",
        "bordered": "Applies underscore",
        "focused": "Applies focus style",
        "canBeFocused": "If false, then input can not be focused using mouse or keyboard."
      },
      "events": {},
      "methods": {},
      "slots": {}
    }
  },
  "menu": {
    "badges": {
      "wip": {
        "text": "wip",
        "title": "Work In Progress"
      },
      "new": {
        "text": "new",
        "title": "Recently added"
      }
    },
    "categories": {
      "view": "View",
      "form": "Form",
      "layout": "Layout",
      "navigation": "Navigation",
      "color": "Color",
      "other": "Other"
    },
    "introduction": "Introduction",
    "gettingStarted": "Getting Started",
    "styles": "Styles",
    "reset": "CSS Reset",
    "uiElements": "UI Elements",
    "contribution": "Contribution",
    "extensions": "Extensions",
    "documentationPage": "Documentation Page",
    "affix": "Affix",
    "avatar": "Avatar",
    "breadcrumbs": "Breadcrumbs",
    "badge": "Badge",
    "card": "Card",
    "sidebar": "Sidebar",
    "rating": "Rating",
    "modal": "Modal",
    "tabs": "Tabs",
    "slider": "Slider",
    "switch": "Switch",
    "pagination": "Pagination",
    "fileUpload": "File Upload",
    "form": "Form",
    "hover": "Hover",
    "image": "Image",
    "optionList": "Option List",
    "divider": "Divider",
    "checkbox": "Checkbox",
    "button": "Button",
    "progressBar": "Progress Bar",
    "progressCircle": "Progress Circle",
    "infiniteScroll": "Infinite Scroll",
    "alert": "Alert",
    "icon": "Icon",
    "radio": "Radio",
    "collapse": "Collapse",
    "accordion": "Accordion",
    "chip": "Chip",
    "grid": "Grid",
    "input": "Input",
    "list": "List",
    "select": "Select",
    "parallax": "Parallax",
    "popover": "Popover",
    "backtop": "Backtop",
    "colorPicker": "Color Picker",
    "colorInput": "Color Input",
    "colorSlider": "Color Slider",
    "colorPalette": "Color Palette",
    "datePicker": "Date Picker",
    "dateInput": "Date Input",
    "buttonGroup": "Button Group",
    "buttonToggle": "Button Toggle",
    "buttonDropdown": "Button Dropdown",
    "appBar": "App Bar",
    "innerLoading": "Inner Loading",
    "installation": "Installation",
    "roadmap": "Roadmap",
    "accessibilityGuide": "Accessibility Guide",
    "configurationGuide": "Configuration Guide",
    "overview": "Overview",
    "github": "GitHub",
    "translation": "Translation",
    "browserSupport": "Browser Support",
    "table": "Table",
    "guide": "Guide",
    "iconsConfig": "Icons Config",
    "services": "Services",
    "globalConfig": "Global Config",
    "advancedIconsConfig": "Advanced Icons Config",
    "componentsConfig": "Components Config",
    "colorsConfig": "Colors Config",
    "cssVariables": "CSS Variables",
    "sidebarItem": "Sidebar Item",
    "navbar": "Navbar",
    "toast": "Toast",
    "typography": "Typography",
    "agGrid": "AG Grid Theme",
    "dataTable": "Data Table",
    "uiElementGuide": "UI Element Guide",
    "timePicker": "Time Picker",
    "timeInput": "Time Input"
  },
  "all": {
    "examples": "Examples",
    "api": "API",
    "faq": "FAQ",
    "code": {
      "or": "or"
    },
    "examplesTexts": {
      "button": "Your button"
    }
  },
  "docsNavigation": {
    "copyCode": "Copy code",
    "copyCopied": "Copied",
    "copyFailure": "Permission failure!",
    "openGithub": "Open in GitHub",
    "openCodeSandbox": "Open in CodeSandbox"
  },
  "docsExample": {
    "showCode": "Show Code",
    "hideCode": "Hide Code"
  },
  "documentationPage": {
    "compilesTo": "Compiles to:",
    "title": "Documentation Page",
    "description": "This page is intended for Vuestic-UI contributors. It explains the ways to create and modify the documentation.",
    "introduction": {
      "title": "Introduction",
      "description": "Instead of using the established documentation system, such as [vue-press](https://vuepress.vuejs.org/)[[target=_blank]] or [docsify](https://docsify.js.org/#/)[[target=_blank]], we decided to build a system specifically tailored for Vuestic. It’s meant to provide an excellent flexibility for the future growth."
    },
    "pageConfig": {
      "title": "Page Config",
      "descriptionStructure": "The page configuration must be located in a specific path, which is similar to the page URL. The folder with the page configuration must include the `components` folders for blocks with components and` examples` for blocks with examples. These folders should contain the `* .vue` files. An example of the structure and directory of the configuration folder for the current page:",
      "descriptionFile": "The configuration file contains `config`, which is an array of page blocks that perform specific functions."

    },
    "generators": {
      "title": "Generators",
      "description": "We have created custom generators to facilitate and automate the creation of new pages..",
      "generateDocsPage": "* The `yarn generate:docspage` command will generate a page with the specified name in the category selected from the list..",
      "generateComponent": "* The `yarn generate:component` command will generate a complete structure for a new component: create a component, connect it to a library, make a configuration file for it, and add a clean example to the examples folder."
    },
    "blocktypes": {
      "title": "Block Types",
      "descriptionHelper": "The documentation has a flat structure - a list of blocks. To use blocks, you need to create an object of the `PageGenerationHelper` class, passing the path to the current folder to the constructor. After creating the object, call the methods that will return the required block.",
      "description": "Translation strings are structured in a flat manner — just a list of blocks. Markdown is supported for all the text blocks. Here is the list of blocks you can use:",
      "titleBlock": {
        "title": "Title",
        "text": "Page title is **mandatory** for documentation pages.",
        "example": "Title (example)"
      },
      "subtitle": {
        "title": "Subtitle",
        "text": "Used for examples, API, FAQ. Think `h2`.",
        "example": "Subtitle (example)"
      },
      "headline": {
        "title": "Headline",
        "text": "The `headline` block is used to mark the titles of examples and the FAQs. Think `h3`.",
        "example": "Headline (example)"
      },
      "paragraph": {
        "title": "Paragraph",
        "text": "Should be used for all the regular text blocks. For links to external resources you can specify the **target** attribute in markdown markup as follows: `[name](href)[[target=_blank]]`.",
        "example": "Paragraph (example). Link in the text leading to an external resource: [markdown-it-attrs](https://github.com/arve0/markdown-it-attrs)[[target=_blank]]."
      },
      "list": {
        "title": "List",
        "text": "Should be used for lists.",
        "inCode": "Here's the resulting markup for the code above:",
        "listExample1": "Value of list item 1",
        "listExample2": "Value of list item 2"
      },
      "code": {
        "title": "Code",
        "text": "For the code previews we use [prism](https://prismjs.com/)[[target=_blank]]."
      },
      "example": {
        "title": "Example",
        "text": "Shows a component with code preview. Component can use all global services: css classes, colors etc. Mostly used in the ui-elements section to show examples of use."
      },
      "component": {
        "title": "Component",
        "text": "Shows a component that has some logic and is not an example of use."
      },
      "api": {
        "title": "API",
        "text": "The API-documentation for a component. Combines component options with manual declarations."
      },
      "table": {
        "title": "Table",
        "text": "Used to display tabular data. Requires a flat column-definitions array and yet another two-dimensional-array with the actual cells' data."
      },
      "link": {
        "title": "Link",
        "text": "Used for relative (local) links processed by the router (with *options* or without them).",
        "exampleWithOptions": "Link with options (example)",
        "example": "Link (example)"
      },
      "alert": {
        "title": "Alert",
        "text": "Used to display an important message.",
        "example": "Alert (example)"
      }
    },
    "apiOptionsTitle": "API Options",
    "apiOptions": {
      "text": "We can't go too far with the help of automated code analysis. Most of the API documentation has to be declared explicitly. API options allow you to configure things such as: version, props, events, methods and slots.",
      "version": "`version` - specifies the version of Vuestic UI that this component or feature has been introduced at.",
      "types": "`types` - the documentation engine can automatically infer simple prop types (such as `String`, `Number`, etc.) right from the component options. Almost any other type should be defined explicitly.",
      "hidden": "`hidden` - allows you to hide the prop from the API section of the documentation page. Might become quite useful for some props which are intended for internal use solely."
    }
  },
  "avatar": {
    "title": "Avatar",
    "summaryText": "`va-avatar` component is typically used for user profile pictures. The component  helps you display it in different sizes consistently throughout your web application.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "By default `va-avatar` is displayed as a circle container."
      },
      "size": {
        "title": "Different sizes",
        "text": "The `size` prop prop allows you to specify custom size for an avatar. By default, font size will be scaled depending on the value of the `size` prop. But you can use the `font-size` prop prop to force text size you need."
      },
      "color": {
        "title": "Different colors"
      },
      "withImage": {
        "title": "With images",
        "text": "The `src` prop prop is used to add custom icons to a component."
      },
      "withIcon": {
        "title": "With icons",
        "text": "The `icon` prop is used to display icons inside an avatar."
      }
    }
  },
  "affix": {
    "title": "Affix",
    "summaryText": "The affix component is created to fix any content in a proper position relative to a container.",
    "examples": {
      "top": {
        "title": "Fixed at the top"
      },
      "bottom": {
        "title": "Fixed at them bottom"
      },
      "target": {
        "title": "Fixes element relative to custom container"
      }
    }
  },
  "breadcrumbs": {
    "title": "Breadcrumbs",
    "text": "The breadcrumbs component is used for application navigation. It shows the location of the current page within the navigation hierarchy. It’s used with `va-breadcrumb-item` components.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "This is a basic usage of the `va-breadcrumbs` component."
      },
      "color": {
        "title": "Color",
        "text": "Sets color of breadcrumbs content"
      },
      "align": {
        "title": "Align",
        "text": "Changes component position on the page."
      },
      "separator": {
        "title": "Separator",
        "text": "You can use your own separator and customize its color."
      },
      "activeColor": {
        "title": "Active color",
        "text": "Color of active `va-breadcrumb-item` elements."
      },
      "item": {
        "title": "Item",
        "text": "Some `va-breadcrumbs-item` props examples."
      }
    },
    "api": {
      "item": {
        "title": "Item API",
        "text": "API for `va-breadcrumb-item` component."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "Can `separator` prop work with `separator` slot?",
          "answer": "No, slot has higher priority, prop is ignored when slot is used. Same is legit for `label` of `va-breadcrumbs-item`, it is ignored when you use `default` slot."
        }
      ]
    }
  },
  "badge": {
    "title": "Badge",
    "summaryText": "VaBadge is used to highlight information related to other element, such as missed notifications on top of avatar.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Useful for information views and tables."
      },
      "withAvatar": {
        "title": "With Avatar"
      },
      "withCard": {
        "title": "With Card"
      },
      "position": {
        "title": "Position left and bottom"
      },
      "dot": {
        "title": "Dot"
      },
      "transparent": {
        "title": "Transparent"
      },
      "color": {
        "title": "Color"
      }
    }
  },
  "button": {
    "title": "Button",
    "summaryText": "The `va-button` component replaces the standard HTML button. It offers multiple built-in styles and allows a user to change color and size manually.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Just a simple button."
      },
      "withColor": {
        "title": "Colors",
        "text": "The `color` prop is used to change the color of the component."
      },
      "withGradient": {
        "title": "Gradient",
        "text": "It’s used to apply a gradient style to a background."
      },
      "withTextColor": {
        "title": "Text colors",
        "text": "The `text-color` prop is used to change the color of the button text."
      },
      "withSize": {
        "title": "Sizes",
        "text": "The `size` prop is used to fit your button to any place on your web page."
      },
      "withStyle": {
        "title": "Different styles",
        "text": "We have 3 styles available: `outlined`, `flat` and `square`."
      },
      "withIcon": {
        "title": "Add icons",
        "text": "You can add icons to `va-button` with 2 different props: `icon` and `icon-right`"
      },
      "withConfig": {
        "title": "Icons as slots with config",
        "text": "You can wrap your buttons with `VaConfig` and pass icons as slots"
      },
      "withLoading": {
        "title": "Loading state",
        "text": "You can add loading state to the button"
      },
      "disabled": {
        "title": "Disabled",
        "text": "The `disabled` prop prevent any actions with button."
      }
    }
  },
  "slider": {
    "title": "Slider",
    "summaryText": "The slider component is a visualization for the number input. A user can drag a slider within a fixed range to get the required value.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "This is basic usage of the slider component."
      },
      "color": {
        "title": "Color",
        "text": "You can customize the color of the slider."
      },
      "minmax": {
        "title": "Minimum and maximum values",
        "text": "You can set a range between min and max values."
      },
      "state": {
        "title": "State",
        "text": "Slider can be in disabled or readonly state."
      },
      "range": {
        "title": "Range slider",
        "text": "You can set a range of values."
      },
      "step": {
        "title": "Step",
        "text": "Step can be changed."
      },
      "pins": {
        "title": "Pins",
        "text": "Display markers on slider track."
      },
      "label": {
        "title": "Label",
        "text": "Switch label can have an inverted position or a custom color."
      },
      "slots": {
        "title": "Slots",
        "text": "You can add inputs before and after the slider using 'append' or 'prepend' slot name. Also default label can be replaced using 'label' slot."
      },
      "icon": {
        "title": "Icon",
        "text": "You can insert icon at the start or end of slider."
      },
      "track": {
        "title": "Track",
        "text": "Track can be hidden or have custom color."
      },
      "trackLabel": {
        "title": "Track label",
        "text": "You can show track label and overwrite it's view."
      },
      "vertical": {
        "title": "Vertical",
        "text": "Vertical state of slider."
      }
    }
  },
  "switch": {
    "title": "Switch",
    "summaryText": "Switch component turns on or off the state of your custom option",
    "examples": {
      "default": {
        "title": "Default",
        "text": "This is basic usage of switch component."
      },
      "color": {
        "title": "Color",
        "text": "You can customize color."
      },
      "state": {
        "title": "State",
        "text": "Switch can be in disabled or readonly state."
      },
      "label": {
        "title": "Label",
        "text": "Switch can be labeled on the left or on the right."
      },
      "customLabel": {
        "title": "Custom Label",
        "text": "You can label any state of switch."
      },
      "innerLabel": {
        "title": "Inner Label",
        "text": "You may put a label inside of a switch."
      },
      "size": {
        "title": "Size",
        "text": "Switches have 3 different sizes."
      },
      "loading": {
        "title": "Loading",
        "text": "You can mark a pending state of switch."
      },
      "customValue": {
        "title": "Custom Values",
        "text": "You can set custom values for true and false state of the component."
      },
      "indeterminate": {
        "title": "Indeterminate"
      },
      "error": {
        "title": "Error",
        "text": "Switch has an error style."
      }
    }
  },
  "rating": {
    "title": "Rating",
    "summaryText": "The `va-rating` component is a simple yet powerful element when it comes to gathering users feedback. Just in a few lines of code it can provide you with users ratings about your product or application.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "The `va-rating` component has a simple interface to collect user feedback."
      },
      "color": {
        "title": "Colors",
        "text": "With `color` prop you can change the color of the component."
      },
      "size": {
        "title": "Sizes",
        "text": "Using `size` prop specify custom size for an `va-rating` component."
      },
      "hover": {
        "title": "Hover",
        "text": "By using `hover` prop you can see visual changes of value before click."
      },
      "halves": {
        "title": "Halves",
        "text": "You can divide your `va-rating` component values on halves."
      },
      "texts": {
        "title": "Texts",
        "text": "A component can be covered by different custom labels for each value."
      },
      "clearable": {
        "title": "Clearable",
        "text": "Selecting current value again will clear the component."
      },
      "numbers": {
        "title": "Numbers",
        "text": "Want to see numbers instead of icons? We got you covered."
      },
      "customIcons": {
        "title": "Custom Icons",
        "text": "Providing this prop to component allows you to add custom icons."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "Is rating component keyboard accessible?",
          "answer": "Yes, you can use `Tab` `(Shift+Tab)` to move between icons and press Enter to submit value. Or you can use arrow keys (Left and Right) to change rating value"
        },
        {
          "question": "Can I use every other prop in combination with **numbers** prop?",
          "answer": "Yes, all props are compatible between each other."
        }
      ]
    }
  },
  "toast": {
    "title": "Toast",
    "summaryText": "Component for sending a notification to the user.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default, run this component in events by using the `init` method with a setting object."
      },
      "color": {
        "title": "Color",
        "text": "Set different colors using `color` prop. You can either user theme string *HEX* color value."
      },
      "offset": {
        "title": "Offset",
        "text": "Use `offset` property to set the offset of the toast."
      },
      "position": {
        "title": "Position",
        "text": "Use `position` property to set the custom position of the toast. Available are `top-right`, `top-left`, `bottom-right`, `bottom-left`."
      },
      "close": {
        "title": "Close",
        "text": "You can use close method to close the notification and you can set custom onClose event."
      },
      "click": {
        "title": "Click",
        "text": "You can set custom onClick event to handle the click on button."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "What is the difference between a component and a service?",
          "answer": "The difference is in implementation. The service behaves more flexibly and it is easier to bind it to certain events than to render the whole element. \n Each prop you provide to the component you can provide to the service too by using the setting object."
        }
      ]
    }
  },
  "modal": {
    "title": "Modal",
    "summaryText": "Classic modal overlay which represents a dialog box or other interactive component, such as a dismissible alert, sub-window, etc.",
    "overview": {
      "title": "Overview",
      "text": "`<va-modal>`, by default, has the **OK** and **Cancel** buttons in the footer. You can provide a custom message and title with the `message` and `title` props respectively.\n\n`<va-modal>` supports close on **Esc** (enabled by default) and close on overlay click (enabled by default). These features may be disabled by setting the props `no-esc-dismiss` and `no-outside-dismiss` respectively, or `no-dismiss` as a shorthand to disable both of them."
    },
    "stateful": {
      "title": "Stateful",
      "text": "By default `va-modal` is stateless. You can change it by setting the `stateful` prop"
    },
    "fullscreen": {
      "title": "Full screen",
      "text": "Add the `fullscreen` prop to cover the whole page.\n\nNote that `va-modal` is full screen on mobile viewports by default. You can change it by setting the `mobile-fullscreen` prop to `false`."
    },
    "modalSizing": {
      "title": "Modal sizing",
      "text": "Modals have three optional sizes, available via the prop `size`. These sizes kick in at certain breakpoints to avoid horizontal scrollbars on narrower viewports. Valid optional sizes are `small`, `medium` (default), and `large`."
    },
    "toggleVisibility": {
      "title": "Toggle modal visibility",
      "text": "There are several methods that you can employ to toggle the visibility of `<va-modal>`.",
      "sections": [
        {
          "title": "Using `v-model` property",
          "text": "`v-model` property is always automatically synced with `<va-modal>` visible state and you can show/hide using `v-model`."
        },
        {
          "title": "Using `show()`, `hide()`, and `toggle()` component methods",
          "text": "You can access modal using `ref` attribute and then call the `show()`, `hide()` or `toggle()` methods."
        }
      ]
    },
    "disableAnimation": {
      "title": "Disable open and close animation",
      "text": "To disable the transition/animation when modal opens and closes, set the prop `without-transitions`."
    },
    "hidingOverlay": {
      "title": "Hiding the overlay",
      "text": "Hide the modal's overlay via setting the `overlay` prop to `false`.\n\nNote that clicking outside of the modal will still close the modal even though the overlay is hidden. You can disable this behaviour by setting the `no-outside-dismiss` prop on `<va-modal>`."
    },
    "scrollingLongContent": {
      "title": "Scrolling long content",
      "text": "When modals become too long for the user's viewport or device, they allow the scrolling of the modal body. Try the demo below to see what we mean.\n\nYou can also allow scrolling only content in modal via setting the `fixed-layout` prop. Title and actions will be fixed."
    },
    "customization": {
      "title": "Customization",
      "text": "`<va-modal>` provides several slots (`default`, `header` and `footer`), that you can use to customize the content of various sections of the modal.\n\nYou can set custom text for **Cancel** and **Ok** buttons via `ok-text` and `cancel-text` props respectively, or you can hide them via `hide-default-actions` prop.\n\n`va-modal` also supports custom `overlay-opacity` as well as `z-index`, `max-width` and `max-height` for a modal."
    },
    "nestedModals": {
      "title": "Nested modals",
      "text": "Modals can be nested: you can open one modal from another."
    }
  },
  "pagination": {
    "title": "Pagination",
    "summaryText": "The pagination component is used to split big data sets into chunks so that it's simpler for users to use provided information.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "By default the component is displayed as a list of pages with length equal to `pages` prop value."
      },
      "colors": {
        "title": "Color",
        "text": "Set different colors using `color` prop. You can either user theme string *HEX* color value"
      },
      "sizes": {
        "title": "Size",
        "text": "Utilize `size` prop in order to make component fit your needs. Refer to *API* section for more in-depth explanation of how to use `size` prop."
      },
      "icons": {
        "title": "Custom icons",
        "text": "Feeling the need to change icons for arrows? We have 4 props to enable full customization of `va-pagination` component."
      },
      "limitVisible": {
        "title": "Limiting the length",
        "text": "By using `visible-pages` prop you can set the amount of pages visible on screen."
      },
      "withInput": {
        "title": "Using HTML input instead of pages",
        "text": "With `input` prop you can have input with arrow buttons instead of default pagination."
      },
      "totalAndPageSize": {
        "title": "Using `total` and `page-size`",
        "text": "You can provide `total` and `page-size` props to `va-pagination` component and let it calculate the length of pagination itself. The value of the component in this case would be equal to the number of the first item at the selected page."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "What will happen if both `pages` and `total` props are set?",
          "answer": "The error will be thrown into the console. Component is meant to be used only in one of these modes."
        },
        {
          "question": "Can I use `total` and `input` props together?",
          "answer": "Yep. In v-model you'll get item number instead of page number."
        }
      ]
    }
  },
  "tabs": {
    "title": "Tabs",
    "summaryText": "The `va-tabs` component can be used as an on-page navigation offering with a rich variety of visual customizations and usage flexibility.",
    "examples": {
      "default": {
        "title": "Default usage",
        "text": "By default it's displayed as a horizontal list of `va-tab` items"
      },
      "pagination": {
        "title": "With pagination arrows",
        "text": "When wrapper width is less then tabs width, pagination arrows are shown"
      },
      "vertical": {
        "title": "Vertical alignment",
        "text": "By using `vertical` prop alignment of `va-tabs` can be customized"
      },
      "stateful": {
        "title": "Without value",
        "text": "Sometimes `v-model` is too much and in that case using `stateful` prop you can delegate state handling to the component itself"
      },
      "color": {
        "title": "Color",
        "text": "Set different colors using the `color` prop. You can either use a theme string or the HEX color value. Inactive tabs have `inherit` color. If you need to change inactive tabs color, you can set color for va-tabs using CSS."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "How can I map content to tabs so that only specific tab content will be displayed?",
          "answer": "We have this functionality in our nearest plans, but for now you could use `v-model` value to map the content yourself"
        }
      ]
    }
  },
  "fileUpload": {
    "title": "File Upload",
    "summaryText": "The `va-file-upload` component is an input for selecting and uploading files with a richer interface than the default one.",
    "examples": {
      "default": {
        "title": "Default usage",
        "text": "By default it’s displayed as a simple button to upload files."
      },
      "dragAndDrop": {
        "title": "Drag & Drop",
        "text": "The `dropzone` prop is used to add drag and drop possibility to the `va-file-upload` component"
      },
      "validation": {
        "title": "Specify file types",
        "text": "Add `file-types` prop with allowed extensions to add file types validation"
      },
      "gallery": {
        "title": "As gallery",
        "text": "With `type === gallery` prop you can show user picture preview of uploaded files"
      }
    }
  },
  "divider": {
    "title": "Divider",
    "summaryText": "The `va-divider` component is used to separate sections of lists or layouts.",
    "examples": {
      "default": {
        "title": "Simple divider",
        "text": "Dividers in their simplest form display a horizontal line."
      },
      "customContent": {
        "title": "Custom content",
        "text": "You can customize the content on the divider line. Also you can set position of the content by setting the `orientation` property to `left`, `center` or `right`."
      },
      "inset": {
        "title": "Inset divider",
        "text": "Add the `inset` attribute in order to set whether or not the divider is an inset divider."
      },
      "vertical": {
        "title": "Vertical divider",
        "text": "Add the `vertical` attribute in order to set whether or not the divider is vertically-oriented."
      },
      "dashed": {
        "title": "Dashed divider",
        "text": "Add the `dashed` attribute in order to set whether or not the divider line is dashed."
      },
      "withList": {
        "title": "Divider with lists",
        "text": "Dividers perfectly work with `va-list`."
      }
    }
  },
  "form": {
    "title": "Form",
    "summaryText": "Need more advanced validation than just `type=\"email\"` over your input elements? **`va-form`** has a solution to offer.",
    "examples": {
      "default": {
        "title": "Default usage",
        "text": "All elements have `rules` prop which offers flexible solutions when it comes to elements validation. By using this prop you’ll be able to specify exact cases when the field is *valid* or *invalid*."
      },
      "advanced": {
        "title": "Trigger validation",
        "text": "You can trigger validation from a parent component by using the `validate()` method of the `va-form` component."
      }
    }
  },
  "hover": {
    "title": "Hover",
    "summaryText": "The `va-hover` component provides easy access to hover states for any component. To work with hover states you can use either `v-model` or slot-scoped `hover` property.",
    "examples": {
      "slot": {
        "title": "Slot based access",
        "text": "You are also free to use Vue default slot."
      },
      "vModel": {
        "title": "Default usage",
        "text": "You can use `v-model` to get access to hover state."
      },
      "disabled": {
        "title": "Disabled",
        "text": "Won't change value if disabled."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "Can I wrap multiple elements with `va-hover`?",
          "answer": "Yes, but they will share the hover state value."
        }
      ]
    }
  },
  "card": {
    "title": "Card",
    "summaryText": "The `va-card` is a multipurpose representative component that can be used for anything from links to articles. It has some helper components to make markup easier.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "This is default `va-card` implementation using `va-card-title`, `va-card-content` and `va-card-actions` helper components."
      },
      "tag": {
        "title": "Tag",
        "text": "Changed tag to `<b>`"
      },
      "borderAndShape": {
        "title": "Border, shadow and shape"
      },
      "disabled": {
        "title": "Disabled"
      },
      "link": {
        "title": "Card as link"
      },
      "stripe": {
        "title": "Stripe"
      },
      "colorAndGradient": {
        "title": "Color and gradient"
      },
      "image": {
        "title": "Image"
      },
      "actions": {
        "title": "Actions",
        "purpose": "The `VaCardActions` component is designed to apply margins and alignment to content (`VaButtons` expected).",
        "props": "Two properties can be passed: `align` (**string**, specify how to align actions) and `vertical` (**boolean**, display actions one below the other).",
        "values": "Valid values for `align`: left, center, right, between, around, stretch."
      }
    },
    "faq": {
      "questions": [
        {
          "question": "Can I use `va-card` without helper components?",
          "answer": "Yes, if you don't like our styling preset, you are free to use your own."
        },
        {
          "question": "Should I manually set tag if i use link attributes?",
          "answer": "No, we will do it for you. If tag is not set, but `href` is, component tag will be `<a>`, if any of router-link prop is set, it will be `<router-link>`."
        }
      ]
    }
  },
  "sidebar": {
    "title": "Sidebar",
    "summaryText": "`va-sidebar` is a column to store navigation or secondary information of your app.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Default usage of `va-sidebar`"
      },
      "minimized": {
        "title": "Minimized",
        "text": "You can minimize sidebar using `minimized` prop"
      },
      "hoverable": {
        "title": "Hoverable",
        "text": "Manage your sidebar state using `hoverable` prop. It allows to expand 'va-sidebar' on hover."
      },
      "position": {
        "title": "Position",
        "text": "Align `va-sidebar` to the left or right."
      },
      "width": {
        "title": "Width",
        "text": "Define custom width of sidebar in maximixed state."
      },
      "vModel": {
        "title": "V-model",
        "text": "Use v-model to enable/disable `va-sidebar`."
      },
      "minimizedWidth": {
        "title": "Minimized width",
        "text": "Width of `va-sidebar` when minimized."
      },
      "color": {
        "title": "Color",
        "text": "Change background color of a sidebar."
      },
      "gradient": {
        "title": "Gradient background",
        "text": "You can make Navbar background gradient"
      }
    },
    "faq": {
      "questions": [
        {
          "question": "What if `minimized` conflicts with `hoverable`?",
          "answer": "No conflict there, `minimized` has higher priority. If it's `true`, hover will not expand sidebar."
        }
      ]
    }
  },
  "sidebarItem": {
    "title": "Sidebar item",
    "summaryText": "Used as link in your `VaSidebar`.",
    "examples": {
      "simple": {
        "title": "Simple usage example",
        "text": "`VaSidebarItem` is used with `VaSidebarContent` (to create paddings) and `VaSidebarTitle` (to fill all remaining width in `VaSidebarItem`)"
      },
      "colors": {
        "title": "Colors",
        "text": "You can change sidebar default colors"
      },
      "active": {
        "title": "Highlight active `VaSidebarItem`",
        "text": "It is possible to have multiple `VaSidebarItem` highlighted. You can choose your own way to highlight an active item. Even if you want to activate a few `VaSidebarItems`."
      },
      "icons": {
        "title": "`VaSidebarTitle` and VaIcons",
        "text": "`VaSidebarTitle` used to fill all remaining free space in `VaSidebarItem`. We can also add any other components (like `VaIcon`, `VaChip` or `VaButton`)."
      },
      "components": {
        "title": "Advanced case with `VaAccordion`",
        "text": "`VaSidebarItem` can be used with `VaAccordion` and `VaCollapses`."
      }
    }
  },
  "image": {
    "title": "Image",
    "summaryText": "The `va-image` component is used to display responsive images. It has some features to make your work with images easier.",
    "examples": {
      "default": {
        "title": "Default"
      },
      "contain": {
        "title": "Contain",
        "text": "It is used to show a full image while ignoring its original ratio and size."
      },
      "ratio": {
        "title": "Ratio",
        "text": "Change image original ratio, show part of image to fit new ratio."
      },
      "defaultSlot": {
        "title": "Default slot",
        "text": "Always shown by default."
      },
      "loaderSlot": {
        "title": "Loader slot",
        "text": "Is visible when image is loading."
      },
      "errorSlot": {
        "title": "Error slot",
        "text": "Is visible when `src` path is incorrect."
      }
    }
  },
  "optionList": {
    "title": "Option List",
    "summaryText": "The `va-option-list` component is a component to be used to group form inputs (like checkboxes and radio buttons) into a list for better control over the data.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "By default `va-option-list` will render list of checkboxes provided by `options` prop"
      },
      "withRadio": {
        "title": "Radio",
        "text": "Set `type=\"radio\"` to display list radio buttons"
      },
      "withSwitch": {
        "title": "Switch",
        "text": "Set `type=\"switch\"` to display list switches"
      },
      "withComplexData": {
        "title": "Array of objects",
        "text": "Instead of array of strings you can provide array of objects and specify which key is for each setting."
      }
    }
  },
  "checkbox": {
    "title": "Checkbox",
    "summaryText": "Checkboxes allow the user to select multiple options from a set.",
    "examples": {
      "default": {
        "title": "Standard",
        "text": "Perfectly works with `v-model` by default."
      },
      "label": {
        "title": "Label",
        "text": "You can add a label text by setting the `label` property. You can also set the `left-label` property to move your label on the left side of a checkbox."
      },
      "indeterminate": {
        "title": "Indeterminate"
      },
      "coloring": {
        "title": "Coloring"
      },
      "array": {
        "title": "Grouped (Array)",
        "text": "Just add the same `v-model` to multiple checkboxes, and set the `array-value` prop."
      },
      "error": {
        "title": "Errors",
        "text": "You can show your error messages while using `va-checkbox` with form."
      }
    }
  },
  "progressBar": {
    "title": "Progress Bar",
    "summaryText": "The `va-progress-bar` component is used to display an indicator of an app loading content. Also check the [va-progress-circle](/ui-elements/progress-circle) component.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "By default, the `va-progress-bar` displays a horizontal progress bar. Use the `value` prop to control the progress."
      },
      "indeterminate": {
        "title": "Indeterminate",
        "text": "Use the `indeterminate` prop so that the `va-progress-bar` continuously animates."
      },
      "coloring": {
        "title": "Coloring",
        "text": "Use predefined colors or use your own with the `color` prop."
      },
      "sizing": {
        "title": "Sizing",
        "text": "Use predefined sizes or use your own with the `size` prop."
      },
      "slots": {
        "title": "Slots",
        "text": "There is also the default `slot` if you want to display some additional info about the progress."
      },
      "buffer": {
        "title": "Buffer",
        "text": "When dealing with media content like streaming videos we can use progress bars to show the buffering progress indicator on a video."
      }
    }
  },
  "progressCircle": {
    "title": "Progress Circle",
    "summaryText": "The `va-progress-circle` component is used to display an indicator of an app loading content. Also check the [va-progress-bar](/ui-elements/progress-bar) component.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "By default, the `va-progress-circle` displays a circular progress bar. Use the `value` prop to control the progress."
      },
      "indeterminate": {
        "title": "Indeterminate",
        "text": "Use the `indeterminate` prop so that the `va-progress-circle` continuously animates."
      },
      "coloring": {
        "title": "Coloring",
        "text": "Use predefined colors or use your own with the `color` prop."
      },
      "sizing": {
        "title": "Sizing",
        "text": "Use predefined sizes or use your own with the `size` prop."
      },
      "slots": {
        "title": "Slots",
        "text": "There is also the default `slot` if you want to display some additional info about the progress."
      },
      "thickness": {
        "title": "Thickness",
        "text": "Use the `thickness` prop to adjust the stroke size."
      }
    }
  },
  "infiniteScroll": {
    "title": "Inifinite Scroll",
    "summaryText": "The `va-infinite-scroll` component is a wrapper component which is intended to be used to create lists with dynamically added content. It provides rich interface to customize scrolling behavior and much more.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Just wrap your content in `va-infinite-scroll` component and provide `load` callback, and you'll see it's called each time list is scrolled till the bottom."
      },
      "reverse": {
        "title": "Reverse",
        "text": "With `reverse` prop you can prepend content to your list. Might be useful in messenger windows."
      },
      "disabled": {
        "title": "Disabled",
        "text": "In case you need to prevent a list from loading more content, `disabled` prop is here for you."
      },
      "customTarget": {
        "title": "Custom scroll target container",
        "text": "Provide either DOM element or CSS Selector to be used instead of default scroll container. "
      }
    }
  },
  "input": {
    "title": "Input",
    "summaryText": "The `va-input` component is intended to be used instead of the standard HTMl input or textarea.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default `va-input` doesn’t have attributes, but can be combined with a placeholder and/or label. It can also be disabled or readonly."
      },
      "hint": {
        "title": "Hint messages",
        "text": "Support single/multi line messages to give some hint for improve UX"
      },
      "validate": {
        "title": "Validation and error/success state",
        "text": "Support a simple validation using the rules prop. The prop accepts an array of callbacks. While validating rules, the current v-model value will be passed to the callback. This callback should return either true or a String, the error message. Also you can manually pass error/success prop to manage input state."
      },
      "slots": {
        "title": "Slots",
        "text": "You can use slots for pass custom elements to input (inner or outer), such as icons or buttons etc."
      },
      "textarea": {
        "title": "Textarea",
        "text": "Support a multi-line `va-input`, useful for larger amounts of text. You can make textarea auto-expandable or manually control min/max number of lines."
      },
      "mask": {
        "title": "Mask",
        "text": "Support possibility to force/help the user to input a specific format with help from mask prop. You can pass some mask presets or custom options based on [cleave.js](https://nosir.github.io/cleave.js/)[[target=_blank]]. By default returning a raw value."
      },
      "styles": {
        "title": "Styles",
        "text": "There are tree styles for input: Default (solid), outline, bordered."
      }
    }
  },
  "alert": {
    "title": "Alert",
    "summaryText": "Alert displays an important message to attract user attention.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "The basic usage of the `va-alert` component."
      },
      "color": {
        "title": "Color",
        "text": "Use `color` property to change the color of the component."
      },
      "styles": {
        "title": "Different styles",
        "text": "We have 3 styles available: `color`, `outlined` and `border` styled alerts."
      },
      "border": {
        "title": "Border",
        "text": "Use the `border` property to add a strip and the `border-color` property to change the color of the strip."
      },
      "title": {
        "title": "Title",
        "text": "The `title` property allows you to write text over the description area. Use the `title` slot to costomize the title area."
      },
      "dense": {
        "title": "Dense",
        "text": "The `dense` property reduces paddings on alert."
      },
      "icon": {
        "title": "Icon",
        "text": "The `icon` property allows you to add an icon in front of the description area. Use the `icon` slot to costomize the icon area."
      },
      "closeable": {
        "title": "Closeable",
        "text": "The `closeable` property add a close alert area. Also you can pass `close-text` prop to make close icon as plain text."
      },
      "center": {
        "title": "Center",
        "text": "The `center` property allows you to center title and description areas."
      }
    }
  },
  "icon": {
    "title": "Icon",
    "summaryText": "The `va-icon` component allows you to use different icon fonts. By default Vuestic UI provides [Material Icons](https://fonts.google.com/icons)[[target=_blank]].",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Basic usage of the component with different icon fonts."
      },
      "color": {
        "title": "Color",
        "text": "Set different colors using the `color` prop. You can either use a theme string or the HEX color value."
      },
      "size": {
        "title": "Size",
        "text": "Apply the `size` prop in order to make `va-icon` fit your needs."
      },
      "rotation": {
        "title": "Rotation",
        "text": "It is used to rotate the `va-icon` component."
      },
      "spin": {
        "title": "Spin",
        "text": "You can add animation of rotation of the icon using the property `spin`."
      },
      "text": {
        "title": "Text as icon",
        "text": "Using `text` prop is used to cover the text icon style."
      },
      "tag": {
        "title": "Custom tag",
        "text": "With the `tag` prop you can attach the icon to another tag."
      }
    }
  },
  "radio": {
    "title": "Radio",
    "summaryText": "The `va-radio` allows the user to select one option from a set.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Default usage  of the `va-radio` component."
      },
      "color": {
        "title": "Colors",
        "text": "With `color` prop you can change the color of the component."
      },
      "customLabels": {
        "title": "Custom Labels",
        "text": "You can add a label text by setting the `label` property. To switch label side use `left-label` property."
      },
      "disabled": {
        "title": "Disabled",
        "text": "With `disabled` prop you can disable a user interaction  with `va-radio` component."
      }
    }
  },
  "collapse": {
    "title": "Collapse",
    "summaryText": "Toggles the visibility of content.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Default usage  of the `va-collapse` component."
      },
      "solid": {
        "title": "Solid",
        "text": "Add borders to your collapse component by using the `solid` property."
      },
      "icon": {
        "title": "Icon",
        "text": "You can add an icon to the header."
      },
      "color": {
        "title": "Color",
        "text": "Use two color schemes."
      }
    }
  },
  "accordion": {
    "title": "Accordion",
    "summaryText": "Allows you to control group of [collapses](ui-elements/collapse).",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Default usage  of the `va-accordion` component."
      },
      "multiply": {
        "title": "Multiply",
        "text": "Accordion component allows you to select multiply collapses."
      },
      "inset": {
        "title": "Inset",
        "text": "Active collapse component becomes smaller."
      },
      "popout": {
        "title": "Popout",
        "text": "Active collapse component becomes bigger."
      }
    }
  },
  "chip": {
    "title": "Chip",
    "summaryText": "Chip - it is a compact element for displaying data or performing an action.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "Default usage of the `va-chip` component."
      },
      "outline": {
        "title": "Outline",
        "text": "Outline style without background."
      },
      "flat": {
        "title": "Flat",
        "text": "Flat style without borders and background."
      },
      "square": {
        "title": "Square",
        "text": "Makes your `va-chip` square."
      },
      "color": {
        "title": "Color",
        "text": "You can use the `va-chip` component with different colors."
      },
      "size": {
        "title": "Size",
        "text": "Set different tag sizes using size presets."
      },
      "icon": {
        "title": "Icon",
        "text": "You can use icons in tag."
      },
      "closeable": {
        "title": "Closeable",
        "text": "A tag can be closed by applying the `closeable` property."
      },
      "link": {
        "title": "Link",
        "text": "It makes your tag clickable."
      },
      "shadow": {
        "title": "Shadow",
        "text": "You can set a shadow."
      }
    }
  },
  "grid": {
    "title": "Grid System",
    "summaryText": "Vuestic UI provides you with some flexbox helper classes. Of course, you can opt out using CSS Grid instead (or any other layout-scheme you'd like), but if you prefer using flexbox, we've got you covered. Still, the final decision is totally up to you.",
    "examples": {
      "default": {
        "title": "Enabling flexbox"
      },
      "breakpoints": {
        "title": "Breakpoints",
        "text": "Use the following classes (`breakpoints`) to apply provided styling to screens of certain widths exclusively.",
        "sizes": {
          "xs": "`.xs` - (< 576px ) - Extra small devices",
          "sm": "`.sm` - (≥ 576px ) - Small devices",
          "md": "`.md` - (≥ 768px ) - Medium devices",
          "lg": "`.lg` - (≥ 992px ) - Large devices",
          "xl": "`.xl` - (≥ 1200px) - Extra large devices"
        }
      },
      "offsets": {
        "title": "Offsets",
        "text": "You can use the `offset`-classes to set spaces between a given element and the one to the left from it.",
        "sizes": {
          "xs": "`.offset--xs` - Extra small devices",
          "sm": "`.offset--sm` - Small devices",
          "md": "`.offset--md` - Medium devices",
          "lg": "`.offset--lg` - Large devices",
          "xl": "`.offset--xl` - Extra large devices"
        }
      },
      "gutters": {
        "title": "Gutters",
        "text": "Set the margins between the \"`cell`s\" of you flex-container with the `gutter` classes.",
        "sizes": {
          "xs": "`.gutter--xs` - Extra small gutter between cells",
          "sm": "`.gutter--sm` - Small gutter between cells",
          "md": "`.gutter--md` - Default gutter between cells",
          "lg": "`.gutter--lg` - Large gutter between cells",
          "xl": "`.gutter--xl` - Extra large gutter between cells"
        }
      }
    },
    "api": {
      "align": {
        "title": "`align`:",
        "variants": [
          "`.align--start` - cross-start margin edge of the items is placed on the cross-start line",
          "`.align--end` - cross-end margin edge of the items is placed on the cross-end line",
          "`.align--center` - items are centered in the cross-axis",
          "`.align--baseline` - items are aligned the way their baselines align"
        ]
      },
      "alignSelf": {
        "title": "`align-self`:",
        "variants": [
          "`.align-self--start` - cross-start margin edge of the items is placed on the cross-start line",
          "`.align-self--end` - cross-end margin edge of the items is placed on the cross-end line",
          "`.align-self--center` - items are centered in the cross-axis",
          "`.align-self--baseline` - items are aligned the way their baselines align"
        ]
      },
      "alignContent": {
        "title": "`align-content`:",
        "variants": [
          "`.align-content--start` - lines packed to the start of the container",
          "`.align-content--end` - lines packed to the end of the container",
          "`.align-content--center` - lines packed to the center of the container",
          "`.align-content--space-between` - lines evenly distributed; the first line is at the start of the container while the last one is at the end",
          "`.align-content--space-around` - lines evenly distributed with equal space between them"
        ]
      },
      "justify": {
        "title": "`justify`:",
        "variants": [
          "`.justify--start` - items are packed toward the start line",
          "`.justify--end` - items are packed toward to end line",
          "`.justify--center` - items are centered along the line",
          "`.justify--space-around` - items are evenly distributed in the line with equal space around them",
          "`.justify--space-between` - items are evenly distributed in the line; first item is on the start line, last item is on the end line"
        ]
      },
      "justifySelf": {
        "title": "`justify-self`:",
        "variants": [
          "`.justify-self--start` - The item is packed flush to each other toward the start edge of the alignment container in the appropriate axis.",
          "`.justify-self--end` - The item is packed flush to each other toward the end edge of the alignment container in the appropriate axis.",
          "`.justify-self--center` - For items that are not children of a flex container, this value is treated as `.justify-self--start`.",
          "`.justify-self--baseline` - The items are aligned according to baselines"
        ]
      }
    }
  },
  "list": {
    "title": "List",
    "summaryText": "The `va-list` component is used to display structured information.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "Has no attributes by default. Build a structure by using components `va-list-label`, `va-list-separator`, `va-list-item` and etc."
      },
      "disabled": {
        "title": "Disabled",
        "text": "You can disable any user interaction by using 'disabled' prop."
      },
      "clickable": {
        "title": "Clickable",
        "text": "Support a ability to use a list item as a link."
      },
      "fit": {
        "title": "Fit",
        "text": "Support a fitting of the list item by its content length."
      },
      "lines": {
        "title": "Lines",
        "text": "You can divide item label content on a custom count of lines."
      }
    },
    "api": {
      "list": {
        "text": "API for `va-list` component."
      },
      "listLabel": {
        "title": "List Label API",
        "text": "API for `va-list-label` component."
      },
      "listSeparator": {
        "title": "List Separator API",
        "text": "API for `va-list-separator` component."
      },
      "listItem": {
        "title": "List Item API",
        "text": "API for `va-list-item` component."
      },
      "listItemLabel": {
        "title": "List Item Label API",
        "text": "API for `va-list-item-label` component."
      },
      "listItemSection": {
        "title": "List Item Section API",
        "text": "API for `va-list-item-section` component."
      }
    }
  },
  "select": {
    "title": "Select",
    "summaryText": "Select field components are used for collecting user provided information from a list of options. This component opens up a menu for the selection list and action.",
    "examples": {
      "default": "Default select",
      "variations": {
        "title": "Variants",
        "text": "Includes single or multiple selects."
      },
      "decorators": {
        "title": "Decorators"
      },
      "objectOptions": {
        "title": "Objects as options"
      },
      "trackBy": {
        "title": "Track by",
        "text": "Track by can be used if you have multiple options with same value."
      },
      "slots": {
        "title": "Slots",
        "text": "Includes prepend, prepend-inner, append and append-inner slots"
      },
      "state": {
        "title": "State",
        "text": "Includes error, success, disabled or loading state"
      },
      "chips": {
        "title": "Chips",
        "text": "Includes selection display as chips and maximum chips count"
      },
      "searchable": {
        "title": "Searchable",
        "text": "Supports ability to filter option list by typing"
      },
      "allowCreate": {
        "title": "Allow create",
        "text": "You can add options that initial options do not have"
      },
      "validation": {
        "title": "Validation rules",
        "text": "Select accepts an array of functions that take an input value as an argument and return either true / false or a string with an error message"
      },
      "keyboardNavigation": {
        "title": "Keyboard navigation",
        "moves": "By using `ARROW DOWN` and `ARROW UP` you can move between options",
        "selects": "By using `ENTER` and `SPACE` you can select current option",
        "hints": "If you type while option list is opened this will create a search buffer (will reset if you do not type for 1 second) that will be used to search in the options labels"
      },
      "styles": {
        "title": "Styles",
        "text": "Select styles inherit from input styles"
      }
    }
  },
  "parallax": {
    "title": "Parallax",
    "summaryText": "Parallax (`va-parallax`) is a component where the background image is moved at a different speed than the foreground content while scrolling.",
    "examples": {
      "default": {
        "title": "Default",
        "text": "A block with a background image is displayed by default. You need to pass the `src` property."
      },
      "custom": {
        "title": "Custom height and speed",
        "text": "You can adjust parallax `height` and scroll `speed`. Attention, the scrolling speed depends on the ratio of the parallax height to the image height."
      },
      "reversed": {
        "title": "Reversed",
        "text": "You can flip the parallax scrolling."
      },
      "slot": {
        "title": "Slot",
        "text": "You can provide some kind of content over the parallax."
      }
    }
  },
  "backtop": {
    "title": "Backtop",
    "summaryText": "The backtop button is used to return to the top of a component.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default `va-backtop` watches for a body element offset height. You can change a target element, positioning and scrolling speed."
      }
    }
  },
  "reset": {
    "title": "CSS Reset",
    "description": "We use `reset.scss` to reset and normalize basic CSS styles",
    "features": {
      "title": "Reset features",
      "info": "Below is a list of features that are provided by reset.scss:",
      "list": "* Margin and padding reset. \n * Border reset. \n * Hide quotes. \n * Font reset. \n * Hidden-attribute fix for newer browsers. \n * HTML5 display-role reset for older browsers",
      "more": "For a complete list of all applied styles, see the [reset.scss](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/styles/global/reset.scss)[[target=_blank]] stylesheet."
    }
  },
  "colorInput": {
    "title": "Color Input",
    "summaryText": "Input component that allows you to select a color.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default use this component with `v-model`."
      },
      "disabled": {
        "title": "Disabled",
        "text": "All user interactions can be disabled."
      }
    }
  },
  "colorPalette": {
    "title": "Color Palette",
    "summaryText": "Palette component for color pick.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default use this component with `v-model` and palette array."
      },
      "indicator": {
        "title": "Indicator",
        "text": "You can apply different styles to the indicator: `dot` and `square` are available. "
      }
    }
  },
  "datePicker": {
    "title": "Date Picker",
    "description": "Date picker component allows user to select single, multiple or range of dates, months and years. You can customize it the way you want. There is a option to change all string and formats.\n\nIt based on native js dates so you can use this Date Picker with any date library you want.",
    "lookAtDateInput": "Also, look at Date Input",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default, use this component with v-model."
      },
      "mode": {
        "title": "Mode",
        "text": "You can use date picker in three different ways. By default date picker uses `auto` mode. This means that `mode` will be chosen based on `modelValue`. There is three modes: `single`, `multiple` and `range`. Different modes require different model values."
      },
      "stateful": {
        "title": "Stateful",
        "text": "Date picker can be stateful. Initial value will be undefined, but user can change it."
      },
      "firstWeekday": {
        "title": "First day of the week",
        "text": "If you want to always use Monday as the first day of the week, you can set this prop in GlobalConfig."
      },
      "weekends": {
        "title": "Weekends",
        "text": "You can highlight weekends using `highlight-weekends` prop. Also, you can set your own weekends using `weekends` function."
      },
      "otherMonths": {
        "title": "Other month days",
        "text": "You can show days of other months using `show-other-months` prop instead of blank cells in calendar."
      },
      "slots": {
        "title": "Slots",
        "text": "For now, we don't support localization using one prop. But you have opportunity to localize it by yourself using slots."
      },
      "view": {
        "title": "View",
        "text": "You can set specific view for date picker. With `view` prop you can define how date picker will displayed, year and month that will be shown."
      },
      "type": {
        "title": "Type",
        "text": "If you want allow user to pick only month or year, you can make it using `type` prop."
      },
      "disabledDates": {
        "title": "Disable dates",
        "text": "You can disable some specific days, month or year using `allowedDays`, `allowedMonth` or `allowedYear` props."
      },
      "colors": {
        "title": "Colors",
        "text": "You can change colors using CSS variables for deeper customization, but also you can simple change colors using props."
      },
      "readonly": {
        "title": "Readonly",
        "text": "Readonly picker for readonly forms."
      },
      "disabled": {
        "title": "Disabled",
        "text": "Disabled picker that can be used in forms."
      }
    }
  },
  "dateInput": {
    "title": "Date Input",
    "description": "Date Input component is a combination of Date Picker and Input components. You can find usage examples using following links:",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": ""
      },
      "resetOnClose": {
        "title": "Reset on close",
        "text": "There is a prop `resetOnClose` for range mode. If user selected incomplete range and closed dropdown, then used last complete value."
      },
      "isOpen": {
        "title": "IsOpen",
        "text": "IsOpen prop allows you to force show dropdown as opened."
      },
      "formatting": {
        "title": "Formatting",
        "text": "You can pass the format function to VaDateInput which will format input text like you want to. This way you can use any format that you want. For example, you can use [date-fns](https://date-fns.org/v2.23.0/docs/format)[[target=_blank]]."
      },
      "input": {
        "title": "Input date",
        "text": "You can allow user to input text from keyboard. You need to set readonly prop as true. You can pass the parse function to VaDateInput which will parse input text like you want to. This way you can use any format that you want. For example, you can use [date-fns](https://date-fns.org/v2.23.0/docs/format)[[target=_blank]] to parse date string. By default we parse this input using standard `Date.parse` method."
      },
      "inputProps": {
        "title": "Input props",
        "text": "You can pass properties to `VaDateInput`"
      },
      "advancedFormatting": {
        "title": "Advanced formatting",
        "text": "If you need specific format for multiple or range modes you can use."
      },
      "formattingGlobalConfig": {
        "text": "You can easily use your format functions for all VaDateInputs using [Global Config](/services/components-config) feature."
      }
    }
  },
  "buttonGroup": {
    "title": "Button Group",
    "summaryText": "It is a special component that wraps buttons and applies special styles to them.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default, you need to wrap your buttons with a `va-button-group` component."
      },
      "colors": {
        "title": "Colors",
        "text": "Component provides color to each child button."
      },
      "gradient": {
        "title": "Gradient",
        "text": "It’s used to apply a gradient style to a background."
      },
      "sizes": {
        "title": "Sizes",
        "text": "You can set different sizes."
      },
      "styles": {
        "title": "Styles",
        "text": "You can set button styles."
      },
      "icons": {
        "title": "Icons",
        "text": "Looks good with icons provided to buttons."
      }
    }
  },
  "buttonToggle": {
    "title": "Button Toggle",
    "summaryText": "The button is used to switch between different values.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default, an object with parameters and a v-model is to be passed."
      },
      "colors": {
        "title": "Colors",
        "text": "Applies color presets and HEX colors."
      },
      "toggleColor": {
        "title": "Toggler color",
        "text": "Use `toggle-color` prop to set the color of the active button."
      },
      "gradient": {
        "title": "Gradient",
        "text": "Applies gradient style to background."
      },
      "sizes": {
        "title": "Sizes",
        "text": "You can provide size presets to the component."
      },
      "styles": {
        "title": "Styles",
        "text": "You can set button styles to the component."
      },
      "disabled": {
        "title": "Disabled",
        "text": "The component can be disabled."
      }
    }
  },
  "appBar": {
    "title": "App bar",
    "summaryText": "The app bar component is a part of a website’s navigation and it’s an alternative to the header element in apps.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default, a `va-app-bar` needs a parent element with relative position."
      },
      "color": {
        "title": "Color",
        "text": "You can set a background color and gradient of the component with `color` and `gradient` props."
      },
      "bottom": {
        "title": "Bottom",
        "text": "You can make app bar sit at the bottom of the screen with `bottom` prop."
      },
      "hide": {
        "title": "Hide",
        "text": "`hide-on-scroll` allows you to hide app bar when you scroll away. You need to define `target`."
      },
      "shadow": {
        "title": "Shadow",
        "text": "You can set a shadow with `shadow-on-scroll` prop. You need to define `target`."
      }
    }
  },
  "innerLoading": {
    "title": "Inner Loading",
    "summaryText": "You can handle the loading state of the wrapped component by using the `va-inner-loading` component.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default wrap a component in `va-inner-loading` with a `loading` property."
      },
      "color": {
        "title": "Color",
        "text": "You can change the color of the icon."
      },
      "size": {
        "title": "Size",
        "text": "Supports the ability to resize the icon."
      },
      "icon": {
        "title": "Icon",
        "text": "You can change the loading icon."
      }
    }
  },
  "installation": {
    "title": "Installation",
    "description": "You can create a new project or integrate Vuestic UI into an existing application. The installation process is mostly the same for both cases: you can either *install Vuestic UI manually* or use specifically designed *Vue CLI plugin*. Both ways provide you with a **full tree-shaking support**. Choose the one that fits your needs the most.",
    "fonts": {
      "title": "Assets installation",
      "description": "By default Vuestic UI uses `Source Sans Pro` and `Material Icons` fonts. You should manually add them into your project. In order to do so you can either:",
      "htmlExampleTitle": "include fonts directly in your `index.html`'s `<head>` element",
      "cssExampleTitle": "or include them in your CSS"
    },
    "quickStart": {
      "title": "Modify your application's entry point",
      "description": "Import both the styles and the plugin into your entry file. The plugin is used to automatically register all the components, directives and other stuff globally. If you don't want to register everything globally then check out the tree-shaking section below."
    },
    "cli": {
      "title": "Vue CLI installation",
      "description": "Another way to install Vuestic UI is using the Vue CLI plugin.",
      "attention": "Installing Vuestic UI via the plugin would modify your `package.json` and `main.(js`&#124;`ts)` files, so make sure you’ve committed your code before proceeding to avoid data loss.",
      "prepare": "First, make sure you've got [Vue CLI](https://cli.vuejs.org/guide/installation.html)[[target=_blank]] installed globally:",
      "upgrade": "Notice also that the minimum supported version of Vue CLI is v4.0.0. In case you've got an older version installed, please, consider [upgrading](https://cli.vuejs.org/migrating-from-v3/#migrating-from-v3)[[target=_blank]] it.",
      "codeAnnotation": "If everything's fine then you can finally install the plugin with the following command (**don't forget to commit**):"
    },
    "codesandbox": {
      "title": "CodeSandbox",
      "button": "Try Vuestic-UI on CodeSandbox"
    },
    "treeShaking": {
      "title": "Tree shaking",
      "description": "If you plan to use only several components in your application and thus reduce the size of your bundle, you can use the Vuestic ESM build. Webpack (vue-cli) and Vite do that automatically.",
      "example": {
        "title": "First, you don't need to use `VuesticPlugin` since it registers all the `vuestic` components globally. Instead, you can import specific components from the `vuestic-ui` package.",
        "footer": "Alternatively, you can import them directly in your `.vue` files."
      },
      "plugins": {
        "title": "In such a case you'd also have to register Vuestic plugins by yourself. We recommend to use all of them:",
        "GlobalConfigPlugin": "GlobalConfigPlugin - used for `VaConfig` component and global props reassignment. [Read more](/services/global-config).",
        "ToastInstall": "ToastInstall - used by `VaToast` component.",
        "ColorHelpersPlugin": "ColorHelpersPlugin - used to create reactive CSS variables. Requires `GlobalConfigPlugin`. [Read more](/services/colors-config).",
        "DropdownPopperSubplugin": "DropdownPopperSubplugin - used by `VaDropdown` component.",
        "example": {
          "title": "All of these plugins are also available through the `VuesticPluginsWithoutComponents`:"
        }
      },
      "attention": {
        "cssLoader": "As all components' code is separated, you may need a CSS loader to load component-specific CSS.\nBut you probably already have one."
      }
    },
    "manual": {
      "title": "Manual installation",
      "subtitle": "If you decide to install Vuestic UI manually, all you need to do is to install a NPM package, a couple of other necessary assets (such as fonts and CSS styles) and slightly modify your application's entry point (most probably `index.js` or `main.js`, depending on your setup).",
      "prerequisites": "But first, make sure you've got all the following prerequisites installed:",
      "node": "[Node.js](https://nodejs.org/en/)[[target=_blank]] (>=v14.0.0)",
      "npm": "[npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)[[target=_blank]] (>=v3.0.0) (or [yarn](https://yarnpkg.com/lang/en/docs/install)[[target=_blank]] (>= v1.16.0)) and [Git](https://git-scm.com/)[[target=_blank]]",
      "afterCheck": "After checking the prerequisites, install Vuestic UI via npm or yarn:"
    }
  },
  "roadmap": {
    "title": "Vuestic UI Roadmap",
    "description": "Our team is constantly improving the existing code base and adding new features that help building applications even easier.",
    "inDevelopment": {
      "title": "In development",
      "description": "The following releases are currently being developed:"
    },
    "1-2": {
      "title": "v1.2",
      "description": "We're currently working on new components: `date-picker` and `data-table`"
    },
    "1-1": {
      "title": "v1.1",
      "description": "Bug fixes and SSR support (vite)."
    },
    "1-0": {
      "title": "v1.0",
      "description": "Starting point of vuestic-ui. Reworked and added multiple components, added proper documentation."
    },
    "0-1": {
      "title": "v0.1",
      "description": "Not even alpha, we've just split components from [vuestic-admin](https://github.com/epicmaxco/vuestic-admin)[[target=_blank]] into separate repository to simplify updates."
    },
    "released": {
      "title": "Released",
      "description": " Already released versions"
    },
    "longTimeSupport": {
      "title": "Long time support",
      "description": "The following versions have continued maintenance for backwards compatible fixes, major bugs, and security vulnerabilities."
    },
    "archive": {
      "title": "Archive",
      "description": "The following releases are old and unsupported minor and major versions:"
    }
  },
  "accessibilityGuide": {
    "title": "Accessibility",
    "description": "Vuestic UI components support keyboard interactions for all mouse-based actions and utilize HTML5 semantic elements where applicable.",
    "keyboardInteractions": {
      "title": "Keyboard accessible",
      "description": "All the interactive elements on your page (e.g. text boxes, buttons, etc.) can be accessed with the keyboard. That means you should be able to focus them by using Tab and Shift+Tab keys."
    }
  },
  "configurationGuide": {
    "title": "Configuration",
    "description": "Vuestic UI comes with a convenient mechanism that allows for a deep icons, components, and colors customization.",
    "readMore": "More on this topic",
    "colors": {
      "title": "Color themes",
      "description": "You can easily modify the colors used by Vuestic UI components (and even add custom ones):"
    },
    "icons": {
      "title": "Icon fonts",
      "description": "By default Vuestic UI uses **material icons**, so make sure to install the package:",
      "subtitle": "Using custom icons",
      "subDescription": "With Icons Config you can use any icon font you'd like by simply transforming the icon names to respective props."
    },
    "components": {
      "title": "Components config",
      "intro": "If you want to set global defaults for Vuestic components — we've got a config for that either!",
      "description": "Let’s say you want all of your buttons to be `outline` and `small` to match your design, but by default that's not the case:",
      "action": "To solve that problem edit to `main.js` file the following way:",
      "result": "Now all of your buttons by default will look like this:",
      "example": "You can configure any prop for any Vuestic UI component in such a manner.",
      "more": "In case your customization runs deeper consider [overriding CSS variables](/styles/css-variables#overriding) or even directly the `.class`' properties (components use BEM-notation so it should be easy to figure out which selector to address with the help of standard dev-tooling)."
    }
  },
  "browserSupport": {
    "title": "Browser Support",
    "description": "We design Vuestic UI to be future proof. That's why we support modern browsers, but some old browsers, such as IE had to go, sorry. That decision was influenced by [dropped support in Vue 3](https://github.com/vuejs/rfcs/discussions/296)[[target=_blank]] and [falling usage rate](https://caniuse.com/usage-table)[[target=_blank]].",
    "table": {
      "browser": "Browser",
      "supported": "Supported"
    }
  },
  "overview": {
    "title": "What is Vuestic UI",
    "description": "We’ve designed the framework in such a way that it satisfies the most sophisticated design fantasies and allows you to implement them.",
    "featuresOverview": "Features overview",
    "vueThreeCompatible": "Fully **Vue.js 3 compatible**",
    "featureRich": "Contains a **50+ feature-rich components** that can be used in any design solution",
    "configurable": "Allows **to configure components** globally via config and CSS variables",
    "responsive": "Fully **responsive** and **supports modern browsers** (no IE11, sorry)",
    "translatable": "Integrates seamlessly with **i18n**"
  },
  "translation": {
    "title": "Translation",
    "description": "For the moment being we only provide translations for the main documentation pages (such as Contribution, Getting Started, etc.). The actual translation-strings could be found at `packages/docs/locales`. Currently there are no translations available for the components' docs. After you finish working on a translation for some page, please, do not forget to update its status to `full` in the `locales/index.ts` file. Here's the current languages-support state:",
    "table": {
      "language": "Language",
      "code": "Code",
      "supported": "Support"
    },
    "language": {
      "en": "English",
      "ru": "Russian",
      "es": "Spanish"
    },
    "status": {
      "part": "Partial support",
      "full": "Full support"
    },
    "sync": {
      "title": "Synchronizing locale files",
      "description": "You can sync the locale files with the following command (the source file is `en.json`):"
    },
    "unused": {
      "title": "Searching unused translations",
      "description": "You can search unused translations with the following command:"
    },
    "missed": {
      "title": "Searching missed translations",
      "description": "You can search missed translations with the following command:"
    }
  },
  "table": {
    "title": "Tables",
    "summaryText": "Feature-rich Data-Tables are currently under development. However, for now you can use plain `<table>`s with the `.va-table` class that would apply Vuestic-theme styles to them.",
    "otherTables": {
      "text": "If you want more functional solutions, use our data-table component or our theme for AG-Grid:",
      "dataTable": "Data Table",
      "agGrid": "AG Grid Theme"
    },
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "Add the `.va-table` class to the `<table>` element."
      },
      "hoverable": {
        "title": "Hoverable",
        "text": "Highlight hovered rows with additional `.va-table--hoverable` class."
      },
      "striped": {
        "title": "Striped",
        "text": "The `.va-table--striped` class colorizes each even row of the table."
      },
      "clickable": {
        "title": "Clickable",
        "text": "Change the cursor to `pointer` when hovering rows by adding the `.va-table--clickable` class"
      }
    }
  },
  "guide": {
    "title": "Contribution guide",
    "description": "This guide describes the possible ways in which you can become a part of the ongoing development of Vuestic UI. We are really excited that you are interested in helping us make Vuestic better!",
    "pullRequests": {
      "title": "Pull Request Guidelines",
      "description": {
        "localBranches": "The `master` branch keeps the latest stable release plus potentially some cherry-picked hotfixes. All the development should be conducted in local branches (fork of the project).",
        "dontSubmitToMaster": "**Do not submit PRs against the `master` branch.** Use the `develop` one instead.",
        "checkoutFeat": "Checkout a `feat/*` branch from the `develop`, then create a pull request to `develop`.",
        "multipleSmallCommits": "It's OK to have multiple small commits as you work on your PR - we will let GitHub automatically squash them into a single one before merging.",
        "fixBugSteps": "If fixing a bug:\n  * If you are resolving a certain issue, add `close #<xxx>[,#<yyy>]` (<xxx>, <yyy> is the related issues' ids) into the PR's description so that GitHub could [automatically close](https://docs.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword)[[target=_blank]] the related issue(s) as soon as the respective commits are merged into the `master` branch (i.e. as soon as a new version of Vuestic UI is out).\n  * Provide detailed description of the bug inside the PR in case the bug is not arranged in the form of a separate issue."
      }
    },
    "branches": {
      "title": "Branches",
      "publicBranches": "Public branches (**epicmax/vuestic-ui**):\n  * `master` - releases and hotfixes only. Do not submit PR's to `master`!\n  * `develop` - main development branch.",
      "localBranches": "Local branches\n  * For local branches prepend your messages with `feat/` (e.g. for a tabs-related fix it would be `feat/fix-tabs`). This is necessary to keep local branches visually separated from the public ones."
    },
    "fileNaming": {
      "title": "File naming",
      "camelCase": "`testIsContextableComponent.ts` - helpers and instants",
      "kebabCase": "`api-options.ts` - configs",
      "pascalCase": "`DocsCode.vue` - components, classes, types"
    },
    "forCoreContributors": {
      "title": "For the core contributors",
      "linkPr": "Always link a PR to its related issue (via `close #123`).",
      "assignYourself": "When you start working on a task - please self-assign the related issue. We don't want a lot of people working simultaneously on the same thing (except when intentional).",
      "smallIssues": "For small issues you may push to the `develop` branch directly while adding `close #123` to the commit message.",
      "singlePrPerIssue": "Create a single PR for one issue. If we have several PRs - move all the code into a single PR and close the rest. If one PR covers several issues - either split it in several PRs or mark one of the issues as duplicate.",
      "onePersonPerIssue": "Make sure to assign an issue to only a single person.",
      "checkYourCode": "Check your code: [conventions](https://github.com/epicmaxco/vuestic-ui/blob/master/packages/docs/conventions.md)[[target=_blank]].",
      "weUseYarn": "We use [yarn](https://yarnpkg.com/lang/en/)[[target=_blank]] for package management.",
      "beProactive": "Be proactive. If you think something is wrong - create an issue or discuss.",
      "recommendedTools": "Recommended tools: [GitKraken](https://www.gitkraken.com/)[[target=_blank]], [WebStorm](https://www.jetbrains.com/webstorm/)[[target=_blank]], [ShareX](https://getsharex.com/)[[target=_blank]].",
      "workInBook": "If you work on UI components - work in the book environment (`yarn serve:book`). We want to keep global stuff out of components."
    },
    "componentFolderStructure": {
      "title": "Component folder structure"
    },
    "beforeReleaseWorkflow": {
      "title": "Before release workflow",
      "description": "Update packages' versions. Update the lock files (for both `npm` and `yarn`)\n"
    },
    "npmScripts": {
      "title": "Commonly used NPM scripts"
    },
    "credits": {
      "title": "Credits",
      "description": "[Hall of fame!](https://github.com/epicmaxco/vuestic-ui/graphs/contributors)[[target=_blank]]"
    }
  },
  "globalConfig": {
    "title": "Global config",
    "subtitle": "With the help of Global config one can configure default values for colors, icons and components' props. ",
    "structure": "Global config consists of `icons`, `colors`, `components` and `componentsAll` configs. ",
    "setupExampleTitle": "You can provide a custom config as the second argument when registering the `VuesticPlugin`:",
    "reactiveUpdateExampleTitle": "Or you can update the configuration partially at the runtime:",
    "reactiveSetExampleTitle": "Alternatively, you can substitute the whole configuration object at the runtime with another one:",
    "links": {
      "readMore": "More on configuration",
      "icons": "Icons config",
      "components": "Components config",
      "colors": "Colors config"
    },
    "useInRuntime": "The global configuration object might be made reactive:",
    "api": {
      "icons": "Used to configure icon fonts and aliases.",
      "components": "Used to globally overwrite props of specific components.",
      "componentsAll": "Used to globally set props for all components. If there are no other source of props.",
      "colors": "Used to define theme colors that components make use of. Here you can redefine default Vuestic-theme colors."
    }
  },
  "iconsConfig": {
    "title": "Icons config",
    "about": "By default Vuestic UI uses [Material Design icons](https://fonts.google.com/icons)[[target=_blank]]. If you want to use other font libraries you can configure `VaIcon` to use them.",
    "readBeforeStart": "Find out more about the VaIcon component",
    "problem": {
      "definition": "There is a problem with icon libraries however: they usually use different interfaces to render icons.",
      "materialIcons": "For example Material Icons wants us to set `material-icons` class and provide icon name inside the `span` tag.",
      "fontAwesome": "If we want to use FontAwesome5 we need to provide the `fas` class and then another one with the name of the icon (prefixed with `fa-` on the `i` tag).",
      "summary": "With Icons config we can instead provide an icon name using any style that fits our needs the best. We only need to configure how an icon for with the provided name will be rendered once."
    },
    "fonts": {
      "title": "Fonts",
      "about": "We want to use the `<va-icon name='icon-name' />` pattern. We can setup a config for a specific icon name pattern. In that config we provide an icon class, contents (innerHTML) or a Vue component relative to icon name.",
      "fontNamePattern": {
        "title": "Font name pattern",
        "about": "Font name pattern is similar to vue dynamic routes. We can use dynamic segments to dynamically generate the icon class, content and props. Dynamic segments should be written in curly brackets."
      },
      "example": {
        "title": "Example fonts config",
        "about": "Let`s take a look at some examples",
        "explain": "Below we can see how the icons would be transformed"
      },
      "readMore": "More information on",
      "advancedFontsUsage": "advanced fonts usage"
    },
    "aliases": {
      "title": "Aliases",
      "about": "To make code simpler we can use aliases. Alias has a `to` prop which would change the name of a given icon to the value of `to` and look for an appropriate font config. All the props from resolved font would be applied to that icon if they were not defined in alias config.",
      "example": {
        "title": "Example aliases config",
        "about": "Below we can see how the icons would be transformed",
        "explain": "As you can see alias config is more important than font config. And `va-icon` props take precedence over both."
      }
    },
    "setup": {
      "title": "Let's build our config",
      "about": "We need to update icons config in our global config. Icons config is a flat array with Vuestic default font and aliases. We can use the `createIconsConfig()` helper to create a new config with Vuestic defaults and our custom fonts and aliases merged together. For example:"
    },
    "api": {
      "title": "Icon config API",
      "name": "String or regex. Can be a string with dynamic segment or regex to use this config as font.",
      "iconClass": "Class that will be applied to the icon. Can be a string or a function that accepts dynamic segment value and returns a string.",
      "content": "Content that will be inside the icon. Can be a string or a function that accepts dynamic segment value and returns a string.",
      "component": "VueComponent that will be used instead of a tag.",
      "componentProps": "Props that will be bound to `component`. Can be an object or a function that accepts dynamic segment value and returns an object.",
      "to": "Here you can define name of a config which values will be merged to this config",
      "tag": "A tag to render icon with. By default - `i`",
      "color": "Sets the CSS `color` property to a given value",
      "rotation": "Rotates the icon by specified angle (in degrees)",
      "spin": "Applies the spin animation to the icon"
    }
  },
  "componentsConfig": {
    "title": "Components config",
    "subtitle": "Component config allows you to override default props' values for any Vuestic component. It is an object where the keys are component names and the values are prop-value pairs you want to overwrite. For example:",
    "demoTitle": "The example below allows you to change styling of all the buttons for the whole Vuestic Documentation site. Feel free to navigate to Button docs page and take a look at the updated examples.",
    "resetConfig": "Reset config",
    "componentsAll" : {
      "title": "All components config",
      "subtitle": "You could use `componentsAll` global config property to set prop values for all components at once. It will be applied if there are no other source of prop value. For example:",
      "description": "These prop values will be used as default values if prop is not set somewhere else (inside the component or inside other configs)."
    },
    "vaConfig": {
      "title": "Scoped config",
      "subtitle": "You can use the `<va-config>` component to overwrite the default props' values for the components inside that tag. Take a look at the demo below:",
      "explain": "Look at the code. In this demo we have changed the default color for all the `VaButton`s and `VaIcons`s inside the `VaConfig`. We also pass a different value to the third button's `color` prop (direct component's prop takes precedence over the one specified on the `VaConfig`)."
    },
    "defaultSizes": {
      "title": "Default sizes",
      "description": "If you would like to set default sizes for the component you could use sizesConfig property. Feel free to check the example below:"
    },
    "api": {
      "title": "Component config service API",
      "types": "Types",
      "ComponentConfig": "Object where the keys are Vuestic component names and the values are the component's new default props.",
      "ComponentsAllConfig": "Object where the keys are prop names and the values are the prop's new default values. Will be applied if there are no other source of prop value."
    }
  },
  "colorsConfig": {
    "title": "Colors config",
    "about": "You can personalize colors that are used in your app. The colors used by Vuestic components may be redefined dynamically. You can also add your own colors that you intend to use frequently in your app.",
    "example": {
      "about": "For example, you can change the `primary` color that is used by almost all Vuestic components.",
      "demo": "Pick a different primary color below and notice how the colors are changing all over the page."
    },
    "reactivity": {
      "subtitle": "Reactivity",
      "about": "As you can see, methods like `getColor`, `getColors` don’t return `Proxy`. If you want to use color as reactive Proxy, use computed properties like in the example above."
    },
    "otherServices": {
      "subtitle": "Colors config with other services",
      "components": "You can use your custom colors in Components config.",
      "icons": "As well as in Icons config.",
      "css": "CSS-variables do also respect the color config and dynamically change their values!"
    },
    "api": {
      "title": "Icon config service API",
      "types": "Types",
      "ColorConfig": "An object where the keys are the color names and the values are valid CSS colors.",
      "ColorInput": "A valid CSS color",
      "methods": "Methods",
      "useColor": "Return colors methods",
      "setColors": "Used to merge new colors into config or update existing colors.",
      "getColors": "Returns current color config",
      "getColor": "Return color by name",
      "getBoxShadowColor": "Return a color that is appropriate to be used for the `box-shadow`.",
      "getHoverColor": "Return a color that you can use as a `hover` color.",
      "getFocusColor": "Return a color that you can use as a `focus` color.",
      "getGradientBackground": "Return a gradient-color that you can use as a `background-image` CSS property's value.",
      "hookMethods": "useColors hook methods"
    }
  },
  "cssVariables": {
    "title": "Css Variables",
    "description": "Vuestic UI extracts crucial CSS styles in the form of [CSS variables (custom properties)](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties)[[target=_blank]]. No need to install any loaders or additional packages to override components' styling. Instead, you can deeply customize components' visuals using the following simple syntax.",
    "convention": {
      "title": "Convention",
      "description": "Vuestic UI uses the following convention to organize CSS Variables for the sake of convenience:"
    },
    "overriding": {
      "title": "Overriding",
      "description": "No additional tooling is needed. Just create a CSS file (like `overrides.css`), import it into your `main.js` and start redefining the variables as you do with any other CSS properties:"
    }
  },
  "navbar": {
    "title": "Navbar",
    "examples": {
      "default": {
        "title": "Default",
        "text": "You can use left, center and right slots to pass items to navbar. "
      },
      "colors": {
        "title": "Colors",
        "text": "By default navbar uses `secondary` color. You can pass `color` props to change navbar background color. Also, text color depends on navbar background color. But you can pass own color if you want."
      },
      "shape": {
        "title": "Shape",
        "text": "You can add the shape to navbar background. Shape color will be taken automatic from `color` prop."
      }
    }
  },
  "buttonDropdown": {
    "title": "Button Dropdown",
    "summaryText": "This is a button that displays drop-down content when clicked.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "By default, wrap your content in `va-button-dropdown` component."
      },
      "split": {
        "title": "Split",
        "text": "You can split the button in two."
      },
      "colors": {
        "title": "Colors",
        "text": "The `va-dropdown-button` can be colored."
      },
      "sizes": {
        "title": "Sizes",
        "text": "Component can apply button sizes."
      },
      "styles": {
        "title": "Styles",
        "text": "You can use the same styles as in `va-button`."
      },
      "disabled": {
        "title": "Disabled",
        "text": "The component can be disabled."
      },
      "icons": {
        "title": "Icons",
        "text": "You can set the dropdown icon."
      },
      "events": {
        "title": "Events",
        "text": "The `va-dropdown-button` can handle click events."
      },
      "clickInside": {
        "title": "Click inside",
        "text": "You could set the dropdown to be closed or not after clicking on its content."
      }
    }
  },
  "popover": {
    "title": "Popover",
    "summaryText": "A `va-popover` can be used to display some text on top of the component.",
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "Wrap your component in a `va-popover` tag and provide a `message` property with text."
      },
      "color": {
        "title": "Color",
        "text": "You can set different background colors to the component."
      },
      "placement": {
        "title": "Placement",
        "text": "A component can be set in a different position. Use a position property to set it: `top`, `left`, `right` and `bottom` are available."
      },
      "icon": {
        "title": "Icon",
        "text": "You can set an icon to the component."
      },
      "title": {
        "title": "Title",
        "text": "You can set a title to the popover."
      },
      "trigger": {
        "title": "Trigger",
        "text": "Events triggering the popover separated with spaces: `hover`, `click` or `focus`."
      }
    }
  },
  "typography": {
    "title": "Typography",
    "description": "To improve your application's UX, make sure to style the typography the way that would match the rest of the Vuestic-UI-based look and feel.",
    "headings": "Headings",
    "titled": "Title heading",
    "textStyles": "Text styles",
    "codeSnippet": "Code snippet",
    "textCode": "Text-code",
    "other": "Other typography styles",
    "orderedList": "Ordered list",
    "unorderedList": "Unordered list",
    "links": "Links",
    "textHighlighted": "Highlighted text",
    "blockquote": "Blockquote",
    "textBlock": "Text block"
  },
  "ag-grid": {
    "title": "AG Grid Theme",
    "description": "If you need more flexible customization of the display of tables, we recommend using the [AG Grid](https://www.ag-grid.com/vue-data-grid/getting-started)[[target=_blank]] library. Vuestic UI provides a ready-made style theme for this library.",
    "otherTables": {
      "text": "Also, we provide styles for HTML Table and have own data-table component:",
      "htmlTable": "HTML Table",
      "dataTable": "Data Table"
    },
    "installation": "AG Grid installation",
    "dependencies": "To start using AG Grid, install the dependencies in your project.",
    "importStyles": "Then import the stylesheet that define the grid \"structure\" and apply the `ag-theme-vuestic` theme on the grid component.",
    "examples": {
      "default": {
        "title": "Default usage",
        "text": "To render a vuestic-style table correctly, you must provide the table dimensions (`width` and `height`), dataset (`rowData`) and column definitions (` columnDefs`) according to this dataset."
      },
      "styles": {
        "title": "Styles",
        "text": "The theme supports the use of the classes `ag-theme-vuestic--striped` to highlight each even row of the table and` ag-theme-vuestic--hoverable` to highlight a line on hover."
      },
      "filter": {
        "title": "Filters and sorting",
        "text": "You can provide some options for the definition object to enable filtering and sorting."
      },
      "pinning": {
        "title": "Rows pinning",
        "text": "To pin rows at the top or bottom, simply provide an array of rows for the `pinnedTopRowData` and `pinnedBottomRowData` properties."
      },
      "pagination": {
        "title": "Pagination",
        "text": "You can enable pagination for the table by providing the required properties."
      },
      "editable": {
        "title": "Cell editing",
        "text": "Provide `editable` property to column definition and then double click or press Enter on selected cell to enable editing mode."
      }
    },
    "attention": "Vuestic-UI provides styles for AG-Grid Community and doesn't change any functional. For more examples and differences between Community and Enterprise versions visit the official [AG-Grid documentation page](https://www.ag-grid.com/vue-data-grid/column-properties/)[[target=_blank]]."
  },
  "dataTable": {
    "title": "Data table",
    "description": "The `va-data-table` component is used for displaying tabular data. Features include sorting, searching, pagination, row selection, ability to add additional row(s) to table header (`<thead>`), body (`<tbody>`) or footer (`<tfoot>`) and other functions.",
    "otherTables": {
      "text": "Also, we provide styles for HTML Table and have own theme for AG-Grid:",
      "htmlTable": "HTML Table",
      "agGrid": "AG Grid Theme"
    },
    "examples": {
      "default": {
        "title": "Basic usage",
        "text": "The standard `va-data-table` will by default render your data as simple rows."
      },
      "slots": {
        "title": "Slots",
        "text": [
          "Slots allow you to control the display of data and their views in different parts of the table. The examples below demonstrate some of these slots and what you can do with each of them.",
          "**Using custom slots**. Custom slots (*username*, *street* and *company name*) display certain data.",
          "**Showing header, body and footer's prepend and append static rows**. For added (prepended and appended) static rows an additional `className` with a background color is set.",
          "**Using `colgroup` slot to set specific attributes to columns**. For last column an additional `className` with a background color is set."
        ]
      },
      "filtering": {
        "title": "Filtering",
        "text": "`va-data-table` allows to apply a single filter for the entire table with the `filter` prop. To use a custom filtering function provide the `va-data-table` with the `filter-method` prop.\n\nThe following example shows the use of a custom filtering function (which looks for the exact match rather than the standard one which checks for substring-inclusion) when the respective checkbox is checked."
      },
      "sorting": {
        "title": "Sorting",
        "text": "You can specify which columns should be sortable by providing a column definition object (see the `columns` prop below) with the `sortable: true` field. Making a column sortable means allowing to click the column's header to toggle the sorting by that column's values.\n\nYou can also provide a custom sorting function for a given column using the `sortingFn` field on the column definition object: `sortingFn: (a: any, b: any) => number`. The function takes two cells' initial values (a, b) (**note: initial values** (i.e. in the form the user provided them, rather than stringified)) and must return a number (-1, 0, +1) indicating whether the two rows should be swapped the places or not. See the standard JS's [Array.prototype.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)[[target=_blank]] for details. If you want to runtime-disable the custom function and start making use of the built-in one, pass the `undefined` to the `sortingFn`.\n\n`va-data-table` also optionally accepts the `sort-by` and the `sorting-order` modeled props, which allow users to change sorting settings from-outside and to model the changes introduced to the table's sorting by interacting with the table itself. They also allow to provide initial sorting values. **Properties work through the `v-model`**."
      },
      "selection": {
        "title": "Selection",
        "text": "Use the `selectable` prop to indicate whether the `va-data-table` should have selectable rows or not. The highlighting color of the selected row might be changed with the `selected-color` prop, passing a string with one of the possible color options: `'primary'`, `'danger'` and so on.\n\nThe selection may optionally be attached to a model with the standard `v-model` (using the `:model-value` prop and the `update:modelValue` event). This also allows to set the initial selection on the `va-data-table`."
      },
      "pagination": {
        "title": "Pagination",
        "text": "Use the `per-page` and `current-page` props to enable pagination.\n\nThe `va-data-table` component is paginator-agnostic. I.e. it can work with any pagination component you'd like. In the example below, it uses both standard inputs and the `va-pagination` component."
      },
      "alignment": {
        "title": "Alignment",
        "text": "Should be specified on columns (see the `columns` prop below). Allows to provide different values for headers and for columns' cells. Pretty much the same as for `text-align` and `vertical-align` css properties."
      },
      "other": {
        "title": "Other",
        "text": "The component has many different properties, some of them are shown below with an example."
      }
    }
  },
  "uiElementGuide": {
    "title": "UI Element Requirements",
    "description": "This page is intended for Vuestic UI contributors. It describes the requirements for the UI elements.",
    "highLevelStrategy": {
      "title": "High Level Strategy",
      "description": {
        "userExpectations": "Components should be as user expects them to be. We achieve that by checking refs ([Vuetify](https://vuetifyjs.com)[[target=_blank]], [Quasar](https://quasar.dev)[[target=_blank]], [Ant Design](https://ant.design)[[target=_blank]], [iView](http://iview.talkingdata.com)[[target=_blank]], [Element UI](https://element.eleme.io)[[target=_blank]], etc.).",
        "qualityComponents": "Components should be of high quality. We achieve that by manually testing edge-cases and by early refactoring."
      }
    },
    "coreFeatures": {
      "title": "Core Features",
      "description": {
        "visualFeedback": "**Visual feedback** - When a user interacts with a component they should see a result of their actions (could be implemented with :active selector or somehow else depending on the case).",
        "keyboardNavigation": "**Keyboard navigation** - You must ensure that UI elements are keyboard-accessible, and you must disable that functionality for elements that should not receive keyboard focus.",
        "statelessSupport": "**Stateless support** (see the [StatefulMixin](https://github.com/epicmaxco/vuestic-ui/blob/develop/packages/ui/src/mixins/StatefulMixin/README.md)[[target=_blank]])."
      }
    }
  },
  "timePicker": {
    "title": "Time Picker",
    "examples": {
      "default": {
        "title": "Default",
        "text": ""
      },
      "readonlyAndDisabled": {
        "title": "Readonly and disabled",
        "text": ""
      },
      "ampm": {
        "title": "AM PM",
        "text": "You can specify `ampm` props if you want to use 12-hours clock format set as true or 24-hours clock set as false."
      },
      "periodUpdatesModelValue": {
        "title": "Period updates model value",
        "text": ""
      },
      "view": {
        "title": "View",
        "text": "You can specify if time picker needs to show seconds and minutes."
      },
      "filter": {
        "title": "Filter",
        "text": "You can hide specific time and user will not be able to select it."
      }
    }
  },
  "timeInput": {
    "title": "Time Input",
    "description": "Time Input component is a combination of Time Picker and Input components. You can find usage examples using following links:",
    "examples": {
      "default": {
        "title": "Default",
        "text": ""
      },
      "input": {
        "title": "Parsing",
        "text": "Default parse time function likely cover all of your needs, but you can provide your own parse function using `parseTime` prop.",
        "notion": "It can parse such inputs: 11, 11:00, 11:00:00, 11 pm, 23, 2300, 11.00, 11somejunk00"
      },
      "format": {
        "title": "Formatting",
        "text": "We format input text specific to `view` prop. You can pass custom format function that accepts Date and return string."
      },
      "ampm": {
        "title": "AM PM",
        "text": "VaTimeInput will automatically format input string if you need to use AM PM."
      },
      "validation": {
        "title": "Validation",
        "text": "Validation works the same way as `VaInput` validation, except rules functions should accept `Date` instead of string."
      }
    }
  }
}